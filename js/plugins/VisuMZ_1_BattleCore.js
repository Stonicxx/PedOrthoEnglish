//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.73;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.73] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

function _0x3af6(_0x46b7bc,_0x5d6262){const _0x5cc0c6=_0x5cc0();return _0x3af6=function(_0x3af6e5,_0x50d6bc){_0x3af6e5=_0x3af6e5-0x122;let _0x5edc3a=_0x5cc0c6[_0x3af6e5];return _0x5edc3a;},_0x3af6(_0x46b7bc,_0x5d6262);}const _0x397c95=_0x3af6;(function(_0x57fa8a,_0x17a617){const _0x37c002=_0x3af6,_0xf85aad=_0x57fa8a();while(!![]){try{const _0x5bb4f8=parseInt(_0x37c002(0x214))/0x1*(parseInt(_0x37c002(0x8de))/0x2)+parseInt(_0x37c002(0x5b5))/0x3+-parseInt(_0x37c002(0x21a))/0x4+parseInt(_0x37c002(0x693))/0x5+parseInt(_0x37c002(0x344))/0x6*(-parseInt(_0x37c002(0x9ed))/0x7)+parseInt(_0x37c002(0x22f))/0x8*(-parseInt(_0x37c002(0x435))/0x9)+-parseInt(_0x37c002(0x3e1))/0xa*(-parseInt(_0x37c002(0x81a))/0xb);if(_0x5bb4f8===_0x17a617)break;else _0xf85aad['push'](_0xf85aad['shift']());}catch(_0x5efb6c){_0xf85aad['push'](_0xf85aad['shift']());}}}(_0x5cc0,0xdb661));var label=_0x397c95(0x1f3),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x397c95(0x742)](function(_0x2d527f){const _0x53a700=_0x397c95;return _0x2d527f[_0x53a700(0xa62)]&&_0x2d527f['description'][_0x53a700(0x932)]('['+label+']');})[0x0];VisuMZ[label][_0x397c95(0x716)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x397c95(0x5ff)]=function(_0x4e5790,_0x275324){const _0x374513=_0x397c95;for(const _0x39e0e6 in _0x275324){if(_0x374513(0x58f)!==_0x374513(0x58f)){const _0x3c5e9c=this[_0x374513(0x15b)],_0x291a9d=_0x163dd0[_0x374513(0xcf9)](),_0x13a1cd=_0x46ac12['x']+_0x541bc6[_0x374513(0xaee)](_0x347afe[_0x374513(0x76b)]/0x2)+_0x291a9d;_0x3c5e9c['x']=_0x3c5e9c['width']/-0x2+_0x13a1cd,_0x3c5e9c['y']=_0x555f17[_0x374513(0xaee)](_0x1d48fb[_0x374513(0x9b1)]/0x2);}else{if(_0x39e0e6[_0x374513(0xb38)](/(.*):(.*)/i)){const _0x5df709=String(RegExp['$1']),_0x4f7894=String(RegExp['$2'])[_0x374513(0x27f)]()[_0x374513(0xb34)]();let _0x32913b,_0x41219a,_0x414cd5;switch(_0x4f7894){case'NUM':_0x32913b=_0x275324[_0x39e0e6]!==''?Number(_0x275324[_0x39e0e6]):0x0;break;case'ARRAYNUM':_0x41219a=_0x275324[_0x39e0e6]!==''?JSON['parse'](_0x275324[_0x39e0e6]):[],_0x32913b=_0x41219a[_0x374513(0xb9a)](_0x4a1319=>Number(_0x4a1319));break;case _0x374513(0x1fe):_0x32913b=_0x275324[_0x39e0e6]!==''?eval(_0x275324[_0x39e0e6]):null;break;case _0x374513(0x62e):_0x41219a=_0x275324[_0x39e0e6]!==''?JSON[_0x374513(0x8c7)](_0x275324[_0x39e0e6]):[],_0x32913b=_0x41219a[_0x374513(0xb9a)](_0x367b8f=>eval(_0x367b8f));break;case'JSON':_0x32913b=_0x275324[_0x39e0e6]!==''?JSON[_0x374513(0x8c7)](_0x275324[_0x39e0e6]):'';break;case _0x374513(0x202):_0x41219a=_0x275324[_0x39e0e6]!==''?JSON[_0x374513(0x8c7)](_0x275324[_0x39e0e6]):[],_0x32913b=_0x41219a[_0x374513(0xb9a)](_0x4ebdf5=>JSON['parse'](_0x4ebdf5));break;case'FUNC':_0x32913b=_0x275324[_0x39e0e6]!==''?new Function(JSON['parse'](_0x275324[_0x39e0e6])):new Function(_0x374513(0x630));break;case'ARRAYFUNC':_0x41219a=_0x275324[_0x39e0e6]!==''?JSON['parse'](_0x275324[_0x39e0e6]):[],_0x32913b=_0x41219a[_0x374513(0xb9a)](_0x23c878=>new Function(JSON[_0x374513(0x8c7)](_0x23c878)));break;case _0x374513(0x5a5):_0x32913b=_0x275324[_0x39e0e6]!==''?String(_0x275324[_0x39e0e6]):'';break;case _0x374513(0x6d3):_0x41219a=_0x275324[_0x39e0e6]!==''?JSON[_0x374513(0x8c7)](_0x275324[_0x39e0e6]):[],_0x32913b=_0x41219a[_0x374513(0xb9a)](_0x34a32d=>String(_0x34a32d));break;case _0x374513(0x57a):_0x414cd5=_0x275324[_0x39e0e6]!==''?JSON[_0x374513(0x8c7)](_0x275324[_0x39e0e6]):{},_0x4e5790[_0x5df709]={},VisuMZ[_0x374513(0x5ff)](_0x4e5790[_0x5df709],_0x414cd5);continue;case'ARRAYSTRUCT':_0x41219a=_0x275324[_0x39e0e6]!==''?JSON[_0x374513(0x8c7)](_0x275324[_0x39e0e6]):[],_0x32913b=_0x41219a[_0x374513(0xb9a)](_0x66f28d=>VisuMZ[_0x374513(0x5ff)]({},JSON[_0x374513(0x8c7)](_0x66f28d)));break;default:continue;}_0x4e5790[_0x5df709]=_0x32913b;}}}return _0x4e5790;},(_0x1eeb5f=>{const _0x470778=_0x397c95,_0x79593d=_0x1eeb5f[_0x470778(0xa29)];for(const _0x202f93 of dependencies){if(_0x470778(0x92d)==='eYLPl'){if(!Imported[_0x202f93]){alert(_0x470778(0xc78)['format'](_0x79593d,_0x202f93)),SceneManager[_0x470778(0x565)]();break;}}else{const _0x3a2a13=_0x212655['actor']();_0x497d35[_0x470778(0x1f3)][_0x470778(0x20b)][_0x470778(0x6a3)](this);if(_0x3a2a13){if(_0x3a2a13===_0x297dba['actor']())return;if(_0x3a2a13===_0x56c1dd[_0x470778(0x127)])return;if(_0x3a2a13[_0x470778(0x7eb)]())_0x3a2a13[_0x470778(0x7eb)]()[_0x470778(0x65e)]();}}}const _0x2e1c28=_0x1eeb5f[_0x470778(0x7fd)];if(_0x2e1c28[_0x470778(0xb38)](/\[Version[ ](.*?)\]/i)){const _0x48366b=Number(RegExp['$1']);_0x48366b!==VisuMZ[label][_0x470778(0x708)]&&(alert(_0x470778(0x228)[_0x470778(0xadd)](_0x79593d,_0x48366b)),SceneManager[_0x470778(0x565)]());}if(_0x2e1c28[_0x470778(0xb38)](/\[Tier[ ](\d+)\]/i)){if(_0x470778(0x8a8)!==_0x470778(0x8a8))_0x2df1fd[_0x470778(0x1f3)][_0x470778(0x506)][_0x470778(0x6a3)](this,_0x4c270a),this[_0x470778(0x7aa)]();else{const _0x1d7c4b=Number(RegExp['$1']);if(_0x1d7c4b<tier){if(_0x470778(0xa45)===_0x470778(0x9b9))return _0x1f4baa[_0x470778(0x3b5)]();else alert(_0x470778(0x892)['format'](_0x79593d,_0x1d7c4b,tier)),SceneManager[_0x470778(0x565)]();}else tier=Math['max'](_0x1d7c4b,tier);}}VisuMZ[_0x470778(0x5ff)](VisuMZ[label][_0x470778(0x716)],_0x1eeb5f[_0x470778(0x554)]);})(pluginData),VisuMZ[_0x397c95(0x32b)]=function(_0x2b4f2a){const _0x56f1c7=_0x397c95;let _0x5d64c3=[];for(const _0xdb4ae of _0x2b4f2a){if(_0x56f1c7(0x53f)!==_0x56f1c7(0x53f)){let _0x4f71e7=_0x405e7b[_0x56f1c7(0x1f3)]['Game_Troop_expTotal'][_0x56f1c7(0x6a3)](this);return this['expRate']&&(_0x4f71e7*=this[_0x56f1c7(0x9cc)]()),_0x4151fd['ceil'](_0x4f71e7);}else _0x5d64c3=_0x5d64c3[_0x56f1c7(0x900)](VisuMZ[_0x56f1c7(0x31f)](_0xdb4ae));}return _0x5d64c3[_0x56f1c7(0x742)](_0x24ba84=>_0x24ba84);},VisuMZ[_0x397c95(0x31f)]=function(_0x82e7f8){const _0x285c18=_0x397c95,_0x385947=BattleManager[_0x285c18(0x77b)]()['filter'](_0x1676de=>_0x1676de&&_0x1676de[_0x285c18(0x6f2)]()),_0x22635e=BattleManager[_0x285c18(0x127)],_0x1aaa08=BattleManager[_0x285c18(0x227)],_0x2c8de7=BattleManager['_allTargets']?BattleManager[_0x285c18(0xc3d)][_0x285c18(0x468)](0x0):_0x385947;_0x82e7f8=_0x82e7f8[_0x285c18(0x9a2)]()[_0x285c18(0xb34)]();if(_0x82e7f8===_0x285c18(0xce8))return[_0x22635e];else{if(_0x82e7f8===_0x285c18(0x6b7)){if(_0x285c18(0x225)!=='EtUBR'){const _0x4cd81c=_0x56dc1d[_0x285c18(0x1f3)]['Settings'][_0x285c18(0x7a6)];this[_0x285c18(0x2ad)]=_0x4cd81c['CriticalColor'][_0x285c18(0x468)](0x0),this[_0x285c18(0x5fa)]=_0x4cd81c[_0x285c18(0xc0f)];}else return[_0x1aaa08];}else{if(_0x82e7f8===_0x285c18(0x2f5)){if(_0x1aaa08){const _0x58a5d9=_0x2c8de7[_0x285c18(0xb70)](_0x1aaa08);return _0x58a5d9>=0x0?[_0x2c8de7[_0x58a5d9-0x1]||_0x1aaa08]:[_0x1aaa08];}}else{if(_0x82e7f8===_0x285c18(0x5e2)){if(_0x285c18(0x9fd)!=='ThGXr'){if(_0x1aaa08){const _0x19c395=_0x2c8de7[_0x285c18(0xb70)](_0x1aaa08);return _0x19c395>=0x0?[_0x2c8de7[_0x19c395+0x1]||_0x1aaa08]:[_0x1aaa08];}}else{let _0xfdc985=_0x460e3a[_0x285c18(0x49d)](_0x223574[_0x285c18(0x1f3)][_0x285c18(0x1a3)][_0x285c18(0x6a3)](this));return _0x50c8a9['BattleCore'][_0x285c18(0xb1b)](_0xfdc985);}}else{if(_0x82e7f8===_0x285c18(0x552))return _0x285c18(0x735)===_0x285c18(0x735)?_0x2c8de7:_0x3aeb3a[_0x285c18(0x1f3)][_0x285c18(0x716)]['Actor'][_0x285c18(0x457)];else{if(_0x82e7f8===_0x285c18(0x5f6))return[_0x22635e][_0x285c18(0x900)](_0x2c8de7);else{if(_0x82e7f8==='not\x20focus')return _0x385947[_0x285c18(0x742)](_0xc00565=>_0xc00565!==_0x22635e&&!_0x2c8de7[_0x285c18(0x932)](_0xc00565)&&_0xc00565[_0x285c18(0x40d)]());else{if(_0x82e7f8===_0x285c18(0xbb7))return'cLUjR'===_0x285c18(0x532)?[VisuMZ[_0x285c18(0x555)]()]:this[_0x285c18(0x3cf)]()[_0x285c18(0xc11)];else{if(_0x82e7f8[_0x285c18(0xb38)](/SPECIAL (.*)>/i)){if(_0x285c18(0xc6b)!=='aAcGM'){const _0x6eb544=String(RegExp['$1'])[_0x285c18(0x9af)](',')[_0x285c18(0xb9a)](_0x244336=>_0x244336['trim']());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x6eb544)];}else return!![];}}}}}}}}}if(_0x22635e){if(_0x82e7f8==='alive\x20friends'){if(_0x285c18(0x2f3)!=='eCTGk')return _0x22635e[_0x285c18(0x154)]()[_0x285c18(0x4c3)]();else{const _0x2d524a=_0x5aebf4[_0x285c18(0x6fe)][_0x285c18(0x1e8)];_0x2d524a[_0x285c18(0x2b2)]['y']=0x0;}}else{if(_0x82e7f8===_0x285c18(0xb35)){if(_0x285c18(0xc54)!==_0x285c18(0xc54))_0xd69a7b[_0x285c18(0x1f3)][_0x285c18(0x782)][_0x285c18(0x6a3)](this,_0x92fcfd),this['callNextMethod']();else return _0x22635e['friendsUnit']()[_0x285c18(0x4c3)]()[_0x285c18(0x742)](_0x549a85=>_0x549a85!==_0x22635e);}else{if(_0x82e7f8===_0x285c18(0xaa5)){if('yyxjm'===_0x285c18(0xc45))return _0x22635e[_0x285c18(0x154)]()[_0x285c18(0x4c3)]()[_0x285c18(0x742)](_0x14e0b1=>_0x14e0b1!==_0x1aaa08);else{if(!_0x3e06c9[_0x285c18(0x650)]())return;_0x4b376a[_0x285c18(0x5ff)](_0x12f195,_0x36a5ed);const _0x36719f=_0x4e5a60[_0x285c18(0xaeb)](),_0x7dab5c=_0x4de5e5[_0x285c18(0x78a)],_0x29d4a7=_0x4c7ee5[_0x285c18(0x44d)];if(!_0x36719f)return;_0x1e9529['_targetIndex']=_0x7dab5c,_0x220396[_0x285c18(0x227)]=_0x1285d9['_allTargets']?_0x4258c2[_0x285c18(0xc3d)][_0x2d7f80[_0x285c18(0xafb)]]||null:null,_0x459bf7[_0x285c18(0x227)]&&_0x29d4a7[_0x285c18(0x27f)]()[_0x285c18(0xb34)]()!==_0x285c18(0xb7f)&&_0x36719f[_0x285c18(0x3b7)]([_0x29d4a7]);}}else{if(_0x82e7f8===_0x285c18(0x1e6))return _0x22635e['friendsUnit']()[_0x285c18(0x7a8)]();else{if(_0x82e7f8['match'](/FRIEND INDEX (\d+)/i)){if(_0x285c18(0xc2e)!==_0x285c18(0xc2e))this['autoMeleeSingleTargetActionSet'](_0x5294ac,_0x4c27ad,_0x5f5422);else{const _0x10c8af=Number(RegExp['$1']);return[_0x22635e[_0x285c18(0x154)]()[_0x285c18(0x2e0)]()[_0x10c8af]];}}}}}}if(_0x82e7f8===_0x285c18(0x195))return _0x22635e[_0x285c18(0xb5f)]()[_0x285c18(0x4c3)]();else{if(_0x82e7f8===_0x285c18(0x7f3)){if(_0x285c18(0x739)==='RmDgG'){if(!_0x30fd10[_0x285c18(0x2b1)]()){const _0x339144=_0x558756[_0x285c18(0x666)](_0x305931['x'],_0x1c7171['y']);if(this[_0x285c18(0x5a3)]&&this[_0x285c18(0x5a3)][_0x339144])return this[_0x285c18(0x5a3)][_0x339144];}return _0x2bd554[_0x285c18(0x1f3)][_0x285c18(0x7ca)][_0x285c18(0x6a3)](this);}else return _0x22635e[_0x285c18(0xb5f)]()[_0x285c18(0x4c3)]()[_0x285c18(0x742)](_0x148256=>_0x148256!==_0x1aaa08);}else{if(_0x82e7f8===_0x285c18(0xc28))return _0x22635e[_0x285c18(0xb5f)]()[_0x285c18(0x7a8)]();else{if(_0x82e7f8[_0x285c18(0xb38)](/OPPONENT INDEX (\d+)/i)){if(_0x285c18(0x889)!==_0x285c18(0xa13)){const _0x30ef72=Number(RegExp['$1']);return[_0x22635e[_0x285c18(0xb5f)]()[_0x285c18(0x2e0)]()[_0x30ef72]];}else{if(_0x425528){const _0x145784=_0x591d12[_0x285c18(0x7eb)]();this[_0x285c18(0x4da)]('performJump',[_0x4a13ab],_0x2e428b,_0x1bacce),this[_0x285c18(0x4da)](_0x285c18(0x623),_0x136983,_0x145784[_0x285c18(0x169)],_0x145784['_homeY'],_0x2ff4c9,![],_0x285c18(0xa76)),this[_0x285c18(0x4da)](_0x285c18(0x93a),[_0x31ed39],_0x285c18(0xc98)),this[_0x285c18(0x4da)](_0x285c18(0xb09)),this[_0x285c18(0x4da)](_0x285c18(0x93a),[_0x12864e],_0x285c18(0x77c));}}}}}}}if(_0x82e7f8===_0x285c18(0x65f))return $gameParty['aliveMembers']();else{if(_0x82e7f8===_0x285c18(0x45c))return $gameParty[_0x285c18(0x4c3)]()['filter'](_0x8b4e4c=>_0x8b4e4c!==_0x22635e);else{if(_0x82e7f8==='alive\x20actors\x20not\x20target')return $gameParty['aliveMembers']()['filter'](_0x2869b1=>_0x2869b1!==_0x1aaa08);else{if(_0x82e7f8===_0x285c18(0x340))return $gameParty[_0x285c18(0x7a8)]();else{if(_0x82e7f8[_0x285c18(0xb38)](/ACTOR INDEX (\d+)/i)){if('onBpO'===_0x285c18(0xb2d)){const _0x551238=Number(RegExp['$1']);return[$gameParty[_0x285c18(0x2e0)]()[_0x551238]];}else return _0x8891d9[_0x285c18(0x227)];}else{if(_0x82e7f8['match'](/ACTOR ID (\d+)/i)){if(_0x285c18(0xba8)===_0x285c18(0x9ab))_0x4c0002[_0x285c18(0x6cf)][_0x285c18(0x487)]['call'](this),this[_0x285c18(0x3ec)]();else{const _0x1d80e4=Number(RegExp['$1']);return[$gameActors[_0x285c18(0x793)](_0x1d80e4)];}}}}}}}if(_0x82e7f8===_0x285c18(0x1f9))return $gameTroop[_0x285c18(0x4c3)]();else{if(_0x82e7f8===_0x285c18(0x261))return $gameTroop[_0x285c18(0x4c3)]()[_0x285c18(0x742)](_0xdac9d7=>_0xdac9d7!==_0x22635e);else{if(_0x82e7f8===_0x285c18(0x33b))return $gameTroop[_0x285c18(0x4c3)]()[_0x285c18(0x742)](_0x470446=>_0x470446!==_0x1aaa08);else{if(_0x82e7f8==='dead\x20enemies')return $gameTroop[_0x285c18(0x7a8)]();else{if(_0x82e7f8[_0x285c18(0xb38)](/ENEMY INDEX (\d+)/i)){if(_0x285c18(0x85e)!==_0x285c18(0x85e))_0x5092d6[_0x285c18(0x6cf)][_0x285c18(0x918)]['call'](this);else{const _0x33db54=Number(RegExp['$1']);return[$gameTroop[_0x285c18(0x2e0)]()[_0x33db54]];}}else{if(_0x82e7f8[_0x285c18(0xb38)](/ENEMY ID (\d+)/i)){const _0x3c09ce=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x285c18(0x742)](_0x15c7b7=>_0x15c7b7[_0x285c18(0x6a0)]()===_0x3c09ce);}}}}}}if(_0x82e7f8===_0x285c18(0x8af))return _0x385947[_0x285c18(0x742)](_0x500761=>_0x500761[_0x285c18(0xa0e)]());else{if(_0x82e7f8===_0x285c18(0x155))return _0x385947[_0x285c18(0x742)](_0x30d554=>_0x30d554[_0x285c18(0xa0e)]()&&_0x30d554!==_0x22635e);else{if(_0x82e7f8===_0x285c18(0x657))return _0x385947['filter'](_0x5938dd=>_0x5938dd[_0x285c18(0xa0e)]()&&_0x5938dd!==_0x1aaa08);else{if(_0x82e7f8===_0x285c18(0xa9b)){if(_0x285c18(0x3a8)===_0x285c18(0x3a8))return _0x385947['filter'](_0x5d8d6e=>_0x5d8d6e[_0x285c18(0x88a)]());else _0xc0d6d[_0x285c18(0x1f3)][_0x285c18(0x39c)][_0x285c18(0x6a3)](this);}}}}return[];},VisuMZ[_0x397c95(0x555)]=function(){const _0x9aedea=_0x397c95;return BattleManager[_0x9aedea(0x227)];},VisuMZ[_0x397c95(0xa6f)]=function(_0x350e5f){const _0x1c66dd=_0x397c95;return BattleManager[_0x1c66dd(0x227)];},PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xbdb),_0x106d65=>{const _0x2bcf18=_0x397c95;if(!SceneManager[_0x2bcf18(0x650)]())return;VisuMZ[_0x2bcf18(0x5ff)](_0x106d65,_0x106d65);const _0x108bb4=$gameTemp[_0x2bcf18(0xaeb)](),_0x22feb2=BattleManager[_0x2bcf18(0x183)],_0x53d1f7=BattleManager[_0x2bcf18(0x127)],_0x225bb2=BattleManager[_0x2bcf18(0xc3d)]?BattleManager[_0x2bcf18(0xc3d)]['slice'](0x0):[],_0x215b82=BattleManager[_0x2bcf18(0x598)];if(!_0x108bb4||!_0x22feb2||!_0x53d1f7)return;if(!_0x22feb2[_0x2bcf18(0x398)]())return;if(_0x106d65['DisplayAction'])_0x215b82[_0x2bcf18(0x3eb)](_0x53d1f7,_0x22feb2[_0x2bcf18(0x398)]());if(_0x106d65['ApplyImmortal']){if(_0x2bcf18(0x957)!==_0x2bcf18(0x584))_0x215b82[_0x2bcf18(0x4da)]('applyImmortal',_0x53d1f7,_0x225bb2,!![]);else{if(!_0x5642ca[_0x2bcf18(0x6fe)])return;if(!_0xf7969f[_0x2bcf18(0x6fe)][_0x2bcf18(0x69b)])return;if(!_0x345bda[_0x2bcf18(0x301)])return;_0x1902e3[_0x2bcf18(0x5ff)](_0x1085d4,_0x471705);const _0x2ca0a5=_0x419ba5[_0x2bcf18(0xaeb)](),_0x166a09=_0xa48f3[_0x2bcf18(0x403)](_0x198702[_0x2bcf18(0x30d)]),_0xead870=_0x424ca7['round'](_0x424880[_0x2bcf18(0x409)]);_0x289318['requestPointAnimation'](_0x166a09,_0xead870,_0x8314e5[_0x2bcf18(0x7a3)],_0x52d0fc[_0x2bcf18(0x972)],_0x3ed9e7[_0x2bcf18(0xcb0)]),_0x58ead8[_0x2bcf18(0x167)]&&_0x2ca0a5&&(_0x3b159e[_0x2bcf18(0x6fe)][_0x2bcf18(0x69b)]['updatePointAnimations'](),_0x2ca0a5[_0x2bcf18(0x2b3)](_0x2bcf18(0x5ca)));}}if(_0x106d65[_0x2bcf18(0x83c)])_0x215b82[_0x2bcf18(0x4da)]('performActionStart',_0x53d1f7,_0x22feb2);if(_0x106d65['WaitForMovement'])_0x215b82[_0x2bcf18(0x4da)](_0x2bcf18(0xb09));if(_0x106d65[_0x2bcf18(0x39b)])_0x215b82[_0x2bcf18(0x4da)](_0x2bcf18(0xbcc),_0x53d1f7,_0x22feb2);if(_0x106d65[_0x2bcf18(0x1f1)])_0x215b82[_0x2bcf18(0x4da)](_0x2bcf18(0xcdc));_0x108bb4[_0x2bcf18(0x2b3)]('battlelog');}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x19b),_0xd0c409=>{const _0x4e1303=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4e1303(0x5ff)](_0xd0c409,_0xd0c409);const _0x3ee424=$gameTemp[_0x4e1303(0xaeb)](),_0x2721ff=BattleManager['_action'],_0x5a3123=BattleManager['_subject'],_0x1a03e6=BattleManager[_0x4e1303(0xc3d)]?BattleManager[_0x4e1303(0xc3d)]['slice'](0x0):[],_0x5e593c=BattleManager[_0x4e1303(0x598)],_0xd04453=_0xd0c409['DualWield']??![];if(!_0x3ee424||!_0x2721ff||!_0x5a3123)return;if(!_0x2721ff[_0x4e1303(0x398)]())return;let _0x360194=_0xd04453?_0x5e593c[_0x4e1303(0x396)](_0x5a3123):0x1;for(let _0x3f065c=0x0;_0x3f065c<_0x360194;_0x3f065c++){if(_0x4e1303(0x4e0)!=='fYiWv')_0x17b2af[_0x4e1303(0x4da)](new _0x3bcfc2(_0x269a38));else{_0xd04453&&_0x5a3123['isActor']()&&_0x5e593c[_0x4e1303(0x4da)](_0x4e1303(0xb5e),_0x5a3123,_0x3f065c);if(_0xd0c409[_0x4e1303(0x645)])_0x5e593c['push'](_0x4e1303(0xbee),_0x5a3123,_0x2721ff);if(_0xd0c409[_0x4e1303(0x7d1)]>0x0)_0x5e593c[_0x4e1303(0x4da)](_0x4e1303(0xbcd),_0xd0c409[_0x4e1303(0x7d1)]);if(_0xd0c409[_0x4e1303(0x9b6)])_0x5e593c['push'](_0x4e1303(0xc7d),_0x5a3123,_0x1a03e6,_0x2721ff[_0x4e1303(0x398)]()[_0x4e1303(0x72d)]);if(_0xd0c409[_0x4e1303(0x1f1)])_0x5e593c['push'](_0x4e1303(0xcdc));for(const _0x4012a3 of _0x1a03e6){if(!_0x4012a3)continue;if(_0xd0c409[_0x4e1303(0xaa4)])_0x5e593c[_0x4e1303(0x4da)](_0x4e1303(0x973),_0x5a3123,_0x4012a3);}}}_0xd04453&&_0x5a3123[_0x4e1303(0x850)]()&&_0x5e593c[_0x4e1303(0x4da)](_0x4e1303(0x1c5),_0x5a3123);if(_0xd0c409['ApplyImmortal'])_0x5e593c[_0x4e1303(0x4da)](_0x4e1303(0xbba),_0x5a3123,_0x1a03e6,![]);_0x3ee424[_0x4e1303(0x2b3)]('battlelog');}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x7a7),_0x5b6a15=>{const _0x5660ed=_0x397c95;if(!SceneManager[_0x5660ed(0x650)]())return;VisuMZ[_0x5660ed(0x5ff)](_0x5b6a15,_0x5b6a15);const _0x305256=$gameTemp[_0x5660ed(0xaeb)](),_0x50dee9=BattleManager[_0x5660ed(0x183)],_0x54e4b2=BattleManager[_0x5660ed(0x127)],_0x279c1b=BattleManager[_0x5660ed(0xc3d)]?BattleManager[_0x5660ed(0xc3d)]['slice'](0x0):[],_0x362868=BattleManager['_logWindow'],_0x3114f2=_0x5b6a15['DualWield']??![];if(!_0x305256||!_0x50dee9||!_0x54e4b2)return;if(!_0x50dee9[_0x5660ed(0x398)]())return;let _0x25fc38=_0x3114f2?_0x362868[_0x5660ed(0x396)](_0x54e4b2):0x1;for(let _0x41248d=0x0;_0x41248d<_0x25fc38;_0x41248d++){for(const _0x17d6e9 of _0x279c1b){if(!_0x17d6e9)continue;_0x3114f2&&_0x54e4b2[_0x5660ed(0x850)]()&&(_0x5660ed(0xb0c)===_0x5660ed(0xbc1)?(_0x4dad17['_lastHpDamage']=_0x47d7ed[_0x5660ed(0x3f6)]()[_0x5660ed(0xc06)],this[_0x5660ed(0x4da)](_0x5660ed(0x488),_0x2250a0)):_0x362868['push'](_0x5660ed(0xb5e),_0x54e4b2,_0x41248d));if(_0x5b6a15['PerformAction'])_0x362868[_0x5660ed(0x4da)](_0x5660ed(0xbee),_0x54e4b2,_0x50dee9);if(_0x5b6a15['WaitCount1']>0x0)_0x362868[_0x5660ed(0x4da)]('waitCount',_0x5b6a15[_0x5660ed(0x6cd)]);if(_0x5b6a15[_0x5660ed(0x9b6)])_0x362868[_0x5660ed(0x4da)](_0x5660ed(0xc7d),_0x54e4b2,[_0x17d6e9],_0x50dee9['item']()[_0x5660ed(0x72d)]);if(_0x5b6a15[_0x5660ed(0x389)]>0x0)_0x362868[_0x5660ed(0x4da)](_0x5660ed(0xbcd),_0x5b6a15[_0x5660ed(0x389)]);if(_0x5b6a15[_0x5660ed(0xaa4)])_0x362868[_0x5660ed(0x4da)](_0x5660ed(0x973),_0x54e4b2,_0x17d6e9);}}_0x3114f2&&_0x54e4b2[_0x5660ed(0x850)]()&&(_0x5660ed(0xaf7)!==_0x5660ed(0x25a)?_0x362868['push'](_0x5660ed(0x1c5),_0x54e4b2):this[_0x5660ed(0x775)]());if(_0x5b6a15[_0x5660ed(0x441)])_0x362868['push'](_0x5660ed(0xbba),_0x54e4b2,_0x279c1b,![]);_0x305256[_0x5660ed(0x2b3)](_0x5660ed(0x2a5));}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0x159),_0x25ac77=>{const _0x1c5fc7=_0x397c95;if(!SceneManager[_0x1c5fc7(0x650)]())return;VisuMZ[_0x1c5fc7(0x5ff)](_0x25ac77,_0x25ac77);const _0x3ca6a2=$gameTemp[_0x1c5fc7(0xaeb)](),_0x1b412c=BattleManager[_0x1c5fc7(0x183)],_0x753bf8=BattleManager[_0x1c5fc7(0x127)],_0x5a92c3=BattleManager[_0x1c5fc7(0xc3d)]?BattleManager[_0x1c5fc7(0xc3d)][_0x1c5fc7(0x468)](0x0):[],_0x123d62=BattleManager[_0x1c5fc7(0x598)];if(!_0x3ca6a2||!_0x1b412c||!_0x753bf8)return;if(!_0x1b412c[_0x1c5fc7(0x398)]())return;if(_0x25ac77[_0x1c5fc7(0x441)])_0x123d62[_0x1c5fc7(0x4da)](_0x1c5fc7(0xbba),_0x753bf8,_0x5a92c3,![]);if(_0x25ac77['WaitForNewLine'])_0x123d62[_0x1c5fc7(0x4da)](_0x1c5fc7(0x988));if(_0x25ac77[_0x1c5fc7(0x7da)])_0x123d62[_0x1c5fc7(0x4da)](_0x1c5fc7(0x857));if(_0x25ac77[_0x1c5fc7(0x943)])_0x123d62[_0x1c5fc7(0x4da)](_0x1c5fc7(0x15f));if(_0x25ac77[_0x1c5fc7(0x1f4)])_0x123d62[_0x1c5fc7(0x4da)]('performActionEnd',_0x753bf8);if(_0x25ac77[_0x1c5fc7(0x9cf)])_0x123d62['push'](_0x1c5fc7(0xb09));_0x3ca6a2[_0x1c5fc7(0x2b3)]('battlelog');}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x82c),_0x1b29a1=>{const _0x1e5449=_0x397c95;if(!SceneManager[_0x1e5449(0x650)]())return;if(!Imported[_0x1e5449(0x35e)])return;VisuMZ[_0x1e5449(0x5ff)](_0x1b29a1,_0x1b29a1);const _0x574812=$gameTemp['getLastPluginCommandInterpreter'](),_0x3c2aff=_0x1b29a1['WaitForAngle'];if(!_0x574812)return;$gameScreen['setBattleAngle'](_0x1b29a1['Angle'],_0x1b29a1['Duration'],_0x1b29a1[_0x1e5449(0x729)]);if(_0x3c2aff)_0x574812['setWaitMode'](_0x1e5449(0xb84));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],'ActSeq_Angle_Reset',_0x2cdd76=>{const _0x322a68=_0x397c95;if(!SceneManager[_0x322a68(0x650)]())return;if(!Imported[_0x322a68(0x35e)])return;VisuMZ[_0x322a68(0x5ff)](_0x2cdd76,_0x2cdd76);const _0x3a563c=$gameTemp[_0x322a68(0xaeb)](),_0x142780=_0x2cdd76[_0x322a68(0xc1c)];if(!_0x3a563c)return;$gameScreen[_0x322a68(0x459)](0x0,_0x2cdd76[_0x322a68(0xafa)],_0x2cdd76[_0x322a68(0x729)]);if(_0x142780)_0x3a563c['setWaitMode'](_0x322a68(0xb84));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],'ActSeq_Angle_WaitForAngle',_0x4620ad=>{const _0x5a2329=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5a2329(0x35e)])return;const _0xfd4df9=$gameTemp[_0x5a2329(0xaeb)]();if(!_0xfd4df9)return;_0xfd4df9[_0x5a2329(0x2b3)](_0x5a2329(0xb84));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x27c),_0x42d173=>{const _0x2e3f21=_0x397c95;if(!SceneManager[_0x2e3f21(0x650)]())return;VisuMZ[_0x2e3f21(0x5ff)](_0x42d173,_0x42d173);const _0x2e76e0=$gameTemp['getLastPluginCommandInterpreter'](),_0x12ae82=BattleManager[_0x2e3f21(0x183)],_0x4c777e=BattleManager[_0x2e3f21(0x127)],_0x32912b=VisuMZ[_0x2e3f21(0x32b)](_0x42d173[_0x2e3f21(0x3b9)]),_0x64fd01=_0x42d173[_0x2e3f21(0x972)],_0x3dd834=BattleManager[_0x2e3f21(0x598)];if(!_0x2e76e0||!_0x12ae82||!_0x4c777e)return;if(!_0x12ae82[_0x2e3f21(0x398)]())return;let _0x38138d=_0x12ae82[_0x2e3f21(0x398)]()[_0x2e3f21(0x72d)];if(_0x38138d<0x0)_0x38138d=_0x4c777e[_0x2e3f21(0x336)]();$gameTemp[_0x2e3f21(0xad9)](_0x32912b,_0x38138d,_0x64fd01),_0x42d173[_0x2e3f21(0x1f1)]&&_0x2e76e0[_0x2e3f21(0x2b3)](_0x2e3f21(0x5ca));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xbd7),_0x552ac3=>{const _0x4d4ae1=_0x397c95;if(!SceneManager[_0x4d4ae1(0x650)]())return;VisuMZ[_0x4d4ae1(0x5ff)](_0x552ac3,_0x552ac3);const _0xb0f40f=$gameTemp['getLastPluginCommandInterpreter'](),_0x581a10=BattleManager[_0x4d4ae1(0x127)],_0x137157=VisuMZ['CreateActionSequenceTargets'](_0x552ac3[_0x4d4ae1(0x3b9)]),_0x56fa77=_0x552ac3[_0x4d4ae1(0x972)],_0x6b122c=BattleManager[_0x4d4ae1(0x598)];if(!_0xb0f40f||!_0x581a10)return;const _0x36e423=_0x581a10[_0x4d4ae1(0x336)]();$gameTemp[_0x4d4ae1(0xad9)](_0x137157,_0x36e423,_0x56fa77),_0x552ac3[_0x4d4ae1(0x1f1)]&&_0xb0f40f[_0x4d4ae1(0x2b3)]('battleAnimation');}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Animation_AttackAnimation2',_0x1d6075=>{const _0x5ca134=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5ca134(0x5ff)](_0x1d6075,_0x1d6075);const _0x4a935d=_0x50f75e['attackAnimationIdSlot'](_0x1d6075[_0x5ca134(0x8ab)]);if(_0x4a935d<=0x0)return;const _0x159a80=$gameTemp[_0x5ca134(0xaeb)](),_0x50f75e=BattleManager[_0x5ca134(0x127)],_0x3c5440=VisuMZ[_0x5ca134(0x32b)](_0x1d6075[_0x5ca134(0x3b9)]),_0x50af3d=_0x1d6075[_0x5ca134(0x972)],_0x471c6f=BattleManager[_0x5ca134(0x598)];if(!_0x159a80||!_0x50f75e)return;$gameTemp[_0x5ca134(0xad9)](_0x3c5440,_0x4a935d,_0x50af3d),_0x1d6075[_0x5ca134(0x1f1)]&&_0x159a80['setWaitMode'](_0x5ca134(0x5ca));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x2ee),_0x12f962=>{const _0x4bf017=_0x397c95;if(!SceneManager[_0x4bf017(0x650)]())return;VisuMZ[_0x4bf017(0x5ff)](_0x12f962,_0x12f962);const _0x157728=$gameTemp[_0x4bf017(0xaeb)](),_0xfc5eb3=BattleManager[_0x4bf017(0x183)],_0x3e5342=_0x12f962[_0x4bf017(0x972)],_0xc0aaf=VisuMZ['CreateActionSequenceTargets'](_0x12f962[_0x4bf017(0x3b9)]);if(!_0x157728||!_0xfc5eb3)return;if(!_0xfc5eb3[_0x4bf017(0x398)]())return;for(const _0x5fb101 of _0xc0aaf){if(!_0x5fb101)continue;_0x5fb101[_0x4bf017(0xbcc)](_0xfc5eb3,_0x3e5342);}if(_0x12f962[_0x4bf017(0x1f1)])_0x157728['setWaitMode']('battleAnimation');}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xcd9),_0x3dbefe=>{const _0x45ea1c=_0x397c95;VisuMZ[_0x45ea1c(0x5ff)](_0x3dbefe,_0x3dbefe);const _0x5a1e17=$gameTemp[_0x45ea1c(0xaeb)](),_0x4bdc41=VisuMZ[_0x45ea1c(0x32b)](_0x3dbefe[_0x45ea1c(0x3b9)]),_0x38e9a1=_0x3dbefe['Filename'];if(!_0x38e9a1)return;for(const _0x4cbbf9 of _0x4bdc41){if(_0x45ea1c(0x9a9)!==_0x45ea1c(0x9a9))_0x5e87ff['_deathStateApplied']=!![],this[_0x45ea1c(0x126)](_0xd107b0);else{if(!_0x4cbbf9)continue;if(!_0x4cbbf9[_0x45ea1c(0x850)]())continue;_0x4cbbf9[_0x45ea1c(0x8fd)](_0x38e9a1);}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xc89),_0x208cda=>{const _0x3fc15d=_0x397c95;if(!SceneManager[_0x3fc15d(0x6fe)])return;if(!SceneManager[_0x3fc15d(0x6fe)]['_spriteset'])return;if(!Imported[_0x3fc15d(0x301)])return;VisuMZ['ConvertParams'](_0x208cda,_0x208cda);const _0x28be54=$gameTemp[_0x3fc15d(0xaeb)](),_0x4114d4=Math['round'](_0x208cda[_0x3fc15d(0x30d)]),_0x17dfda=Math[_0x3fc15d(0x403)](_0x208cda[_0x3fc15d(0x409)]);$gameTemp[_0x3fc15d(0x503)](_0x4114d4,_0x17dfda,_0x208cda[_0x3fc15d(0x7a3)],_0x208cda[_0x3fc15d(0x972)],_0x208cda[_0x3fc15d(0xcb0)]);if(_0x208cda[_0x3fc15d(0x167)]&&_0x28be54){if(_0x3fc15d(0x1da)!==_0x3fc15d(0x315))SceneManager[_0x3fc15d(0x6fe)][_0x3fc15d(0x69b)][_0x3fc15d(0xd13)](),_0x28be54[_0x3fc15d(0x2b3)](_0x3fc15d(0x5ca));else{_0xb86a1[_0x3fc15d(0x1f3)][_0x3fc15d(0x1bb)][_0x3fc15d(0x6a3)](this,_0x450418),this[_0x3fc15d(0x262)](),this[_0x3fc15d(0xb3a)]();const _0x3fbe42=this[_0x3fc15d(0x7eb)]();_0x3fbe42&&(_0x3fbe42['_battlerName']=_0x37f327,_0x3fbe42['setBattler'](this));}}}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xcff),_0x51f4a9=>{const _0x3c9514=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x51f4a9,_0x51f4a9);const _0x37d1eb=$gameTemp[_0x3c9514(0xaeb)](),_0x54d43f=VisuMZ[_0x3c9514(0x32b)](_0x51f4a9[_0x3c9514(0x3b9)]),_0x243bcb=_0x51f4a9[_0x3c9514(0x7a3)],_0x5ada28=_0x51f4a9[_0x3c9514(0x972)];if(!_0x37d1eb)return;$gameTemp['requestAnimation'](_0x54d43f,_0x243bcb,_0x5ada28);if(_0x51f4a9[_0x3c9514(0x1f1)])_0x37d1eb[_0x3c9514(0x2b3)](_0x3c9514(0x5ca));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xbec),_0x3f6f92=>{const _0x2d10d3=_0x397c95;if(!SceneManager[_0x2d10d3(0x650)]())return;const _0x4c0656=$gameTemp[_0x2d10d3(0xaeb)]();if(!_0x4c0656)return;_0x4c0656[_0x2d10d3(0x2b3)](_0x2d10d3(0x5ca));}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x42d),_0x5c3069=>{const _0x1e5571=_0x397c95;if(!SceneManager[_0x1e5571(0x650)]())return;VisuMZ['ConvertParams'](_0x5c3069,_0x5c3069);const _0x4f3d08=BattleManager[_0x1e5571(0x598)],_0x5cb052=_0x5c3069[_0x1e5571(0xb8c)]&&Imported[_0x1e5571(0x89d)];_0x4f3d08['addText'](_0x5c3069[_0x1e5571(0xc05)]),_0x5cb052&&Imported[_0x1e5571(0x89d)]&&(_0x1e5571(0x443)!==_0x1e5571(0x12a)?$gameSystem[_0x1e5571(0xb62)](_0x5c3069[_0x1e5571(0xc05)]||'',_0x5c3069[_0x1e5571(0x60f)]||0x0):this[_0x1e5571(0x19f)]()?delete _0x54a6b3['_handlers'][_0x1e5571(0x5e9)]:_0x9debd3[_0x1e5571(0x7d0)]('cancel',this['actorCommandCancelTPB']['bind'](this)));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x9a7),_0x3cc7f9=>{const _0x449246=_0x397c95;if(!SceneManager['isSceneBattle']())return;const _0x15940d=BattleManager[_0x449246(0x598)];_0x15940d['clear']();}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xaae),_0x42bbe8=>{const _0x519629=_0x397c95;if(!SceneManager[_0x519629(0x650)]())return;const _0x3b91b5=$gameTemp[_0x519629(0xaeb)](),_0x7eade2=BattleManager[_0x519629(0x183)],_0x565f30=BattleManager[_0x519629(0x127)],_0x14cef1=BattleManager[_0x519629(0x598)];if(!_0x3b91b5||!_0x7eade2||!_0x565f30)return;if(!_0x7eade2[_0x519629(0x398)]())return;_0x14cef1['displayAction'](_0x565f30,_0x7eade2['item']()),_0x3b91b5[_0x519629(0x2b3)](_0x519629(0x2a5));}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x332),_0x5fd075=>{const _0x506f3f=_0x397c95;if(!SceneManager['isSceneBattle']())return;const _0x23175e=BattleManager['_logWindow'];_0x23175e[_0x506f3f(0x3e5)]();}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x6ab),_0x566d8e=>{const _0x55a653=_0x397c95;if(!SceneManager[_0x55a653(0x650)]())return;const _0x3fb4f2=BattleManager[_0x55a653(0x598)];_0x3fb4f2[_0x55a653(0x293)]();}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x929),_0x2ecc66=>{const _0x662953=_0x397c95;if(!SceneManager[_0x662953(0x650)]())return;const _0x11b8d8=BattleManager[_0x662953(0x598)];_0x11b8d8[_0x662953(0x2ed)]();}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x525),_0x46f113=>{const _0x18f3d2=_0x397c95;if(!SceneManager[_0x18f3d2(0x650)]())return;VisuMZ[_0x18f3d2(0x5ff)](_0x46f113,_0x46f113),SceneManager['_scene'][_0x18f3d2(0x2fc)](_0x46f113['ShowHide']);}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x916),_0x30f7de=>{const _0x329cd2=_0x397c95;if(!SceneManager[_0x329cd2(0x650)]())return;const _0x18768d=$gameTemp[_0x329cd2(0xaeb)]();_0x18768d['setWaitMode'](_0x329cd2(0x2a5));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xc22),_0x38b777=>{const _0x21e4f5=_0x397c95;if(!SceneManager[_0x21e4f5(0x650)]())return;const _0x4a6ab3=$gameTemp[_0x21e4f5(0xaeb)](),_0x20f6ef=BattleManager[_0x21e4f5(0x598)];_0x20f6ef[_0x21e4f5(0x988)](),_0x4a6ab3['setWaitMode'](_0x21e4f5(0x2a5));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Camera_Clamp',_0x594f6b=>{const _0x303392=_0x397c95;if(!SceneManager[_0x303392(0x650)]())return;if(!Imported[_0x303392(0x35e)])return;VisuMZ[_0x303392(0x5ff)](_0x594f6b,_0x594f6b);const _0x589b12=$gameScreen[_0x303392(0x74c)]();_0x589b12[_0x303392(0x561)]=_0x594f6b[_0x303392(0x18e)];}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Camera_FocusPoint',_0x4c433a=>{const _0x1ccd8b=_0x397c95;if(!SceneManager[_0x1ccd8b(0x650)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1ccd8b(0x5ff)](_0x4c433a,_0x4c433a);const _0x155aeb=$gameTemp[_0x1ccd8b(0xaeb)](),_0x5443c0=_0x4c433a['WaitForCamera'];$gameScreen[_0x1ccd8b(0xcb3)](_0x4c433a[_0x1ccd8b(0xcae)],_0x4c433a['FocusY'],_0x4c433a[_0x1ccd8b(0xafa)],_0x4c433a[_0x1ccd8b(0x729)]);if(_0x5443c0)_0x155aeb['setWaitMode'](_0x1ccd8b(0x907));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x952),_0x5a1714=>{const _0x1f6f2e=_0x397c95;if(!SceneManager[_0x1f6f2e(0x650)]())return;if(!Imported[_0x1f6f2e(0x35e)])return;VisuMZ[_0x1f6f2e(0x5ff)](_0x5a1714,_0x5a1714);const _0xb93196=$gameTemp[_0x1f6f2e(0xaeb)](),_0x216bd7=VisuMZ[_0x1f6f2e(0x32b)](_0x5a1714[_0x1f6f2e(0x3b9)]),_0x413be9=_0x5a1714['WaitForCamera'];$gameScreen[_0x1f6f2e(0xbdc)](_0x216bd7,_0x5a1714[_0x1f6f2e(0xafa)],_0x5a1714[_0x1f6f2e(0x729)]);if(_0x413be9)_0xb93196[_0x1f6f2e(0x2b3)](_0x1f6f2e(0x907));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x56a),_0x5ab374=>{const _0x594f20=_0x397c95;if(!SceneManager[_0x594f20(0x650)]())return;if(!Imported[_0x594f20(0x35e)])return;VisuMZ[_0x594f20(0x5ff)](_0x5ab374,_0x5ab374);const _0x4a6a1d=$gameTemp[_0x594f20(0xaeb)](),_0x294cba=_0x5ab374['WaitForCamera'];$gameScreen[_0x594f20(0x1ab)](_0x5ab374[_0x594f20(0x5c1)],_0x5ab374[_0x594f20(0xd03)],_0x5ab374[_0x594f20(0xafa)],_0x5ab374[_0x594f20(0x729)]);if(_0x294cba)_0x4a6a1d[_0x594f20(0x2b3)]('battleCamera');}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Camera_Reset',_0x212279=>{const _0x2a98d9=_0x397c95;if(!SceneManager[_0x2a98d9(0x650)]())return;if(!Imported[_0x2a98d9(0x35e)])return;VisuMZ['ConvertParams'](_0x212279,_0x212279);const _0xea6c91=$gameTemp['getLastPluginCommandInterpreter'](),_0x15ce37=_0x212279[_0x2a98d9(0x981)],_0x1ca2a4=_0x212279[_0x2a98d9(0x243)],_0xdcf2cb=_0x212279[_0x2a98d9(0xba2)];if(_0x15ce37){const _0x3a532b=Math[_0x2a98d9(0x403)](Graphics['width']/0x2),_0x2ccc54=Math[_0x2a98d9(0x403)](Graphics[_0x2a98d9(0x9b1)]/0x2);$gameScreen[_0x2a98d9(0xcb3)](_0x3a532b,_0x2ccc54,_0x212279[_0x2a98d9(0xafa)],_0x212279['EasingType']);}_0x1ca2a4&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x212279[_0x2a98d9(0xafa)],_0x212279['EasingType']);if(_0xdcf2cb)_0xea6c91['setWaitMode'](_0x2a98d9(0x907));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Camera_WaitForCamera',_0x3e7632=>{const _0x5ded0e=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5ded0e(0x35e)])return;const _0x5d184f=$gameTemp[_0x5ded0e(0xaeb)]();if(!_0x5d184f)return;_0x5d184f[_0x5ded0e(0x2b3)](_0x5ded0e(0x907));}),VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x14a)]=function(_0x2b7587){const _0x30ee99=_0x397c95;_0x2b7587[_0x30ee99(0x98c)]='';const _0x24f0a6=VisuMZ[_0x30ee99(0x4db)]['CreateCutinSettings'](_0x2b7587),_0x83d927=VisuMZ[_0x30ee99(0x32b)](_0x2b7587[_0x30ee99(0x3b9)])[0x0]||null;return _0x83d927&&(_0x24f0a6[_0x30ee99(0x98c)]=_0x83d927[_0x30ee99(0x9a6)](),_0x24f0a6[_0x30ee99(0x40c)]=_0x83d927[_0x30ee99(0xb17)](),_0x24f0a6[_0x30ee99(0x979)]=_0x83d927['visualCutinPortraitHue'](),_0x24f0a6['portraitType']=_0x83d927['visualCutinPortraitType'](),_0x83d927['isEnemy']()&&(_0x83d927[_0x30ee99(0x706)]()&&(_0x24f0a6['portraitFlipHorz']=!_0x24f0a6['portraitFlipHorz']),_0x83d927[_0x30ee99(0x16b)]()&&('IPEoL'==='gJTOb'?(_0x471c1e+=_0x4f94d8['Actor'][_0x30ee99(0x5c1)]||0x0,_0x19f440+=_0x149136[_0x30ee99(0xc24)]['OffsetY']||0x0):_0x24f0a6[_0x30ee99(0x133)]=!_0x24f0a6[_0x30ee99(0x133)]),_0x24f0a6[_0x30ee99(0x131)]===_0x30ee99(0xc60)&&(_0x24f0a6[_0x30ee99(0x761)]=!_0x24f0a6[_0x30ee99(0x761)]),_0x2b7587['ExtraSettings']['parallaxScrollXinvertEnemy']&&(_0x24f0a6['parallaxScrollX']*=-0x1),_0x2b7587['ExtraSettings'][_0x30ee99(0x12b)]&&(_0x24f0a6['parallaxScrollY']*=-0x1),_0x24f0a6[_0x30ee99(0x450)]+=_0x2b7587[_0x30ee99(0x98a)][_0x30ee99(0x3c6)]??0x0)),_0x24f0a6;},PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x493),_0x3a332c=>{const _0x296e95=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x296e95(0x55d)])return;VisuMZ[_0x296e95(0x5ff)](_0x3a332c,_0x3a332c);const _0x4186c1=VisuMZ[_0x296e95(0x1f3)][_0x296e95(0x14a)](_0x3a332c);SceneManager[_0x296e95(0x6fe)]['startVisualCutin'](_0x4186c1);const _0x22df98=$gameTemp[_0x296e95(0xaeb)]();_0x22df98&&_0x3a332c[_0x296e95(0xc8d)]&&_0x22df98[_0x296e95(0x2b3)]('cutinEnter');}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x6f6),_0x71a470=>{const _0x372326=_0x397c95;if(!SceneManager[_0x372326(0x650)]())return;if(!Imported[_0x372326(0x55d)])return;VisuMZ['ConvertParams'](_0x71a470,_0x71a470),SceneManager[_0x372326(0x6fe)][_0x372326(0xb81)]();const _0x2400e8=$gameTemp[_0x372326(0xaeb)]();_0x2400e8&&_0x71a470['WaitForExit']&&(_0x372326(0x833)===_0x372326(0x833)?_0x2400e8[_0x372326(0x2b3)]('cutinExit'):(this[_0x372326(0x15e)]=0x0,this[_0x372326(0x522)]=0x0));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x550),_0x580b40=>{const _0x385fee=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x385fee(0x55d)])return;VisuMZ[_0x385fee(0x5ff)](_0x580b40,_0x580b40);const _0x3b5b4c=_0x580b40[_0x385fee(0xbaa)]['toLowerCase']()['trim']();SceneManager[_0x385fee(0x6fe)][_0x385fee(0xbb4)](_0x3b5b4c);const _0x50badd=$gameTemp['getLastPluginCommandInterpreter']();_0x50badd&&_0x580b40['WaitForExit']&&_0x50badd[_0x385fee(0x2b3)](_0x385fee(0x7f7));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Cutin_WaitForEntrance',_0x202916=>{const _0x5b8d0f=_0x397c95;if(!SceneManager[_0x5b8d0f(0x650)]())return;if(!Imported[_0x5b8d0f(0x55d)])return;const _0x943735=$gameTemp[_0x5b8d0f(0xaeb)]();_0x943735[_0x5b8d0f(0x2b3)]('cutinEnter');}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x1af),_0x4a1cc1=>{const _0x35fd73=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x3d2ef2=$gameTemp[_0x35fd73(0xaeb)]();_0x3d2ef2[_0x35fd73(0x2b3)](_0x35fd73(0x7f7));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x34a),_0x5289a2=>{const _0x58e900=_0x397c95;if(!SceneManager[_0x58e900(0x650)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x58e900(0x5ff)](_0x5289a2,_0x5289a2);const _0x372c40=VisuMZ['CreateActionSequenceTargets'](_0x5289a2[_0x58e900(0x3b9)]),_0x52a552=_0x5289a2['MotionAni'][_0x58e900(0x9a2)]()[_0x58e900(0xb34)]();for(const _0x41119b of _0x372c40){if(!_0x41119b)continue;_0x41119b[_0x58e900(0xbe1)](_0x52a552);}}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x351),_0x819ebc=>{const _0x1519a3=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1519a3(0x51f)])return;VisuMZ['ConvertParams'](_0x819ebc,_0x819ebc);const _0x7b085f=VisuMZ[_0x1519a3(0x32b)](_0x819ebc['Targets']),_0x2381f8=_0x819ebc[_0x1519a3(0x930)];for(const _0x887be0 of _0x7b085f){if(_0x1519a3(0x4d2)===_0x1519a3(0x4d2)){if(!_0x887be0)continue;_0x887be0[_0x1519a3(0x21f)]()[_0x1519a3(0xce5)]=_0x2381f8;}else this['_statusWindow']['show'](),this[_0x1519a3(0xba1)]['hide'](),this[_0x1519a3(0x1a1)]['activate']();}}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xac6),_0x36bc23=>{const _0x38d4eb=_0x397c95;if(!SceneManager[_0x38d4eb(0x650)]())return;if(!Imported[_0x38d4eb(0x846)])return;VisuMZ[_0x38d4eb(0x5ff)](_0x36bc23,_0x36bc23);const _0xa799be=BattleManager[_0x38d4eb(0x183)],_0xed21dd=_0x36bc23[_0x38d4eb(0xc83)];if(!_0xa799be)return;_0xa799be['_battleCoreAddedElements']=_0xed21dd;}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x4b0),_0x248a6b=>{const _0x1586ef=_0x397c95;if(!SceneManager[_0x1586ef(0x650)]())return;if(!Imported[_0x1586ef(0x846)])return;const _0x234bc5=BattleManager[_0x1586ef(0x183)];if(!_0x234bc5)return;_0x234bc5[_0x1586ef(0xd0f)]();}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xba5),_0x1eef91=>{const _0x2c0250=_0x397c95;if(!SceneManager[_0x2c0250(0x650)]())return;if(!Imported[_0x2c0250(0x846)])return;VisuMZ['ConvertParams'](_0x1eef91,_0x1eef91);const _0x459a01=BattleManager[_0x2c0250(0x183)],_0x5341af=_0x1eef91['Elements'];if(!_0x459a01)return;_0x459a01[_0x2c0250(0x616)]=_0x5341af;}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xaf1),_0x5d24b1=>{const _0x2f5ea9=_0x397c95;if(!SceneManager[_0x2f5ea9(0x650)]())return;if(!Imported[_0x2f5ea9(0x846)])return;const _0x1bd071=BattleManager['_action'];if(!_0x1bd071)return;_0x1bd071[_0x2f5ea9(0x513)]=!![];}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x233),_0x1279e4=>{const _0x9d8e5f=_0x397c95;if(!Imported[_0x9d8e5f(0x566)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1279e4,_0x1279e4);const _0x462a1d=VisuMZ[_0x9d8e5f(0x32b)](_0x1279e4['Targets']);for(const _0x2db38b of _0x462a1d){if(!_0x2db38b)continue;_0x2db38b['removeHorrorEffect'](_0x9d8e5f(0x240)),_0x2db38b[_0x9d8e5f(0x148)](_0x9d8e5f(0xab2)),_0x2db38b[_0x9d8e5f(0x148)]('tv'),_0x2db38b['clearHorrorEffects']();}$gamePlayer[_0x9d8e5f(0x2ed)]();}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x42a),_0x511ab5=>{const _0x36410e=_0x397c95;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x36410e(0x650)]())return;VisuMZ[_0x36410e(0x5ff)](_0x511ab5,_0x511ab5);const _0x18717b=VisuMZ['CreateActionSequenceTargets'](_0x511ab5[_0x36410e(0x3b9)]),_0xae386e=_0x36410e(0xab2);_0x511ab5['sliceMin']=Math[_0x36410e(0xcad)](_0x511ab5[_0x36410e(0x18c)]/0x2),_0x511ab5[_0x36410e(0x6b9)]=_0x511ab5['slices'],_0x511ab5['refreshRequest']=!![];for(const _0x1dc443 of _0x18717b){if(!_0x1dc443)continue;_0x1dc443[_0x36410e(0x880)](_0xae386e,_0x511ab5);}$gamePlayer[_0x36410e(0x2ed)]();}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x6da),_0x26ed48=>{const _0x4b901a=_0x397c95;if(!Imported[_0x4b901a(0x566)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4b901a(0x5ff)](_0x26ed48,_0x26ed48);const _0x5007a4=VisuMZ[_0x4b901a(0x32b)](_0x26ed48[_0x4b901a(0x3b9)]);for(const _0x423b06 of _0x5007a4){if(_0x4b901a(0x38e)===_0x4b901a(0xb71))this[_0x4b901a(0xc80)]();else{if(!_0x423b06)continue;_0x423b06['removeHorrorEffect']('glitch');}}$gamePlayer[_0x4b901a(0x2ed)]();}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x1d6),_0x1e1fa4=>{const _0x4b0d72=_0x397c95;if(!Imported[_0x4b0d72(0x566)])return;if(!SceneManager[_0x4b0d72(0x650)]())return;VisuMZ['ConvertParams'](_0x1e1fa4,_0x1e1fa4);const _0x45bcf4=VisuMZ[_0x4b0d72(0x32b)](_0x1e1fa4[_0x4b0d72(0x3b9)]),_0x191a46=_0x4b0d72(0x240);for(const _0x286a1f of _0x45bcf4){if(_0x4b0d72(0x1e0)===_0x4b0d72(0x1e0)){if(!_0x286a1f)continue;_0x286a1f['setHorrorEffectSettings'](_0x191a46,_0x1e1fa4);}else return 0x24;}$gamePlayer[_0x4b0d72(0x2ed)]();}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],'ActSeq_Horror_NoiseRemove',_0xc9962a=>{const _0x285c2a=_0x397c95;if(!Imported[_0x285c2a(0x566)])return;if(!SceneManager[_0x285c2a(0x650)]())return;VisuMZ[_0x285c2a(0x5ff)](_0xc9962a,_0xc9962a);const _0x582143=VisuMZ[_0x285c2a(0x32b)](_0xc9962a['Targets']);for(const _0x8d353c of _0x582143){if(!_0x8d353c)continue;_0x8d353c[_0x285c2a(0x148)](_0x285c2a(0x240));}$gamePlayer[_0x285c2a(0x2ed)]();}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x47f),_0x54a652=>{const _0x93f5fe=_0x397c95;if(!Imported[_0x93f5fe(0x566)])return;if(!SceneManager[_0x93f5fe(0x650)]())return;VisuMZ[_0x93f5fe(0x5ff)](_0x54a652,_0x54a652);const _0x3e5e8d=VisuMZ['CreateActionSequenceTargets'](_0x54a652[_0x93f5fe(0x3b9)]),_0x4916c3='tv';for(const _0x5d1d66 of _0x3e5e8d){if(!_0x5d1d66)continue;_0x5d1d66[_0x93f5fe(0x880)](_0x4916c3,_0x54a652);}$gamePlayer[_0x93f5fe(0x2ed)]();}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x519),_0x8797c8=>{const _0x133519=_0x397c95;if(!Imported[_0x133519(0x566)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x133519(0x5ff)](_0x8797c8,_0x8797c8);const _0x41c755=VisuMZ['CreateActionSequenceTargets'](_0x8797c8[_0x133519(0x3b9)]);for(const _0x38a2ae of _0x41c755){if(!_0x38a2ae)continue;_0x38a2ae['removeHorrorEffect']('tv');}$gamePlayer[_0x133519(0x2ed)]();}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0xa26),_0x1cd964=>{const _0x3592fc=_0x397c95;if(!Imported[_0x3592fc(0xd0e)])return;const _0x3548ed=SceneManager[_0x3592fc(0x6fe)][_0x3592fc(0x69b)];if(!_0x3548ed)return;if(VisuMZ[_0x3592fc(0x5dd)][_0x3592fc(0x708)]<=1.04){alert(_0x3592fc(0xc2a)),SceneManager[_0x3592fc(0x565)]();return;}VisuMZ[_0x3592fc(0x5ff)](_0x1cd964,_0x1cd964);const _0x26c686=_0x1cd964['Enable'];_0x3548ed[_0x3592fc(0x60a)](_0x26c686);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x97c),_0x21f457=>{const _0x10b336=_0x397c95;if(!SceneManager[_0x10b336(0x650)]())return;if(!Imported[_0x10b336(0xd0e)])return;const _0x5e329b=SceneManager['_scene']['_spriteset'];if(!_0x5e329b)return;VisuMZ[_0x10b336(0x5ff)](_0x21f457,_0x21f457);const _0x267321=_0x21f457['Intensity']||0x1,_0x34e9c0=_0x21f457[_0x10b336(0xafa)]||0x1,_0x2a4d66=_0x21f457[_0x10b336(0x729)]||_0x10b336(0xa76);_0x5e329b[_0x10b336(0x388)](_0x267321,_0x34e9c0,_0x2a4d66);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xa94),_0x26663e=>{const _0x288404=_0x397c95;if(!Imported[_0x288404(0xd0e)])return;const _0x3d265a=SceneManager['_scene'][_0x288404(0x69b)];if(!_0x3d265a)return;if(VisuMZ[_0x288404(0x5dd)]['version']<=1.04){if('oMcHT'!=='oMcHT')this['drawItemStyleIcon'](_0x18cb05);else{alert(_0x288404(0xc2a)),SceneManager[_0x288404(0x565)]();return;}}VisuMZ[_0x288404(0x5ff)](_0x26663e,_0x26663e);const _0x4d3297=_0x26663e[_0x288404(0xc5b)];_0x3d265a['setupDesaturateImpactFilter'](_0x4d3297);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Impact_MotionBlurScreen',_0x107729=>{const _0x4585e4=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1ef9dc=SceneManager['_scene'][_0x4585e4(0x69b)];if(!_0x1ef9dc)return;VisuMZ['ConvertParams'](_0x107729,_0x107729);const _0x17ce1b=Number(_0x107729[_0x4585e4(0x6f0)])||0x0,_0x4d8217=Number(_0x107729[_0x4585e4(0xb0b)]),_0x2bb181=_0x107729[_0x4585e4(0xafa)]||0x1,_0x1d1019=_0x107729[_0x4585e4(0x729)]||_0x4585e4(0xa76);_0x1ef9dc[_0x4585e4(0x81e)](_0x17ce1b,_0x4d8217,_0x2bb181,_0x1d1019);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xc55),_0x1e52ec=>{const _0x15938a=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x15938a(0xd0e)])return;const _0x3fa899=SceneManager['_scene']['_spriteset'];if(!_0x3fa899)return;VisuMZ[_0x15938a(0x5ff)](_0x1e52ec,_0x1e52ec);const _0x244adc=Number(_0x1e52ec[_0x15938a(0x6f0)])||0x0,_0x52b11a=Number(_0x1e52ec[_0x15938a(0xb0b)]),_0x109dad=_0x1e52ec['Duration']||0x1,_0x247ab1=_0x1e52ec['EasingType']||_0x15938a(0xa76),_0x2c0a1d=VisuMZ[_0x15938a(0x32b)](_0x1e52ec[_0x15938a(0x3b9)]);for(const _0x3391d3 of _0x2c0a1d){if(!_0x3391d3)continue;if(!_0x3391d3[_0x15938a(0x7eb)]())continue;_0x3391d3[_0x15938a(0x7eb)]()[_0x15938a(0x81e)](_0x244adc,_0x52b11a,_0x109dad,_0x247ab1);}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x9b5),_0x46aacd=>{const _0x29549a=_0x397c95;if(!SceneManager[_0x29549a(0x650)]())return;if(!Imported[_0x29549a(0xd0e)])return;VisuMZ[_0x29549a(0x5ff)](_0x46aacd,_0x46aacd);const _0x1ac8c6={'delay':_0x46aacd[_0x29549a(0x8c2)],'duration':_0x46aacd[_0x29549a(0x353)],'hue':_0x46aacd[_0x29549a(0x4be)],'opacityStart':_0x46aacd[_0x29549a(0x80c)],'tone':_0x46aacd[_0x29549a(0x81f)],'visible':!![]},_0x34727f=VisuMZ['CreateActionSequenceTargets'](_0x46aacd[_0x29549a(0x3b9)]);for(const _0x4b2c00 of _0x34727f){if(!_0x4b2c00)continue;_0x4b2c00['setBattlerMotionTrailData'](_0x1ac8c6);}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Impact_MotionTrailRemove',_0x5cab12=>{const _0x1fac0a=_0x397c95;if(!SceneManager[_0x1fac0a(0x650)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x1fac0a(0x5ff)](_0x5cab12,_0x5cab12);const _0x149584=VisuMZ[_0x1fac0a(0x32b)](_0x5cab12[_0x1fac0a(0x3b9)]);for(const _0x344451 of _0x149584){if(_0x1fac0a(0x50d)===_0x1fac0a(0x50d)){if(!_0x344451)continue;_0x344451[_0x1fac0a(0x231)]();}else this[_0x1fac0a(0x2c9)]+=0x10;}}),PluginManager[_0x397c95(0x14e)](pluginData['name'],'ActSeq_Impact_Negative',_0x2c517f=>{const _0x85a47a=_0x397c95;if(!Imported[_0x85a47a(0xd0e)])return;const _0x3293ab=SceneManager[_0x85a47a(0x6fe)]['_spriteset'];if(!_0x3293ab)return;if(VisuMZ[_0x85a47a(0x5dd)][_0x85a47a(0x708)]<=1.04){alert(_0x85a47a(0xc2a)),SceneManager[_0x85a47a(0x565)]();return;}VisuMZ[_0x85a47a(0x5ff)](_0x2c517f,_0x2c517f);const _0x36c148=_0x2c517f[_0x85a47a(0xc5b)];_0x3293ab['setupNegativeImpactFilter'](_0x36c148);}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xccf),_0x397f38=>{const _0x5ca807=_0x397c95;if(!Imported[_0x5ca807(0xd0e)])return;const _0x116a81=SceneManager[_0x5ca807(0x6fe)]['_spriteset'];if(!_0x116a81)return;if(VisuMZ[_0x5ca807(0x5dd)]['version']<=1.04){alert(_0x5ca807(0xc2a)),SceneManager[_0x5ca807(0x565)]();return;}VisuMZ[_0x5ca807(0x5ff)](_0x397f38,_0x397f38);const _0xb61730=_0x397f38[_0x5ca807(0xc5b)];_0x116a81[_0x5ca807(0xa47)](_0xb61730);}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x1e5),_0x340db7=>{const _0x1595c1=_0x397c95;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x37f5c7=SceneManager[_0x1595c1(0x6fe)][_0x1595c1(0x69b)];if(!_0x37f5c7)return;VisuMZ[_0x1595c1(0x5ff)](_0x340db7,_0x340db7);const _0x1cf2a1=_0x340db7['X']||0x0,_0x10d3a2=_0x340db7['Y']||0x0,_0x46bc3a=_0x340db7[_0x1595c1(0x2ab)]||0x0,_0x4d2799=_0x340db7[_0x1595c1(0xb16)]||0x0,_0x488dc0=_0x340db7['Duration']||0x1;_0x37f5c7[_0x1595c1(0xa4a)](_0x1cf2a1,_0x10d3a2,_0x46bc3a,_0x4d2799,_0x488dc0);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x5ae),_0x568bc5=>{const _0x4fad01=_0x397c95;if(!SceneManager[_0x4fad01(0x650)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4b5529=SceneManager[_0x4fad01(0x6fe)][_0x4fad01(0x69b)];if(!_0x4b5529)return;VisuMZ[_0x4fad01(0x5ff)](_0x568bc5,_0x568bc5);const _0x2481bd=VisuMZ[_0x4fad01(0x32b)](_0x568bc5[_0x4fad01(0x3b9)]),_0x156249=_0x568bc5[_0x4fad01(0x8ad)],_0x2ba584=_0x568bc5[_0x4fad01(0x5c1)]||0x0,_0x204d7f=_0x568bc5['OffsetY']||0x0,_0x2c5778=_0x568bc5[_0x4fad01(0x2ab)]||0x0,_0x34ccea=_0x568bc5[_0x4fad01(0xb16)]||0x0,_0x5451c0=_0x568bc5[_0x4fad01(0xafa)]||0x1;for(const _0x28e25e of _0x2481bd){if(_0x4fad01(0x3d3)===_0x4fad01(0x3d3)){if(!_0x28e25e)continue;if(!_0x28e25e[_0x4fad01(0x7eb)]())continue;const _0x4de75e=_0x28e25e[_0x4fad01(0x7eb)]();let _0x174621=_0x4de75e[_0x4fad01(0x4fd)],_0x10d07e=_0x4de75e[_0x4fad01(0x39a)];_0x174621+=(Graphics[_0x4fad01(0x76b)]-Graphics[_0x4fad01(0xb5d)])/0x2,_0x10d07e+=(Graphics[_0x4fad01(0x9b1)]-Graphics[_0x4fad01(0xa9e)])/0x2;if(_0x156249['match'](/front/i))_0x174621+=(_0x28e25e['isEnemy']()?0x1:-0x1)*_0x4de75e[_0x4fad01(0x559)]()/0x2;else _0x156249[_0x4fad01(0xb38)](/back/i)&&(_0x174621+=(_0x28e25e['isEnemy']()?-0x1:0x1)*_0x4de75e['mainSpriteWidth']()/0x2);if(_0x156249[_0x4fad01(0xb38)](/head/i)){if(_0x4fad01(0xa5e)!=='JrAvK')return!![];else _0x10d07e-=_0x4de75e[_0x4fad01(0xc37)]();}else _0x156249[_0x4fad01(0xb38)](/center/i)&&(_0x10d07e-=_0x4de75e[_0x4fad01(0xc37)]()/0x2);_0x174621+=_0x2ba584,_0x10d07e+=_0x204d7f,_0x4b5529[_0x4fad01(0xa4a)](_0x174621,_0x10d07e,_0x2c5778,_0x34ccea,_0x5451c0);}else _0x2a0a1a=_0x387782(_0xcb2679['$1']);}}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x237),_0x4e8ec3=>{const _0x552444=_0x397c95;if(!SceneManager[_0x552444(0x650)]())return;if(!Imported[_0x552444(0xd0e)])return;const _0x228316=SceneManager[_0x552444(0x6fe)][_0x552444(0x69b)];if(!_0x228316)return;VisuMZ[_0x552444(0x5ff)](_0x4e8ec3,_0x4e8ec3);const _0x2dba58=VisuMZ[_0x552444(0x32b)](_0x4e8ec3[_0x552444(0x3b9)]),_0x5a317b=_0x4e8ec3[_0x552444(0x8ad)],_0x2d59bb=_0x4e8ec3['OffsetX']||0x0,_0x504e87=_0x4e8ec3[_0x552444(0xd03)]||0x0,_0x55df68=_0x4e8ec3[_0x552444(0x2ab)]||0x0,_0x47d1ef=_0x4e8ec3[_0x552444(0xb16)]||0x0,_0x453077=_0x4e8ec3[_0x552444(0xafa)]||0x1,_0x2ceebd=Math[_0x552444(0x9d3)](..._0x2dba58[_0x552444(0xb9a)](_0x49df96=>_0x49df96[_0x552444(0x7eb)]()[_0x552444(0x4fd)]-_0x49df96[_0x552444(0x7eb)]()[_0x552444(0x559)]()/0x2)),_0x2a16a8=Math['max'](..._0x2dba58[_0x552444(0xb9a)](_0x4f24b4=>_0x4f24b4['battler']()[_0x552444(0x4fd)]+_0x4f24b4[_0x552444(0x7eb)]()[_0x552444(0x559)]()/0x2)),_0x112cdf=Math['min'](..._0x2dba58[_0x552444(0xb9a)](_0x181412=>_0x181412[_0x552444(0x7eb)]()['_baseY']-_0x181412[_0x552444(0x7eb)]()['mainSpriteHeight']())),_0x497e70=Math[_0x552444(0x483)](..._0x2dba58[_0x552444(0xb9a)](_0x5a6b27=>_0x5a6b27[_0x552444(0x7eb)]()[_0x552444(0x39a)])),_0x3d9ab8=_0x2dba58[_0x552444(0x742)](_0x4cc7da=>_0x4cc7da[_0x552444(0x850)]())[_0x552444(0x187)],_0x2940bd=_0x2dba58['filter'](_0x2436be=>_0x2436be[_0x552444(0x407)]())[_0x552444(0x187)];let _0x521364=0x0,_0x1d0899=0x0;if(_0x5a317b[_0x552444(0xb38)](/front/i))_0x521364=_0x3d9ab8>=_0x2940bd?_0x2ceebd:_0x2a16a8;else{if(_0x5a317b[_0x552444(0xb38)](/middle/i))_0x552444(0xca3)!==_0x552444(0x9e0)?(_0x521364=(_0x2ceebd+_0x2a16a8)/0x2,melee=-0x1):_0x3c7020+=_0x159ffd;else _0x5a317b['match'](/back/i)&&(_0x521364=_0x3d9ab8>=_0x2940bd?_0x2a16a8:_0x2ceebd);}if(_0x5a317b[_0x552444(0xb38)](/head/i)){if(_0x552444(0x7ac)!==_0x552444(0x7ac)){if(!_0x406ec4[_0x552444(0x650)]())return;if(!_0x56cc43[_0x552444(0x35e)])return;_0x238665[_0x552444(0x5ff)](_0x1137b5,_0x3c89c8);const _0x46df6f=_0x3fa743[_0x552444(0xaeb)](),_0x15da87=_0x3420de[_0x552444(0x1df)];if(!_0x46df6f)return;_0x86bf2b[_0x552444(0x253)](0x0,0x0,_0x2a290a[_0x552444(0xafa)],_0x43af4c['EasingType']);if(_0x15da87)_0x46df6f['setWaitMode']('battleSkew');}else _0x1d0899=_0x112cdf;}else{if(_0x5a317b[_0x552444(0xb38)](/center/i))_0x552444(0xcba)===_0x552444(0xb69)?_0x488056['command119']([_0x5428d1]):_0x1d0899=(_0x112cdf+_0x497e70)/0x2;else{if(_0x5a317b['match'](/base/i)){if(_0x552444(0x890)!==_0x552444(0x149))_0x1d0899=_0x497e70;else return _0x15806f[_0x552444(0x1f3)][_0x552444(0xae4)]['call'](this,_0x40f5bd);}}}_0x521364+=(Graphics[_0x552444(0x76b)]-Graphics['boxWidth'])/0x2,_0x1d0899+=(Graphics[_0x552444(0x9b1)]-Graphics[_0x552444(0xa9e)])/0x2,_0x521364+=_0x2d59bb,_0x1d0899+=_0x504e87,_0x228316[_0x552444(0xa4a)](_0x521364,_0x1d0899,_0x55df68,_0x47d1ef,_0x453077);}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0xcb5),_0x329d4c=>{const _0x28cc5e=_0x397c95;if(!Imported[_0x28cc5e(0xd0e)])return;const _0x355a49=SceneManager[_0x28cc5e(0x6fe)][_0x28cc5e(0x69b)];if(!_0x355a49)return;if(VisuMZ[_0x28cc5e(0x5dd)][_0x28cc5e(0x708)]<=1.04){alert(_0x28cc5e(0xc2a)),SceneManager[_0x28cc5e(0x565)]();return;}VisuMZ[_0x28cc5e(0x5ff)](_0x329d4c,_0x329d4c);const _0x278bd9=$gameTemp[_0x28cc5e(0xaeb)](),_0x48fe3f=Math[_0x28cc5e(0x483)](0.01,_0x329d4c[_0x28cc5e(0x908)]);$gameTemp['setBattleImpactTimeScale'](_0x48fe3f,_0x278bd9);}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0xaa6),_0x9641ff=>{const _0xdc2651=_0x397c95;if(!Imported[_0xdc2651(0xd0e)])return;const _0x499986=SceneManager['_scene']['_spriteset'];if(!_0x499986)return;if(VisuMZ[_0xdc2651(0x5dd)]['version']<=1.04){if('Svdwx'===_0xdc2651(0x7a4)){alert(_0xdc2651(0xc2a)),SceneManager['exit']();return;}else{if(!_0x597025['isSceneBattle']())return;if(!_0x59e1dd[_0xdc2651(0xd0e)])return;const _0x1b850f=_0x5ad236['_scene'][_0xdc2651(0x69b)];if(!_0x1b850f)return;_0x344247[_0xdc2651(0x5ff)](_0x14c066,_0x502614);const _0x314004=_0x2a9c45(_0xb1ae10['Angle'])||0x0,_0x30db0a=_0x4268d5(_0x2aea4a[_0xdc2651(0xb0b)]),_0x29b552=_0x4e86b9[_0xdc2651(0xafa)]||0x1,_0x1fd779=_0x3f3a3d[_0xdc2651(0x729)]||_0xdc2651(0xa76);_0x1b850f['setupMotionBlurImpactFilter'](_0x314004,_0x30db0a,_0x29b552,_0x1fd779);}}VisuMZ[_0xdc2651(0x5ff)](_0x9641ff,_0x9641ff);const _0x5d8816=$gameTemp[_0xdc2651(0xaeb)](),_0x58f53b=_0x9641ff['ms']||0x1;VisuMZ['ActSeqImpact'][_0xdc2651(0x427)](_0x58f53b,_0x5d8816);}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xa68),_0x237cc0=>{const _0x3cdd0a=_0x397c95;if(!Imported[_0x3cdd0a(0xd0e)])return;const _0xd46a47=SceneManager[_0x3cdd0a(0x6fe)][_0x3cdd0a(0x69b)];if(!_0xd46a47)return;VisuMZ['ConvertParams'](_0x237cc0,_0x237cc0);const _0x4f65e9=_0x237cc0['X']||0x0,_0x2f8416=_0x237cc0['Y']||0x0,_0x25c600=_0x237cc0['Strength']||0x0,_0x49b5f0=_0x237cc0[_0x3cdd0a(0x366)]||0x0,_0x137ea4=_0x237cc0[_0x3cdd0a(0xafa)]||0x1,_0x28d59a=_0x237cc0[_0x3cdd0a(0x729)]||_0x3cdd0a(0xa76);_0xd46a47[_0x3cdd0a(0x52e)](_0x25c600,_0x4f65e9,_0x2f8416,_0x49b5f0,_0x137ea4,_0x28d59a);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x16c32c=>{const _0x3e4183=_0x397c95;if(!Imported[_0x3e4183(0xd0e)])return;const _0x4b13de=SceneManager[_0x3e4183(0x6fe)][_0x3e4183(0x69b)];if(!_0x4b13de)return;VisuMZ[_0x3e4183(0x5ff)](_0x16c32c,_0x16c32c);const _0x592fb1=VisuMZ[_0x3e4183(0x32b)](_0x16c32c['Targets']),_0x172e8f=_0x16c32c[_0x3e4183(0x8ad)],_0xb064fb=_0x16c32c[_0x3e4183(0x5c1)]||0x0,_0x37bc39=_0x16c32c[_0x3e4183(0xd03)]||0x0,_0x469568=_0x16c32c[_0x3e4183(0xb60)]||0x0,_0x2a7de5=_0x16c32c['Radius']||0x0,_0x134fe0=_0x16c32c[_0x3e4183(0xafa)]||0x1,_0x23c123=_0x16c32c[_0x3e4183(0x729)]||'Linear',_0x37bbac=Math[_0x3e4183(0x9d3)](..._0x592fb1[_0x3e4183(0xb9a)](_0x3b202f=>_0x3b202f[_0x3e4183(0x7eb)]()[_0x3e4183(0x4fd)]-_0x3b202f[_0x3e4183(0x7eb)]()[_0x3e4183(0x559)]()/0x2)),_0x3122a9=Math[_0x3e4183(0x483)](..._0x592fb1[_0x3e4183(0xb9a)](_0x2e8124=>_0x2e8124[_0x3e4183(0x7eb)]()[_0x3e4183(0x4fd)]+_0x2e8124[_0x3e4183(0x7eb)]()['mainSpriteWidth']()/0x2)),_0x1c2695=Math[_0x3e4183(0x9d3)](..._0x592fb1[_0x3e4183(0xb9a)](_0x168f28=>_0x168f28[_0x3e4183(0x7eb)]()[_0x3e4183(0x39a)]-_0x168f28['battler']()[_0x3e4183(0xc37)]())),_0x386cff=Math[_0x3e4183(0x483)](..._0x592fb1[_0x3e4183(0xb9a)](_0x2d1fdc=>_0x2d1fdc['battler']()[_0x3e4183(0x39a)])),_0x2c9835=_0x592fb1['filter'](_0x4db68c=>_0x4db68c[_0x3e4183(0x850)]())[_0x3e4183(0x187)],_0x189b51=_0x592fb1[_0x3e4183(0x742)](_0x12d403=>_0x12d403[_0x3e4183(0x407)]())['length'];let _0x1ed812=0x0,_0x184e05=0x0;if(_0x172e8f[_0x3e4183(0xb38)](/front/i)){if(_0x3e4183(0x242)===_0x3e4183(0x94c)){if(!_0x201665[_0x3e4183(0x515)](_0x2f27cd))return!![];}else _0x1ed812=_0x2c9835>=_0x189b51?_0x37bbac:_0x3122a9;}else{if(_0x172e8f[_0x3e4183(0xb38)](/middle/i))_0x1ed812=(_0x37bbac+_0x3122a9)/0x2,melee=-0x1;else _0x172e8f[_0x3e4183(0xb38)](/back/i)&&('DQasj'!==_0x3e4183(0x97b)?this[_0x3e4183(0x356)]=!![]:_0x1ed812=_0x2c9835>=_0x189b51?_0x3122a9:_0x37bbac);}if(_0x172e8f[_0x3e4183(0xb38)](/head/i))_0x184e05=_0x1c2695;else{if(_0x172e8f[_0x3e4183(0xb38)](/center/i))_0x184e05=(_0x1c2695+_0x386cff)/0x2;else _0x172e8f['match'](/base/i)&&(_0x184e05=_0x386cff);}_0x1ed812+=(Graphics['width']-Graphics[_0x3e4183(0xb5d)])/0x2,_0x184e05+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0x1ed812+=_0xb064fb,_0x184e05+=_0x37bc39,_0x4b13de[_0x3e4183(0x52e)](_0x469568,_0x1ed812,_0x184e05,_0x2a7de5,_0x134fe0,_0x23c123);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xc07),_0xc5bd2c=>{const _0x2af8c2=_0x397c95;if(!Imported[_0x2af8c2(0xd0e)])return;const _0x21498b=SceneManager[_0x2af8c2(0x6fe)]['_spriteset'];if(!_0x21498b)return;if(VisuMZ[_0x2af8c2(0x5dd)]['version']<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x2af8c2(0x565)]();return;}VisuMZ['ConvertParams'](_0xc5bd2c,_0xc5bd2c);const _0x561c7f=VisuMZ['CreateActionSequenceTargets'](_0xc5bd2c[_0x2af8c2(0x3b9)]),_0x361b17={'filename':_0xc5bd2c[_0x2af8c2(0xb33)],'horzCells':_0xc5bd2c[_0x2af8c2(0x370)]||0x1,'vertCells':_0xc5bd2c[_0x2af8c2(0x157)]||0x1,'frameDelay':_0xc5bd2c[_0x2af8c2(0x5ea)]||0x1,'smooth':_0xc5bd2c[_0x2af8c2(0x6bc)]||![],'anchorX':_0xc5bd2c['anchorX']||0x0,'anchorY':_0xc5bd2c[_0x2af8c2(0x1d0)]||0x0,'offsetX':_0xc5bd2c[_0x2af8c2(0x8f4)]||0x0,'offsetY':_0xc5bd2c['offsetY']||0x0};for(const _0x19da9b of _0x561c7f){if('mSsso'!==_0x2af8c2(0x46c)){const _0x53a3af=this['_actor']['skillTypes']();for(const _0x571694 of _0x53a3af){this[_0x2af8c2(0x631)](_0x571694);}}else{if(!_0x19da9b)continue;if(!_0x19da9b[_0x2af8c2(0x7eb)]())continue;_0x19da9b['battler']()['startInjectAnimation'](_0x361b17);}}const _0x31348a=$gameTemp[_0x2af8c2(0xaeb)]();if(_0x31348a){if(_0x2af8c2(0xbd4)==='VrhVp')_0x31348a['setWaitMode'](_0x2af8c2(0x7e8));else{const _0xf6884d=_0x2a456f[0x0][_0x2af8c2(0xadd)](_0x122e84[0x0]),_0x243f7b=_0x1ea1b0[0x1]['format'](_0x5616d9[0x1]),_0xa7fe28=new _0x26ec53(_0x1e0816['format'](_0x243f7b),'i');_0x175bb9[_0xf6884d]=_0xa7fe28;}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x591),_0x6a0fe2=>{const _0x1e5e2c=_0x397c95;if(!Imported[_0x1e5e2c(0xd0e)])return;const _0x5a973c=SceneManager[_0x1e5e2c(0x6fe)]['_spriteset'];if(!_0x5a973c)return;if(VisuMZ[_0x1e5e2c(0x5dd)]['version']<=1.05){if(_0x1e5e2c(0x8e5)===_0x1e5e2c(0x8e5)){alert(_0x1e5e2c(0xc2a)),SceneManager[_0x1e5e2c(0x565)]();return;}else this[_0x1e5e2c(0x2c9)]=(this[_0x1e5e2c(0x2c9)]*(_0x40a716-0x1)+this[_0x1e5e2c(0x1fb)])/_0x1e31dd;}VisuMZ[_0x1e5e2c(0x5ff)](_0x6a0fe2,_0x6a0fe2);const _0x1e2cc4=VisuMZ[_0x1e5e2c(0x32b)](_0x6a0fe2[_0x1e5e2c(0x3b9)]);for(const _0x29a02c of _0x1e2cc4){if(_0x1e5e2c(0x71e)!==_0x1e5e2c(0x71e))this[_0x1e5e2c(0xc5a)]();else{if(!_0x29a02c)continue;if(!_0x29a02c[_0x1e5e2c(0x7eb)]())continue;_0x29a02c[_0x1e5e2c(0x7eb)]()[_0x1e5e2c(0xc73)]();}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x4d7),_0x5caeb6=>{const _0x1f8aed=_0x397c95;if(!Imported[_0x1f8aed(0xd0e)])return;const _0x325ebe=SceneManager['_scene'][_0x1f8aed(0x69b)];if(!_0x325ebe)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){if(_0x1f8aed(0x4e1)!==_0x1f8aed(0x4e1))return _0x5e80bd[_0x1f8aed(0x1f3)]['Settings'][_0x1f8aed(0xc24)][_0x1f8aed(0x15a)];else{alert(_0x1f8aed(0xc2a)),SceneManager['exit']();return;}}VisuMZ[_0x1f8aed(0x5ff)](_0x5caeb6,_0x5caeb6);const _0x2bedc5=VisuMZ[_0x1f8aed(0x32b)](_0x5caeb6[_0x1f8aed(0x3b9)]),_0x4a88bd=_0x5caeb6[_0x1f8aed(0xa09)];for(const _0x13aaaf of _0x2bedc5){if('AXhIT'===_0x1f8aed(0x1f0))this['_animationCount']++,this['active']=!![];else{if(!_0x13aaaf)continue;if(!_0x13aaaf[_0x1f8aed(0x7eb)]())continue;_0x13aaaf[_0x1f8aed(0x7eb)]()['pauseInjectAnimation'](_0x4a88bd);}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Inject_WaitForInjectAni',_0xa21e5=>{const _0x39d700=_0x397c95;if(!SceneManager[_0x39d700(0x650)]())return;const _0x3a7ce1=$gameTemp[_0x39d700(0xaeb)]();if(!_0x3a7ce1)return;_0x3a7ce1[_0x39d700(0x2b3)](_0x39d700(0xc53));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x2a8),_0x201789=>{const _0x490633=_0x397c95;if(!SceneManager[_0x490633(0x650)]())return;VisuMZ['ConvertParams'](_0x201789,_0x201789);const _0x2f9a88=$gameTemp[_0x490633(0xaeb)](),_0x283297=BattleManager[_0x490633(0x183)],_0xb1e484=BattleManager['_subject'],_0x4e2e43=BattleManager['_logWindow'];if(!_0x2f9a88||!_0x283297||!_0xb1e484)return;if(!_0x283297[_0x490633(0x398)]())return;const _0x45c022=VisuMZ[_0x490633(0x32b)](_0x201789[_0x490633(0x3b9)]);for(const _0x30b995 of _0x45c022){if(!_0x30b995)continue;_0x4e2e43['push']('actionEffect',_0xb1e484,_0x30b995);}_0x2f9a88[_0x490633(0x2b3)](_0x490633(0x2a5));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Mechanics_ActiveChainInputDisable',_0x57c34a=>{const _0x58abdf=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x58abdf(0x440)])return;$gameTemp['_performActionEnd']=!![];}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0xc87),_0x1d1f01=>{const _0x1438bc=_0x397c95;if(!SceneManager[_0x1438bc(0x650)]())return;VisuMZ['ConvertParams'](_0x1d1f01,_0x1d1f01);const _0x4f014f=['MAXHP','MAXMP','ATK',_0x1438bc(0xbcf),_0x1438bc(0x3dc),'MDF',_0x1438bc(0x151),_0x1438bc(0x18f)],_0x36e415=_0x1d1f01[_0x1438bc(0x4a5)],_0x48b144=_0x1d1f01['Debuffs'],_0x5f54f6=_0x1d1f01['Turns'],_0x3411dc=VisuMZ[_0x1438bc(0x32b)](_0x1d1f01[_0x1438bc(0x3b9)]);for(const _0x6a2739 of _0x3411dc){if(!_0x6a2739)continue;for(const _0x234a0a of _0x36e415){if(_0x1438bc(0x61f)!=='MAICC'){const _0x564aca=_0x41e199[_0x1438bc(0x1f3)][_0x1438bc(0x716)]['Actor'];this[_0x1438bc(0x8c0)]=_0x21b746[_0x1438bc(0xcad)]((_0x564aca[_0x1438bc(0x9bb)]??0x18)*_0x10f371),this['_shakeFlinchPower']=_0x3c622c[_0x1438bc(0x483)](this[_0x1438bc(0x9b7)],_0x2089c9);}else{const _0x5ea55c=_0x4f014f[_0x1438bc(0xb70)](_0x234a0a[_0x1438bc(0x27f)]()[_0x1438bc(0xb34)]());_0x5ea55c>=0x0&&_0x5ea55c<=0x7&&_0x6a2739[_0x1438bc(0x156)](_0x5ea55c,_0x5f54f6);}}for(const _0x2ec770 of _0x48b144){const _0x1d095e=_0x4f014f[_0x1438bc(0xb70)](_0x2ec770[_0x1438bc(0x27f)]()[_0x1438bc(0xb34)]());_0x1d095e>=0x0&&_0x1d095e<=0x7&&('nJGky'!==_0x1438bc(0x931)?_0x6a2739[_0x1438bc(0x92a)](_0x1d095e,_0x5f54f6):(this[_0x1438bc(0x478)](),this[_0x1438bc(0x9f6)]=![],_0x26081b['clearBattleRefreshRequest']()));}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xa5a),_0x33f061=>{const _0x34bdf9=_0x397c95;if(!SceneManager[_0x34bdf9(0x650)]())return;VisuMZ[_0x34bdf9(0x5ff)](_0x33f061,_0x33f061);const _0x2a6cc8=_0x33f061[_0x34bdf9(0x7f2)],_0x8fc800=VisuMZ[_0x34bdf9(0x32b)](_0x33f061[_0x34bdf9(0x3b9)]);for(const _0x5d6aee of _0x8fc800){if('TcyQr'==='syNDm')this[_0x34bdf9(0xa1e)]();else{if(!_0x5d6aee)continue;for(const _0x17c1f5 of _0x2a6cc8){_0x5d6aee[_0x34bdf9(0x59e)](_0x17c1f5);}}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Mechanics_ArmorPenetration',_0xc119e0=>{const _0x1d0488=_0x397c95;if(!SceneManager[_0x1d0488(0x650)]())return;VisuMZ[_0x1d0488(0x5ff)](_0xc119e0,_0xc119e0);const _0x2b4c18=BattleManager[_0x1d0488(0x183)],_0xacb0f8={'arPenRate':_0xc119e0[_0x1d0488(0x959)],'arPenFlat':_0xc119e0[_0x1d0488(0x2f0)],'arRedRate':_0xc119e0['ArRedRate'],'arRedFlat':_0xc119e0[_0x1d0488(0xc81)]};_0x2b4c18['_armorPenetration']=_0xacb0f8;}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_AnalyzeWeakness',_0x249d5f=>{const _0x5985be=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5985be(0xbbf)])return;VisuMZ[_0x5985be(0x5ff)](_0x249d5f,_0x249d5f);const _0xf5db58=VisuMZ[_0x5985be(0x32b)](_0x249d5f[_0x5985be(0x3b9)]),_0x396558=_0x249d5f[_0x5985be(0x4ab)]||0x1;for(const _0xe2415a of _0xf5db58){if(!_0xe2415a)continue;if(!_0xe2415a['isEnemy']())continue;_0xe2415a[_0x5985be(0xaab)](_0x396558);}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x45b),_0x552527=>{const _0x33316a=_0x397c95;if(!SceneManager[_0x33316a(0x650)]())return;if(!Imported[_0x33316a(0x7e2)])return;if(!BattleManager[_0x33316a(0x6c2)]())return;VisuMZ['ConvertParams'](_0x552527,_0x552527);const _0x55178d=VisuMZ[_0x33316a(0x32b)](_0x552527[_0x33316a(0x3b9)]),_0x955fb7=_0x552527[_0x33316a(0x636)],_0x1cf609=_0x552527[_0x33316a(0x636)],_0x49f794=_0x552527['Interrupt'];for(const _0x36a270 of _0x55178d){if(!_0x36a270)continue;if(_0x36a270['isAtbChargingState']()){if('uavZL'==='pxQQi'){const _0x17e78c=_0x197385[_0x2ec136];if(_0x17e78c)_0x21aaae[_0x33316a(0x4da)](_0x220168[_0x33316a(0x49d)](_0x17e78c));}else _0x36a270[_0x33316a(0xc7b)](_0x955fb7);}else{if(_0x36a270[_0x33316a(0x198)]()){if(_0x33316a(0x91f)===_0x33316a(0x91f)){_0x36a270[_0x33316a(0x8d9)](_0x1cf609);if(_0x49f794)_0x36a270[_0x33316a(0x4a7)]();}else{if(!_0x470c96[_0x33316a(0x221)]())return;const _0x3941f2=this[_0x33316a(0x7eb)]();if(!_0x3941f2)return;if(_0x285fcb===_0x2799a2||_0x3c91cf===_0x1969fc)return;if(_0x261c86(_0x69f39c)||_0x3df857(_0x1eace1))return;_0x283ffb=_0x329d4b||0x0;if(_0x487c8a>0x0){if(_0x3941f2[_0x33316a(0x4fd)]>_0x59cf24)_0x4f1faa+=_0x3941f2['width']/0x2+_0x54850e;if(_0x3941f2['_baseX']<_0x10b9b1)_0x308895-=_0x3941f2[_0x33316a(0x76b)]/0x2+_0x11af2c;}if(_0x376dcc)this['setBattlerFacePoint'](_0x132000,_0x201fea,![]);_0x98636e-=_0x3941f2[_0x33316a(0x169)],_0x2e3831-=_0x3941f2[_0x33316a(0x887)],_0x3941f2[_0x33316a(0xc5f)](_0x534124,_0x243850,_0x2afab9);if(_0x3753b9[_0x33316a(0x301)])_0x3941f2[_0x33316a(0x481)](_0x57f371||'Linear');}}}}}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x1b9),_0x4dd3ba=>{const _0x1310c2=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1310c2(0x26b)])return;VisuMZ[_0x1310c2(0x5ff)](_0x4dd3ba,_0x4dd3ba);const _0x4aa0ed=VisuMZ[_0x1310c2(0x32b)](_0x4dd3ba[_0x1310c2(0x3b9)]),_0x47e480=_0x4dd3ba['BoostPoints'];for(const _0x3ef1d9 of _0x4aa0ed){if('WMBaG'!==_0x1310c2(0xc9e)){if(!_0x3ef1d9)continue;_0x3ef1d9[_0x1310c2(0x490)](_0x47e480);}else return _0x306787[_0x1310c2(0x6fe)][_0x1310c2(0x1b2)]()==='border'?_0xf70630[_0x1310c2(0x1f3)][_0x1310c2(0x716)][_0x1310c2(0x595)]['SkillItemBorderCols']:_0x3e9b6d[_0x1310c2(0x1f3)][_0x1310c2(0x716)][_0x1310c2(0x595)][_0x1310c2(0x2af)];}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xb75),_0x2dc447=>{const _0x5fa065=_0x397c95;if(!SceneManager[_0x5fa065(0x650)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x5fa065(0x127)])return;VisuMZ[_0x5fa065(0x5ff)](_0x2dc447,_0x2dc447);const _0x5e686a=_0x2dc447[_0x5fa065(0x6a9)];$gameVariables['setValue'](_0x5e686a,BattleManager[_0x5fa065(0x127)]['toUseBoostPoints']());}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x4df),_0x48c1ba=>{const _0xb18510=_0x397c95;if(!SceneManager[_0xb18510(0x650)]())return;if(!Imported[_0xb18510(0xc41)])return;VisuMZ[_0xb18510(0x5ff)](_0x48c1ba,_0x48c1ba);const _0x4c7fae=VisuMZ[_0xb18510(0x32b)](_0x48c1ba[_0xb18510(0x3b9)]),_0x2b957e=_0x48c1ba[_0xb18510(0x8e0)];for(const _0x28b54e of _0x4c7fae){if(!_0x28b54e)continue;if(_0x28b54e['isBreakStunned']())continue;if(!_0x28b54e[_0xb18510(0x70c)]())continue;_0x28b54e[_0xb18510(0x218)](_0x2b957e);}}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xa70),_0x482b45=>{const _0xa39b16=_0x397c95;if(!SceneManager[_0xa39b16(0x650)]())return;if(!Imported[_0xa39b16(0xc41)])return;VisuMZ[_0xa39b16(0x5ff)](_0x482b45,_0x482b45);const _0x4af244=VisuMZ[_0xa39b16(0x32b)](_0x482b45[_0xa39b16(0x3b9)]);for(const _0x436d25 of _0x4af244){if(!_0x436d25)continue;if(_0x436d25[_0xa39b16(0x6a1)]())continue;if(!_0x436d25[_0xa39b16(0x70c)]())continue;_0x436d25['resetBreakShield']();}}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0xaa2),_0x1aa931=>{const _0x8f0a06=_0x397c95;if(!SceneManager[_0x8f0a06(0x650)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x8f0a06(0xa8b)]())return;VisuMZ[_0x8f0a06(0x5ff)](_0x1aa931,_0x1aa931);const _0x494282=VisuMZ[_0x8f0a06(0x32b)](_0x1aa931[_0x8f0a06(0x3b9)]),_0x5d1e56=_0x1aa931[_0x8f0a06(0x2cf)];for(const _0x486008 of _0x494282){if(_0x8f0a06(0xa19)!=='iBmHl')this['subject']()&&this[_0x8f0a06(0x339)]()[_0x8f0a06(0x1a6)]()?_0x4685f3['BattleCore'][_0x8f0a06(0xb1e)]['call'](this):this['clear']();else{if(!_0x486008)continue;_0x486008[_0x8f0a06(0xb0a)](_0x5d1e56);}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x215),_0x526010=>{const _0x58c8f8=_0x397c95;if(!SceneManager[_0x58c8f8(0x650)]())return;VisuMZ[_0x58c8f8(0x5ff)](_0x526010,_0x526010);const _0x511ecd=$gameTemp[_0x58c8f8(0xaeb)](),_0x4dd534=BattleManager['_action'],_0x4d7188=BattleManager['_subject'];if(!_0x511ecd||!_0x4dd534||!_0x4d7188)return;if(!_0x4dd534[_0x58c8f8(0x398)]())return;const _0x3bb7ac=VisuMZ[_0x58c8f8(0x32b)](_0x526010[_0x58c8f8(0x3b9)]);for(const _0xe44e91 of _0x3bb7ac){if(_0x58c8f8(0x3d5)!==_0x58c8f8(0xd0c)){if(!_0xe44e91)continue;_0x526010[_0x58c8f8(0xa2e)]&&(_0xe44e91[_0x58c8f8(0xcde)](),_0xe44e91[_0x58c8f8(0x59e)](_0xe44e91[_0x58c8f8(0x207)]())),_0xe44e91[_0x58c8f8(0x923)]()&&_0xe44e91[_0x58c8f8(0x362)]();}else{const _0x156157=this[_0x58c8f8(0x1b2)]();['xp',_0x58c8f8(0xab1),'border'][_0x58c8f8(0x932)](_0x156157)&&this['_actorCommandWindow'][_0x58c8f8(0x664)](),(_0x156157==='border'||this[_0x58c8f8(0x816)]())&&(this[_0x58c8f8(0xce1)][_0x58c8f8(0x664)](),this[_0x58c8f8(0x268)][_0x58c8f8(0x664)]());}}_0x511ecd[_0x58c8f8(0x2b3)](_0x58c8f8(0x7fb));}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x769),_0x15398f=>{const _0x3bd427=_0x397c95;if(!SceneManager[_0x3bd427(0x650)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x3bd427(0x5ff)](_0x15398f,_0x15398f);const _0x871329=VisuMZ['CreateActionSequenceTargets'](_0x15398f[_0x3bd427(0x3b9)]),_0x2ce235=_0x15398f['ChangeOrderBy'];for(const _0x441806 of _0x871329){if(_0x3bd427(0x927)===_0x3bd427(0x7b8)){const _0x24730c=_0xeffd9f[_0x531493];_0x24730c?this[_0x3bd427(0x74a)](_0x24730c['list'],0x0):this[_0x3bd427(0x8d7)]();}else{if(!_0x441806)continue;_0x441806['changeTurnOrderByCTB'](_0x2ce235);}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x997),_0x4c0ab6=>{const _0x107802=_0x397c95;if(!SceneManager[_0x107802(0x650)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x107802(0xac0)]())return;VisuMZ[_0x107802(0x5ff)](_0x4c0ab6,_0x4c0ab6);const _0x2d3bbf=VisuMZ[_0x107802(0x32b)](_0x4c0ab6['Targets']),_0x1f9123=_0x4c0ab6[_0x107802(0x636)],_0xdd918e=_0x4c0ab6[_0x107802(0x636)];for(const _0x2c0a86 of _0x2d3bbf){if(!_0x2c0a86)continue;if(_0x2c0a86['_tpbState']==='charging'){if(_0x107802(0x309)==='xwkKB'){const _0x543193=this[_0x107802(0x127)][_0x107802(0xc76)](),_0x477d7e=this[_0x107802(0x127)];_0x543193&&_0x543193[_0x107802(0x339)]()===_0x477d7e&&_0x543193[_0x107802(0x5b2)](_0x107802(0x86a)),_0x4b9a02[_0x107802(0x1f3)][_0x107802(0x85f)]['call'](this),_0x543193&&_0x543193['subject']()===_0x477d7e&&_0x543193['actionBattleCoreJS'](_0x107802(0x5cf));}else _0x2c0a86[_0x107802(0x691)](_0x1f9123);}else _0x2c0a86['_tpbState']===_0x107802(0xafe)&&_0x2c0a86[_0x107802(0x67a)](_0xdd918e);}}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x357),_0x779e80=>{const _0x1c6bdb=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x779e80,_0x779e80);const _0x4d68f1=BattleManager[_0x1c6bdb(0x183)];if(!_0x4d68f1)return;let _0x439961=_0x779e80[_0x1c6bdb(0x55c)];_0x4d68f1[_0x1c6bdb(0x801)](_0x439961);}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x951),_0x571595=>{const _0x3d23ab=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3d23ab(0x5ff)](_0x571595,_0x571595);const _0x2948d2=VisuMZ[_0x3d23ab(0x32b)](_0x571595[_0x3d23ab(0x3b9)]);for(const _0x2c029f of _0x2948d2){if(!_0x2c029f)continue;if(_0x2c029f['shouldPopupDamage']())_0x2c029f['startDamagePopup']();}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xbe3),_0x3a7e22=>{const _0x1f3a6f=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1f3a6f(0x5ff)](_0x3a7e22,_0x3a7e22);const _0x13a590=$gameTemp['getLastPluginCommandInterpreter'](),_0x4b2e34=BattleManager['_subject'],_0x26e08b=_0x3a7e22[_0x1f3a6f(0x44d)];if(!_0x13a590)return;if(!_0x4b2e34)return;_0x4b2e34&&_0x4b2e34['isDead']()&&_0x26e08b[_0x1f3a6f(0x27f)]()[_0x1f3a6f(0xb34)]()!==_0x1f3a6f(0xb7f)&&_0x13a590[_0x1f3a6f(0x3b7)]([_0x26e08b]);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x2db),_0x1a8564=>{const _0x5e9273=_0x397c95;if(!SceneManager[_0x5e9273(0x650)]())return;VisuMZ[_0x5e9273(0x5ff)](_0x1a8564,_0x1a8564);const _0x1beac0=VisuMZ[_0x5e9273(0x32b)](_0x1a8564[_0x5e9273(0x3b9)]);for(const _0x143b36 of _0x1beac0){if(_0x5e9273(0x3e6)!==_0x5e9273(0x3e6))this[_0x5e9273(0x625)]=new _0x4aa6da(),_0x457816['ANTI_TINT_UI']?this[_0x5e9273(0x5ab)](this[_0x5e9273(0x625)]):this[_0x5e9273(0x713)]['addChild'](this[_0x5e9273(0x625)]),_0x494f85[_0x5e9273(0x6fe)][_0x5e9273(0x625)]=this[_0x5e9273(0x625)];else{if(!_0x143b36)continue;if(!_0x143b36['isEnemy']())continue;_0x143b36[_0x5e9273(0x95b)]();}}}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0x6a2),_0x1ed10e=>{const _0xe1c219=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xe1c219(0x5cb)])return;if(!BattleManager[_0xe1c219(0xa0c)]())return;VisuMZ['ConvertParams'](_0x1ed10e,_0x1ed10e);const _0x745db7=_0x1ed10e[_0xe1c219(0x819)];if(BattleManager[_0xe1c219(0x127)]){if(_0xe1c219(0xae2)!==_0xe1c219(0xae2))return this[_0xe1c219(0x7a0)];else BattleManager[_0xe1c219(0x127)]['friendsUnit']()['gainCurrentActionsETB'](_0x745db7);}}),PluginManager[_0x397c95(0x14e)](pluginData['name'],'ActSeq_Mechanics_FtbAction',_0x3c8c6d=>{const _0x18b0ae=_0x397c95;if(!SceneManager[_0x18b0ae(0x650)]())return;if(!Imported[_0x18b0ae(0x9ba)])return;if(!BattleManager[_0x18b0ae(0x7ec)]())return;VisuMZ[_0x18b0ae(0x5ff)](_0x3c8c6d,_0x3c8c6d);const _0x582d0e=_0x3c8c6d[_0x18b0ae(0x819)];BattleManager[_0x18b0ae(0x127)]&&(_0x18b0ae(0x6f3)===_0x18b0ae(0x73c)?this[_0x18b0ae(0xcfe)][_0x18b0ae(0x8ff)]=_0x22077f['prototype'][_0x18b0ae(0x678)][_0x18b0ae(0x6a3)](this):BattleManager['_subject']['friendsUnit']()[_0x18b0ae(0x1d7)](_0x582d0e));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Mechanics_HpMpTp',_0x5b346e=>{const _0x287e92=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5b346e,_0x5b346e);const _0x2a9459=VisuMZ[_0x287e92(0x32b)](_0x5b346e[_0x287e92(0x3b9)]),_0x53a9f5=_0x5b346e[_0x287e92(0x71d)],_0x426b75=_0x5b346e[_0x287e92(0x35b)],_0x28cc68=_0x5b346e[_0x287e92(0x589)],_0x2a6927=_0x5b346e[_0x287e92(0x22e)],_0x59df7a=_0x5b346e[_0x287e92(0x8a7)],_0x34e7bd=_0x5b346e[_0x287e92(0x399)],_0x48853b=_0x5b346e[_0x287e92(0xbf9)];for(const _0x3fdc74 of _0x2a9459){if(!_0x3fdc74)continue;const _0x5250eb=_0x3fdc74['isAlive'](),_0x4b0ee7=Math[_0x287e92(0x403)](_0x53a9f5*_0x3fdc74[_0x287e92(0x387)]+_0x426b75),_0x1e8f44=Math[_0x287e92(0x403)](_0x28cc68*_0x3fdc74['mmp']+_0x2a6927),_0x23c474=Math[_0x287e92(0x403)](_0x59df7a*_0x3fdc74[_0x287e92(0x9f5)]()+_0x34e7bd);if(_0x4b0ee7!==0x0)_0x3fdc74[_0x287e92(0x1ef)](_0x4b0ee7);if(_0x1e8f44!==0x0)_0x3fdc74[_0x287e92(0xc00)](_0x1e8f44);if(_0x23c474!==0x0)_0x3fdc74[_0x287e92(0x4d0)](_0x23c474);if(_0x48853b)_0x3fdc74[_0x287e92(0x25e)]();_0x5250eb&&_0x3fdc74[_0x287e92(0x88a)]()&&_0x3fdc74[_0x287e92(0x362)]();}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x92f),_0x7642a8=>{const _0x16fbf1=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x16fbf1(0x5ff)](_0x7642a8,_0x7642a8);const _0x1ad2a6=VisuMZ['CreateActionSequenceTargets'](_0x7642a8[_0x16fbf1(0x3b9)]);for(const _0x5cbe3b of _0x1ad2a6){if('MBQTF'!==_0x16fbf1(0x73e))this['initElementStatusCore']();else{if(!_0x5cbe3b)continue;_0x5cbe3b['setImmortal'](_0x7642a8[_0x16fbf1(0x67e)]);}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Mechanics_Multipliers',_0x9d72ee=>{const _0x4df6fd=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x9d72ee,_0x9d72ee);const _0x51ee90=BattleManager[_0x4df6fd(0x183)],_0x281c98={'criticalHitRate':_0x9d72ee[_0x4df6fd(0x3bb)],'criticalHitFlat':_0x9d72ee[_0x4df6fd(0xc5d)],'criticalDmgRate':_0x9d72ee[_0x4df6fd(0xbfd)],'criticalDmgFlat':_0x9d72ee[_0x4df6fd(0x644)],'damageRate':_0x9d72ee[_0x4df6fd(0x553)],'damageFlat':_0x9d72ee[_0x4df6fd(0x65b)],'hitRate':_0x9d72ee[_0x4df6fd(0xd15)],'hitFlat':_0x9d72ee[_0x4df6fd(0x6ea)]};_0x51ee90['_multipliers']=_0x281c98;}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0xc7a),_0x680e1a=>{const _0x2a6df2=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2a6df2(0x5ff)](_0x680e1a,_0x680e1a);const _0x347868=_0x680e1a[_0x2a6df2(0x12f)];SceneManager[_0x2a6df2(0x6fe)][_0x2a6df2(0x898)](_0x347868);}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x811),_0x1593af=>{const _0x402a38=_0x397c95;if(!SceneManager[_0x402a38(0x650)]())return;if(!Imported[_0x402a38(0xc8b)])return;if(!BattleManager[_0x402a38(0xb28)]())return;VisuMZ[_0x402a38(0x5ff)](_0x1593af,_0x1593af);const _0x44d4a9=VisuMZ[_0x402a38(0x32b)](_0x1593af['Targets']);for(const _0x48c15a of _0x44d4a9){if(!_0x48c15a)continue;let _0x2608f2=_0x1593af[_0x402a38(0x885)],_0x44f744=_0x1593af[_0x402a38(0xc3c)],_0x737208=_0x1593af[_0x402a38(0x23d)];BattleManager[_0x402a38(0x201)]['includes'](_0x48c15a)?_0x402a38(0x865)!==_0x402a38(0x447)?_0x2608f2+=_0x737208:_0x1f5db8['push'](_0x4c7dd3(_0x19ed72['$1'])):_0x44f744+=_0x737208,BattleManager['turnOrderChangeOTB'](_0x48c15a,-_0x2608f2,![]),BattleManager['turnOrderChangeOTB'](_0x48c15a,-_0x44f744,!![]);}}),PluginManager[_0x397c95(0x14e)](pluginData['name'],'ActSeq_Mechanics_PtbAlterCost',_0xa62dbd=>{const _0x497737=_0x397c95;if(!SceneManager[_0x497737(0x650)]())return;if(!Imported[_0x497737(0x369)])return;if(!BattleManager[_0x497737(0xc3a)]())return;VisuMZ[_0x497737(0x5ff)](_0xa62dbd,_0xa62dbd);const _0x3b6da6=BattleManager[_0x497737(0x127)][_0x497737(0x154)](),_0x3acb1e=_0xa62dbd[_0x497737(0x583)],_0x5a93ab=_0xa62dbd[_0x497737(0x47e)]||_0x497737(0x714),_0x59d2f1=_0xa62dbd[_0x497737(0x736)]||_0x497737(0x714),_0x1f741d=_0xa62dbd[_0x497737(0x90e)]||0x0,_0x4a9e3f=_0xa62dbd[_0x497737(0x526)]||0x0;(_0x3b6da6[_0x497737(0xa28)]()||_0x3acb1e)&&(_0x3acb1e&&(_0x3b6da6[_0x497737(0x975)]=_0x3b6da6[_0x497737(0x975)]||{},_0x3b6da6[_0x497737(0x975)][_0x497737(0xc02)]=0x0),_0x3b6da6[_0x497737(0x5d1)](_0x5a93ab,_0x59d2f1,_0x1f741d,_0x4a9e3f));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],'ActSeq_Mechanics_PtbConvert',_0x2a9260=>{const _0x5a25ca=_0x397c95;if(!SceneManager[_0x5a25ca(0x650)]())return;if(!Imported[_0x5a25ca(0x369)])return;if(!BattleManager[_0x5a25ca(0xc3a)]())return;VisuMZ[_0x5a25ca(0x5ff)](_0x2a9260,_0x2a9260);const _0x4518f4=BattleManager['_subject']['friendsUnit']();let _0x1bb8c7=Math[_0x5a25ca(0x483)](_0x2a9260[_0x5a25ca(0x700)],0x0),_0x2d6a29=_0x4518f4[_0x5a25ca(0x213)](),_0xc5e25d=_0x4518f4[_0x5a25ca(0x24d)]();while(_0x1bb8c7--){if(_0x2d6a29<=0x0&&_0xc5e25d<=0x0)break;else _0x2d6a29>0x0?_0x5a25ca(0x9f8)===_0x5a25ca(0x5e6)?this[_0x5a25ca(0x78b)]=!![]:(_0x2d6a29--,_0xc5e25d++):_0xc5e25d--;}_0x4518f4[_0x5a25ca(0xabc)](_0x2d6a29),_0x4518f4[_0x5a25ca(0x307)](_0xc5e25d);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Mechanics_PtbFullHalfAction',_0x48a33a=>{const _0x1b66d1=_0x397c95;if(!SceneManager[_0x1b66d1(0x650)]())return;if(!Imported[_0x1b66d1(0x369)])return;if(!BattleManager[_0x1b66d1(0xc3a)]())return;VisuMZ[_0x1b66d1(0x5ff)](_0x48a33a,_0x48a33a);const _0x9fed8=BattleManager['_subject']['friendsUnit']();let _0x5ea200=_0x48a33a[_0x1b66d1(0x73f)],_0x1c24ea=_0x48a33a[_0x1b66d1(0x234)];_0x9fed8[_0x1b66d1(0x47a)](_0x5ea200),_0x9fed8['gainHalfActionsPTB'](_0x1c24ea);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x217),_0x1f45cb=>{const _0x462da1=_0x397c95;if(!SceneManager[_0x462da1(0x650)]())return;VisuMZ[_0x462da1(0x5ff)](_0x1f45cb,_0x1f45cb);const _0x5eb5e2=[_0x462da1(0x637),_0x462da1(0x79e),_0x462da1(0x508),_0x462da1(0xbcf),_0x462da1(0x3dc),_0x462da1(0x1c9),_0x462da1(0x151),_0x462da1(0x18f)],_0x4bbd70=_0x1f45cb[_0x462da1(0x4a5)],_0x4e63f8=_0x1f45cb[_0x462da1(0xca6)],_0x599b34=VisuMZ[_0x462da1(0x32b)](_0x1f45cb[_0x462da1(0x3b9)]);for(const _0x131bc7 of _0x599b34){if('JOSaC'===_0x462da1(0x697))_0x18dce5[_0x462da1(0x761)]=!_0x20e11d['portraitFlipHorz'];else{if(!_0x131bc7)continue;for(const _0x526779 of _0x4bbd70){const _0x5acb7a=_0x5eb5e2[_0x462da1(0xb70)](_0x526779[_0x462da1(0x27f)]()[_0x462da1(0xb34)]());if(_0x5acb7a>=0x0&&_0x5acb7a<=0x7&&_0x131bc7[_0x462da1(0x30b)](_0x5acb7a)){if(_0x462da1(0x3d4)===_0x462da1(0x75c))return this['getMenuImage']();else _0x131bc7['removeBuff'](_0x5acb7a);}}for(const _0x2889cd of _0x4e63f8){const _0x14c96b=_0x5eb5e2['indexOf'](_0x2889cd[_0x462da1(0x27f)]()['trim']());_0x14c96b>=0x0&&_0x14c96b<=0x7&&_0x131bc7[_0x462da1(0x83d)](_0x14c96b)&&(_0x462da1(0x590)===_0x462da1(0x464)?_0x2f687b[_0x462da1(0x6cf)][_0x462da1(0x953)][_0x462da1(0x6a3)](this,_0x235899,_0x50569c,_0x1c1aad,_0x498e1c,_0x20dc39):_0x131bc7[_0x462da1(0x495)](_0x14c96b));}}}}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0xc1f),_0x42f83b=>{const _0x23d7c0=_0x397c95;if(!SceneManager[_0x23d7c0(0x650)]())return;VisuMZ[_0x23d7c0(0x5ff)](_0x42f83b,_0x42f83b);const _0x558aa3=_0x42f83b['States'],_0x1b9bf1=VisuMZ[_0x23d7c0(0x32b)](_0x42f83b[_0x23d7c0(0x3b9)]);for(const _0x160717 of _0x1b9bf1){if(_0x23d7c0(0xa35)===_0x23d7c0(0x4ae))this[_0x23d7c0(0x6c3)]=_0x23d7c0(0xaba);else{if(!_0x160717)continue;for(const _0x496f09 of _0x558aa3){_0x160717['removeState'](_0x496f09);}}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Mechanics_StbExploit',_0x324702=>{const _0x5a3f9b=_0x397c95;if(!SceneManager[_0x5a3f9b(0x650)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x5a3f9b(0x181)]())return;VisuMZ['ConvertParams'](_0x324702,_0x324702);const _0x29e8ea=_0x324702[_0x5a3f9b(0x3a0)],_0x3efa36=VisuMZ[_0x5a3f9b(0x32b)](_0x324702[_0x5a3f9b(0x3b9)]),_0x213944=_0x324702['ForceExploited'],_0x1ac1f7=_0x324702[_0x5a3f9b(0x68c)],_0x4f285b=_0x324702[_0x5a3f9b(0x1dd)],_0x46b072=BattleManager['_action'];if(_0x29e8ea)for(const _0x19be33 of _0x3efa36){if(!_0x19be33)continue;if(_0x19be33===user)continue;if(_0x213944)_0x19be33[_0x5a3f9b(0x710)](![]);_0x19be33[_0x5a3f9b(0x9c5)](BattleManager[_0x5a3f9b(0x127)],_0x46b072);}if(_0x1ac1f7&&BattleManager[_0x5a3f9b(0x127)]){if(_0x4f285b)BattleManager[_0x5a3f9b(0x127)][_0x5a3f9b(0x710)](![]);const _0x2072a4=_0x3efa36[0x0];BattleManager['performSTBExploiter'](_0x2072a4,_0x46b072);}}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],'ActSeq_Mechanics_StbExtraAction',_0x455b5e=>{const _0x4a88d9=_0x397c95;if(!SceneManager[_0x4a88d9(0x650)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x4a88d9(0x181)]())return;VisuMZ['ConvertParams'](_0x455b5e,_0x455b5e);const _0x2e6fea=_0x455b5e['Actions'];BattleManager['_subject']&&BattleManager['_subject'][_0x4a88d9(0x6ce)](_0x2e6fea);}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x14c),_0xad1fd1=>{const _0x2e0496=_0x397c95;if(!SceneManager[_0x2e0496(0x650)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0xad1fd1,_0xad1fd1);let _0x467504=_0xad1fd1[_0x2e0496(0x668)];if(BattleManager['_subject']){if('uldDC'==='mUekw')_0x46fdb1[_0x2e0496(0x1f3)]['Game_Battler_onBattleStart'][_0x2e0496(0x6a3)](this,_0x1b3ccb),this[_0x2e0496(0x4c8)](_0x70443e),this['clearDamagePopup']();else{BattleManager[_0x2e0496(0x127)][_0x2e0496(0x31c)]=BattleManager['_subject'][_0x2e0496(0x31c)]||[];while(_0x467504--){if('qencH'!==_0x2e0496(0x1d4)){const _0x1b132e=_0x11d555[_0x2e0496(0x371)](_0x27c3de);_0x1b132e[_0x2e0496(0xb7c)](this['onStaticEnemyBitmapLoad']['bind'](this,_0x1b132e));}else{if(BattleManager[_0x2e0496(0x127)][_0x2e0496(0x31c)][_0x2e0496(0x187)]<=0x0)break;BattleManager[_0x2e0496(0x127)][_0x2e0496(0x31c)][_0x2e0496(0x163)]();}}}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x1f2),_0x1ba59f=>{const _0x11f314=_0x397c95;if(!SceneManager[_0x11f314(0x650)]())return;if(!Imported[_0x11f314(0x37b)])return;VisuMZ[_0x11f314(0x5ff)](_0x1ba59f,_0x1ba59f);const _0x1e0831=VisuMZ[_0x11f314(0x32b)](_0x1ba59f[_0x11f314(0x3b9)]),_0x5a2ef0=_0x1ba59f[_0x11f314(0x39e)];for(const _0x3ac8f8 of _0x1e0831){if(!_0x3ac8f8)continue;if(!_0x3ac8f8[_0x11f314(0x850)]())continue;_0x3ac8f8[_0x11f314(0x5c7)](_0x5a2ef0);}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x732),_0x149e2c=>{const _0xf22cb3=_0x397c95;if(!SceneManager[_0xf22cb3(0x650)]())return;VisuMZ[_0xf22cb3(0x5ff)](_0x149e2c,_0x149e2c);const _0x4edaa4=VisuMZ[_0xf22cb3(0x32b)](_0x149e2c[_0xf22cb3(0x3b9)]),_0x423124=_0x149e2c[_0xf22cb3(0xc05)],_0x267758={'textColor':ColorManager['getColor'](_0x149e2c[_0xf22cb3(0xc42)]),'flashColor':_0x149e2c[_0xf22cb3(0x4fb)],'flashDuration':_0x149e2c[_0xf22cb3(0xc46)]};for(const _0x21ced3 of _0x4edaa4){if(!_0x21ced3)continue;_0x21ced3[_0xf22cb3(0x5c2)](_0x423124,_0x267758);}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x322),_0x57e728=>{const _0x4d46d6=_0x397c95;if(!SceneManager[_0x4d46d6(0x650)]())return;VisuMZ['ConvertParams'](_0x57e728,_0x57e728);const _0x5e85a9=VisuMZ['CreateActionSequenceTargets'](_0x57e728[_0x4d46d6(0x3b9)]);let _0xae16ae=$gameVariables['value'](_0x57e728[_0x4d46d6(0x3f2)]);Imported[_0x4d46d6(0x301)]&&_0x57e728['DigitGrouping']&&(_0x4d46d6(0x300)!==_0x4d46d6(0x300)?(this[_0x4d46d6(0x86b)]['x']=0x0,this[_0x4d46d6(0xc8a)]=_0xeed107['ceil'](_0x29cdf4[_0x4d46d6(0x76b)]/0x2)):_0xae16ae=VisuMZ[_0x4d46d6(0x756)](_0xae16ae));const _0x2505d8=String(_0xae16ae),_0x2e50a6={'textColor':ColorManager[_0x4d46d6(0x662)](_0x57e728[_0x4d46d6(0xc42)]),'flashColor':_0x57e728['FlashColor'],'flashDuration':_0x57e728['FlashDuration']};for(const _0x1e2a88 of _0x5e85a9){if(!_0x1e2a88)continue;_0x1e2a88[_0x4d46d6(0x5c2)](_0x2505d8,_0x2e50a6);}}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x1c7),_0x26fa37=>{const _0x23ec8e=_0x397c95;if(!SceneManager['isSceneBattle']())return;const _0x293f5c=$gameTemp[_0x23ec8e(0xaeb)]();if(!_0x293f5c)return;_0x293f5c[_0x23ec8e(0x2b3)](_0x23ec8e(0x7fb));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x138),_0x1419a8=>{const _0x5d0627=_0x397c95;if(!SceneManager[_0x5d0627(0x650)]())return;VisuMZ[_0x5d0627(0x5ff)](_0x1419a8,_0x1419a8);const _0x55c8b3=VisuMZ['CreateActionSequenceTargets'](_0x1419a8[_0x5d0627(0x3b9)]);for(const _0x1eea6f of _0x55c8b3){if(!_0x1eea6f)continue;_0x1eea6f['clearFreezeMotion']();}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Motion_FreezeMotionFrame',_0x38f27d=>{const _0x12d957=_0x397c95;if(!SceneManager[_0x12d957(0x650)]())return;VisuMZ[_0x12d957(0x5ff)](_0x38f27d,_0x38f27d);const _0x58b983=VisuMZ[_0x12d957(0x32b)](_0x38f27d[_0x12d957(0x3b9)]),_0x38d0d4=_0x38f27d[_0x12d957(0xaca)][_0x12d957(0x9a2)]()[_0x12d957(0xb34)]();let _0x5bfca4=_0x38f27d['ShowWeapon'];const _0x3b390e=_0x38f27d['Frame'];![_0x12d957(0x474),_0x12d957(0x59f),_0x12d957(0x75b),_0x12d957(0x36c)][_0x12d957(0x932)](_0x38d0d4)&&(_0x5bfca4=![]);for(const _0x6be454 of _0x58b983){if(!_0x6be454)continue;_0x6be454[_0x12d957(0x2c4)](_0x38d0d4,_0x5bfca4,_0x3b390e);}}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0x3f4),_0x14b892=>{const _0x5aceb0=_0x397c95;if(!SceneManager[_0x5aceb0(0x650)]())return;VisuMZ[_0x5aceb0(0x5ff)](_0x14b892,_0x14b892);const _0x3e7ab9=VisuMZ[_0x5aceb0(0x32b)](_0x14b892[_0x5aceb0(0x3b9)]),_0x4ca8fd=_0x14b892[_0x5aceb0(0xaca)][_0x5aceb0(0x9a2)]()['trim'](),_0x4e5a98=_0x14b892[_0x5aceb0(0xa4b)];for(const _0x5bfdf0 of _0x3e7ab9){if(!_0x5bfdf0)continue;if(_0x4ca8fd[_0x5aceb0(0xb38)](/ATTACK[ ](\d+)/i))_0x5aceb0(0x2c8)!==_0x5aceb0(0x2c8)?this[_0x5aceb0(0xd04)]=_0x4abdef:_0x5bfdf0[_0x5aceb0(0x31a)](Number(RegExp['$1']));else{if(_0x4ca8fd==='attack')_0x5bfdf0[_0x5aceb0(0x444)]();else{if(_0x5aceb0(0x99c)==='KCOFy')_0x5bfdf0[_0x5aceb0(0x93a)](_0x4ca8fd);else{_0x2ed31d[_0x5aceb0(0x6cf)][_0x5aceb0(0xbee)][_0x5aceb0(0x6a3)](this,_0x477cc5);if(this[_0x5aceb0(0x4a3)]())this[_0x5aceb0(0xc79)](_0x1ba629);}}}if(!_0x4e5a98)_0x5bfdf0[_0x5aceb0(0x7b2)](0x0);else{if(_0x4e5a98&&['thrust',_0x5aceb0(0x75b),_0x5aceb0(0x89b)]['includes'](_0x4ca8fd)){}}}}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0x160),_0xb9176f=>{const _0x2c17d8=_0x397c95;if(!SceneManager[_0x2c17d8(0x650)]())return;VisuMZ[_0x2c17d8(0x5ff)](_0xb9176f,_0xb9176f);const _0x56e1ff=BattleManager[_0x2c17d8(0x183)];if(!_0x56e1ff)return;if(!_0x56e1ff[_0x2c17d8(0x398)]())return;const _0x1262f8=VisuMZ[_0x2c17d8(0x32b)](_0xb9176f[_0x2c17d8(0x3b9)]);for(const _0x4cae61 of _0x1262f8){if(!_0x4cae61)continue;_0x4cae61[_0x2c17d8(0xbee)](_0x56e1ff);}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x2e5),_0x3316a2=>{const _0x5b1a34=_0x397c95;if(!SceneManager[_0x5b1a34(0x650)]())return;VisuMZ[_0x5b1a34(0x5ff)](_0x3316a2,_0x3316a2);const _0x1fb749=VisuMZ[_0x5b1a34(0x32b)](_0x3316a2[_0x5b1a34(0x3b9)]);for(const _0x2ceac4 of _0x1fb749){if(_0x5b1a34(0x7ae)===_0x5b1a34(0x935)){const _0x14808e=_0xc0eeab[_0xb8df5c];_0x14808e&&_0x3c5c0b[_0x5b1a34(0x280)](_0x519809);}else{if(!_0x2ceac4)continue;if(!_0x2ceac4[_0x5b1a34(0x7eb)]())continue;_0x2ceac4['battler']()[_0x5b1a34(0x840)]();}}}),PluginManager[_0x397c95(0x14e)](pluginData['name'],'ActSeq_Motion_WaitMotionFrame',_0x573c07=>{const _0x532147=_0x397c95;if(!SceneManager[_0x532147(0x650)]())return;VisuMZ[_0x532147(0x5ff)](_0x573c07,_0x573c07);const _0x35d2f5=$gameTemp[_0x532147(0xaeb)](),_0x5abc0b=_0x573c07[_0x532147(0x5d3)]*Sprite_Battler[_0x532147(0xb29)];_0x35d2f5[_0x532147(0xbf0)](_0x5abc0b);}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0xcb4),_0x57f066=>{const _0x305bec=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x305bec(0x5ff)](_0x57f066,_0x57f066);const _0x9c03be=$gameTemp[_0x305bec(0xaeb)](),_0x476bf2=BattleManager['_action'];if(!_0x9c03be||!_0x476bf2)return;if(!_0x476bf2[_0x305bec(0x398)]())return;const _0x2846a8=VisuMZ[_0x305bec(0x32b)](_0x57f066['Targets']);for(const _0x195a4b of _0x2846a8){if(!_0x195a4b)continue;_0x195a4b[_0x305bec(0x8a9)](_0x476bf2);}if(_0x57f066['WaitForMovement'])_0x9c03be[_0x305bec(0x2b3)]('battleMove');}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x276),_0x5dfee5=>{const _0x519b63=_0x397c95;if(!SceneManager[_0x519b63(0x650)]())return;if(!$gameSystem[_0x519b63(0x221)]())return;VisuMZ['ConvertParams'](_0x5dfee5,_0x5dfee5);const _0x5d3a85=$gameTemp[_0x519b63(0xaeb)](),_0x34a392=VisuMZ['CreateActionSequenceTargets'](_0x5dfee5[_0x519b63(0x3b9)]),_0x32d56c=_0x5dfee5[_0x519b63(0xbc3)],_0x4b11a0=_0x5dfee5[_0x519b63(0x3c8)],_0x358288=_0x5dfee5[_0x519b63(0x2da)],_0x39629f=_0x5dfee5[_0x519b63(0xafa)],_0xb1d681=_0x5dfee5[_0x519b63(0x794)],_0x146901=_0x5dfee5['EasingType'],_0x1f2afe=_0x5dfee5[_0x519b63(0xaca)],_0x29804f=_0x5dfee5['WaitForMovement'];if(!_0x5d3a85)return;for(const _0x43c35e of _0x34a392){if(_0x519b63(0x8ea)===_0x519b63(0x5fe)){if(this['actor']()[_0x519b63(0x6cc)][_0x519b63(0xb38)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x33d42e(_0xb05d0['$1']);else{if(this[_0x519b63(0x793)]()['note'][_0x519b63(0xb38)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x280e78(_0x18ceb0['$1']);}return 0x0;}else{if(!_0x43c35e)continue;let _0x47d0d4=_0x4b11a0,_0x46b4d9=_0x358288;if(_0x32d56c[_0x519b63(0xb38)](/horz/i))_0x47d0d4*=_0x43c35e[_0x519b63(0x850)]()?-0x1:0x1;if(_0x32d56c[_0x519b63(0xb38)](/vert/i))_0x46b4d9*=_0x43c35e[_0x519b63(0x850)]()?-0x1:0x1;_0x43c35e['moveBattlerHomeDistance'](_0x47d0d4,_0x46b4d9,_0x39629f,_0xb1d681,_0x146901),_0x43c35e['requestMotion'](_0x1f2afe);}}if(_0x29804f)_0x5d3a85[_0x519b63(0x2b3)]('battleMove');}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x2cc),_0x2017c7=>{const _0x43845a=_0x397c95;if(!SceneManager[_0x43845a(0x650)]())return;if(!$gameSystem[_0x43845a(0x221)]())return;VisuMZ[_0x43845a(0x5ff)](_0x2017c7,_0x2017c7);const _0x1ce4ca=$gameTemp['getLastPluginCommandInterpreter'](),_0x425d38=VisuMZ[_0x43845a(0x32b)](_0x2017c7[_0x43845a(0x3b9)]),_0x57255f=_0x2017c7[_0x43845a(0x9d6)],_0x435dc7=_0x2017c7[_0x43845a(0x780)],_0x50b925=_0x2017c7[_0x43845a(0x5c1)],_0x3c6e20=_0x2017c7['OffsetY'],_0x29d8bc=_0x2017c7[_0x43845a(0xafa)],_0x49a644=_0x2017c7[_0x43845a(0x794)],_0x18ef49=_0x2017c7['EasingType'],_0x1264e7=_0x2017c7[_0x43845a(0xaca)],_0x38d889=_0x2017c7[_0x43845a(0x9cf)];if(!_0x1ce4ca)return;for(const _0x4d87a3 of _0x425d38){if('wTGoM'!==_0x43845a(0x91e))_0x5a2c49[_0x43845a(0x1f3)][_0x43845a(0x2b0)][_0x43845a(0x6a3)](this),this[_0x43845a(0x8d1)]();else{if(!_0x4d87a3)continue;let _0x44354c=_0x4d87a3['battler']()[_0x43845a(0x4fd)],_0x73a396=_0x4d87a3[_0x43845a(0x7eb)]()[_0x43845a(0x39a)];if(_0x57255f[_0x43845a(0xb38)](/home/i))_0x44354c=_0x4d87a3['battler']()[_0x43845a(0x169)],_0x73a396=_0x4d87a3['battler']()['_homeY'];else{if(_0x57255f[_0x43845a(0xb38)](/center/i))_0x43845a(0x797)!=='FusKa'?this['_battleField'][_0x43845a(0x5ab)](this['_uiContainer']):(_0x44354c=Graphics[_0x43845a(0xb5d)]/0x2,_0x73a396=Graphics[_0x43845a(0xa9e)]/0x2);else _0x57255f[_0x43845a(0xb38)](/point (\d+), (\d+)/i)&&('xeLVY'===_0x43845a(0xa53)?(_0x44354c=Number(RegExp['$1']),_0x73a396=Number(RegExp['$2'])):(_0x399bf0(_0x43845a(0x892)[_0x43845a(0xadd)](_0x3a26a9,_0x5a33c2,_0x29ef9b)),_0x5503b4['exit']()));}if(_0x435dc7[_0x43845a(0xb38)](/none/i)){if(_0x43845a(0xb67)!==_0x43845a(0xbd9))_0x44354c+=_0x50b925,_0x73a396+=_0x3c6e20;else return this['chantStyle']()?this[_0x43845a(0xc76)]()&&this['currentAction']()[_0x43845a(0x398)]()&&!this[_0x43845a(0xc76)]()[_0x43845a(0x254)]():this['currentAction']()&&this['currentAction']()[_0x43845a(0x398)]()&&!this['currentAction']()[_0x43845a(0x4de)]();}else{if(_0x435dc7[_0x43845a(0xb38)](/horz/i)&&_0x435dc7[_0x43845a(0xb38)](/vert/i))_0x44354c+=_0x4d87a3['isActor']()?-_0x50b925:_0x50b925,_0x73a396+=_0x4d87a3[_0x43845a(0x850)]()?-_0x3c6e20:_0x3c6e20;else{if(_0x435dc7[_0x43845a(0xb38)](/horz/i))_0x43845a(0x681)!==_0x43845a(0x681)?(_0x2db180[_0x43845a(0x1f3)][_0x43845a(0x85d)][_0x43845a(0x6a3)](this),_0x525cb7['isTpb']()&&_0x296e10[_0x43845a(0x1f7)]&&(_0x1d33b0[_0x43845a(0x1f7)]=![],this[_0x43845a(0xae7)]())):(_0x44354c+=_0x4d87a3[_0x43845a(0x850)]()?-_0x50b925:_0x50b925,_0x73a396+=_0x3c6e20);else _0x435dc7[_0x43845a(0xb38)](/vert/i)&&(_0x43845a(0x212)!==_0x43845a(0x212)?_0x3cdc4f[_0x43845a(0x2b3)](_0x43845a(0x5ca)):(_0x44354c+=_0x50b925,_0x73a396+=_0x4d87a3[_0x43845a(0x850)]()?-_0x3c6e20:_0x3c6e20));}}_0x4d87a3[_0x43845a(0x17e)](_0x44354c,_0x73a396,_0x29d8bc,_0x49a644,_0x18ef49,-0x1),_0x4d87a3[_0x43845a(0x93a)](_0x1264e7);}}if(_0x38d889)_0x1ce4ca[_0x43845a(0x2b3)](_0x43845a(0x29e));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x859),_0x12a43=>{const _0x167a0b=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x167a0b(0x221)]())return;VisuMZ['ConvertParams'](_0x12a43,_0x12a43);const _0x159678=$gameTemp['getLastPluginCommandInterpreter'](),_0x4db092=VisuMZ[_0x167a0b(0x32b)](_0x12a43[_0x167a0b(0x4b8)]),_0x190b52=VisuMZ[_0x167a0b(0x32b)](_0x12a43['Targets2']),_0x1f8c98=_0x12a43[_0x167a0b(0x8ad)];let _0x1a9494=_0x12a43[_0x167a0b(0x3e0)];const _0xaac93f=_0x12a43[_0x167a0b(0x780)],_0x575a83=_0x12a43[_0x167a0b(0x5c1)],_0x1976cc=_0x12a43[_0x167a0b(0xd03)],_0x400c16=_0x12a43['Duration'],_0x4e14fb=_0x12a43['FaceDirection'],_0x297af5=_0x12a43[_0x167a0b(0x729)],_0x5833a9=_0x12a43[_0x167a0b(0xaca)],_0x4a8efc=_0x12a43[_0x167a0b(0x9cf)],_0x4b4559=Math['min'](..._0x190b52[_0x167a0b(0xb9a)](_0x353118=>_0x353118[_0x167a0b(0x7eb)]()[_0x167a0b(0x4fd)]-_0x353118['battler']()[_0x167a0b(0x559)]()/0x2)),_0x52188f=Math['max'](..._0x190b52[_0x167a0b(0xb9a)](_0x12d4c7=>_0x12d4c7[_0x167a0b(0x7eb)]()[_0x167a0b(0x4fd)]+_0x12d4c7[_0x167a0b(0x7eb)]()['mainSpriteWidth']()/0x2)),_0x54ecb9=Math[_0x167a0b(0x9d3)](..._0x190b52['map'](_0x577cfe=>_0x577cfe[_0x167a0b(0x7eb)]()[_0x167a0b(0x39a)]-_0x577cfe[_0x167a0b(0x7eb)]()['mainSpriteHeight']())),_0x27c2af=Math[_0x167a0b(0x483)](..._0x190b52['map'](_0x49faa6=>_0x49faa6['battler']()[_0x167a0b(0x39a)])),_0x3e9de3=_0x190b52['filter'](_0x4bf238=>_0x4bf238['isActor']())[_0x167a0b(0x187)],_0x3b5f5b=_0x190b52[_0x167a0b(0x742)](_0x543666=>_0x543666['isEnemy']())[_0x167a0b(0x187)];let _0x25444c=0x0,_0x2a9765=0x0;if(_0x1f8c98[_0x167a0b(0xb38)](/front/i))_0x25444c=_0x3e9de3>=_0x3b5f5b?_0x4b4559:_0x52188f;else{if(_0x1f8c98[_0x167a0b(0xb38)](/middle/i)){if(_0x167a0b(0x16c)===_0x167a0b(0x613)){const _0x4e1c4c=this[_0x167a0b(0x763)];_0x4e1c4c&&(_0x4e1c4c[_0x167a0b(0x2b2)]['x']=this['mainSpriteScaleX'](),_0x4e1c4c['scale']['y']=this[_0x167a0b(0x954)]());}else _0x25444c=(_0x4b4559+_0x52188f)/0x2,_0x1a9494=-0x1;}else _0x1f8c98[_0x167a0b(0xb38)](/back/i)&&(_0x25444c=_0x3e9de3>=_0x3b5f5b?_0x52188f:_0x4b4559);}if(_0x1f8c98[_0x167a0b(0xb38)](/head/i))_0x2a9765=_0x54ecb9;else{if(_0x1f8c98[_0x167a0b(0xb38)](/center/i))_0x2a9765=(_0x54ecb9+_0x27c2af)/0x2;else _0x1f8c98['match'](/base/i)&&(_0x2a9765=_0x27c2af);}if(!_0x159678)return;for(const _0x146199 of _0x4db092){if(!_0x146199)continue;let _0x3ee41b=_0x25444c,_0x2a838f=_0x2a9765;if(_0xaac93f[_0x167a0b(0xb38)](/none/i))'mapQY'===_0x167a0b(0xba0)?(_0x59a002[_0x167a0b(0x1f3)]['Game_Map_setupBattleback'][_0x167a0b(0x6a3)](this),this['setupBattlebackBattleCore']()):(_0x3ee41b+=_0x575a83,_0x2a838f+=_0x1976cc);else{if(_0xaac93f[_0x167a0b(0xb38)](/horz/i)&&_0xaac93f['match'](/vert/i))_0x3ee41b+=_0x146199[_0x167a0b(0x850)]()?-_0x575a83:_0x575a83,_0x2a838f+=_0x146199[_0x167a0b(0x850)]()?-_0x1976cc:_0x1976cc;else{if(_0xaac93f['match'](/horz/i))_0x3ee41b+=_0x146199['isActor']()?-_0x575a83:_0x575a83,_0x2a838f+=_0x1976cc;else _0xaac93f[_0x167a0b(0xb38)](/vert/i)&&('wcoNY'===_0x167a0b(0x592)?(_0x3ee41b+=_0x575a83,_0x2a838f+=_0x146199[_0x167a0b(0x850)]()?-_0x1976cc:_0x1976cc):(this[_0x167a0b(0xb11)]=this[_0x167a0b(0x9ec)]()['name'](),this[_0x167a0b(0x2ed)]()));}}_0x146199[_0x167a0b(0x17e)](_0x3ee41b,_0x2a838f,_0x400c16,_0x4e14fb,_0x297af5,_0x1a9494),_0x146199[_0x167a0b(0x93a)](_0x5833a9);}if(_0x4a8efc)_0x159678[_0x167a0b(0x2b3)](_0x167a0b(0x29e));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xcd2),_0xc909c8=>{const _0x651163=_0x397c95;if(!SceneManager[_0x651163(0x650)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x651163(0x5ff)](_0xc909c8,_0xc909c8);const _0x2d7f7a=VisuMZ[_0x651163(0x32b)](_0xc909c8[_0x651163(0x3b9)]);let _0x3e30b9=_0xc909c8['Direction'][_0x651163(0xb38)](/back/i);for(const _0x3c3d64 of _0x2d7f7a){if(!_0x3c3d64)continue;if(_0xc909c8['Direction'][_0x651163(0xb38)](/rand/i))_0x3e30b9=Math[_0x651163(0x541)](0x2);_0x3c3d64['setBattlerFlip'](!!_0x3e30b9);}}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],'ActSeq_Movement_FacePoint',_0x1fede6=>{const _0x2bfb89=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x2bfb89(0x5ff)](_0x1fede6,_0x1fede6);const _0x53634b=VisuMZ[_0x2bfb89(0x32b)](_0x1fede6[_0x2bfb89(0x3b9)]);let _0x58f8bb=_0x1fede6[_0x2bfb89(0x161)];const _0x23344e=_0x1fede6[_0x2bfb89(0x177)];for(const _0x311423 of _0x53634b){if(_0x2bfb89(0x295)==='aAIeA')return this[_0x2bfb89(0x130)]()&&!this[_0x2bfb89(0xbd5)]()?this['needsSelectionBattleCore']():_0x5da062[_0x2bfb89(0x1f3)][_0x2bfb89(0x7c3)][_0x2bfb89(0x6a3)](this);else{if(!_0x311423)continue;let _0x751bd6=_0x311423[_0x2bfb89(0x7eb)]()['_baseX'],_0x4d47d1=_0x311423[_0x2bfb89(0x7eb)]()[_0x2bfb89(0x39a)];if(_0x58f8bb[_0x2bfb89(0xb38)](/home/i))'IlKzq'!==_0x2bfb89(0x562)?(_0x751bd6=_0x311423['battler']()[_0x2bfb89(0x169)],_0x4d47d1=_0x311423['battler']()[_0x2bfb89(0x887)]):_0x10c5fa[_0x2bfb89(0x220)]=_0x5e3c5d(_0x4cc65e['$1'])[_0x2bfb89(0x27f)]()['trim']();else{if(_0x58f8bb[_0x2bfb89(0xb38)](/center/i)){if(_0x2bfb89(0x203)!==_0x2bfb89(0x423))_0x751bd6=Graphics[_0x2bfb89(0xb5d)]/0x2,_0x4d47d1=Graphics[_0x2bfb89(0xa9e)]/0x2;else return _0x5ce24b[_0x2bfb89(0x742)](_0x371495=>_0x371495!==_0x489149&&!_0x28c742[_0x2bfb89(0x932)](_0x371495)&&_0x371495[_0x2bfb89(0x40d)]());}else _0x58f8bb[_0x2bfb89(0xb38)](/point (\d+), (\d+)/i)&&(_0x751bd6=Number(RegExp['$1']),_0x4d47d1=Number(RegExp['$2']));}_0x311423[_0x2bfb89(0x448)](Math[_0x2bfb89(0x403)](_0x751bd6),Math[_0x2bfb89(0x403)](_0x4d47d1),!!_0x23344e);}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xb25),_0x498853=>{const _0x454309=_0x397c95;if(!SceneManager[_0x454309(0x650)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x498853,_0x498853);const _0x37271c=VisuMZ[_0x454309(0x32b)](_0x498853[_0x454309(0x4b8)]),_0x5cc198=VisuMZ[_0x454309(0x32b)](_0x498853[_0x454309(0x5e8)]),_0x5aff11=_0x5cc198[_0x454309(0xb9a)](_0x877d60=>_0x877d60&&_0x877d60[_0x454309(0x7eb)]()?_0x877d60['battler']()[_0x454309(0x4fd)]:0x0)/(_0x5cc198['length']||0x1),_0x4b8458=_0x5cc198[_0x454309(0xb9a)](_0x1b98b8=>_0x1b98b8&&_0x1b98b8[_0x454309(0x7eb)]()?_0x1b98b8[_0x454309(0x7eb)]()[_0x454309(0x39a)]:0x0)/(_0x5cc198['length']||0x1),_0x1e80cb=_0x498853[_0x454309(0x177)];for(const _0x1386ea of _0x37271c){if(!_0x1386ea)continue;_0x1386ea[_0x454309(0x448)](Math[_0x454309(0x403)](_0x5aff11),Math[_0x454309(0x403)](_0x4b8458),!!_0x1e80cb);}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Movement_Float',_0x3cbbbe=>{const _0x5cf7ea=_0x397c95;if(!SceneManager[_0x5cf7ea(0x650)]())return;VisuMZ[_0x5cf7ea(0x5ff)](_0x3cbbbe,_0x3cbbbe);const _0x53b6c7=$gameTemp[_0x5cf7ea(0xaeb)](),_0x164fa5=VisuMZ[_0x5cf7ea(0x32b)](_0x3cbbbe['Targets']),_0x2ff646=_0x3cbbbe[_0x5cf7ea(0xb8e)],_0x502ba1=_0x3cbbbe[_0x5cf7ea(0xafa)],_0x34b383=_0x3cbbbe['EasingType'],_0x4b26a1=_0x3cbbbe[_0x5cf7ea(0x8f3)];if(!_0x53b6c7)return;for(const _0x1acaa6 of _0x164fa5){if(!_0x1acaa6)continue;_0x1acaa6[_0x5cf7ea(0x4e9)](_0x2ff646,_0x502ba1,_0x34b383);}if(_0x4b26a1)_0x53b6c7['setWaitMode'](_0x5cf7ea(0x7f6));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x462),_0x1aa997=>{const _0x42373d=_0x397c95;if(!SceneManager[_0x42373d(0x650)]())return;VisuMZ[_0x42373d(0x5ff)](_0x1aa997,_0x1aa997);const _0x1deb1e=$gameTemp[_0x42373d(0xaeb)]();if(!_0x1deb1e)return;const _0x5d8f15=VisuMZ[_0x42373d(0x32b)](_0x1aa997[_0x42373d(0x3b9)]);for(const _0x3d2c3a of _0x5d8f15){if(!_0x3d2c3a)continue;_0x3d2c3a[_0x42373d(0xa56)]();}BattleManager['_subject']&&(_0x42373d(0xacb)!==_0x42373d(0xb59)?BattleManager[_0x42373d(0x127)][_0x42373d(0x8cb)]():_0x387b24=_0x1715e8>=_0x3d5bf9?_0x4489ba:_0x5228f7);if(_0x1aa997[_0x42373d(0x9cf)])_0x1deb1e[_0x42373d(0x2b3)](_0x42373d(0x29e));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xa3d),_0x46641c=>{const _0x37e89f=_0x397c95;if(!SceneManager[_0x37e89f(0x650)]())return;VisuMZ[_0x37e89f(0x5ff)](_0x46641c,_0x46641c);const _0x23cf87=$gameTemp['getLastPluginCommandInterpreter'](),_0x3f626f=VisuMZ['CreateActionSequenceTargets'](_0x46641c[_0x37e89f(0x3b9)]),_0x519d4e=_0x46641c[_0x37e89f(0xb8e)],_0x14d0bf=_0x46641c['Duration'],_0x4d8e47=_0x46641c['WaitForJump'];if(!_0x23cf87)return;for(const _0x383ce4 of _0x3f626f){if(!_0x383ce4)continue;_0x383ce4[_0x37e89f(0x838)](_0x519d4e,_0x14d0bf);}if(_0x4d8e47)_0x23cf87['setWaitMode']('battleJump');}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x6b5),_0x4ee466=>{const _0x48d2ba=_0x397c95;if(!SceneManager[_0x48d2ba(0x650)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x48d2ba(0x5ff)](_0x4ee466,_0x4ee466);const _0x528daf=$gameTemp[_0x48d2ba(0xaeb)](),_0x31d94e=VisuMZ[_0x48d2ba(0x32b)](_0x4ee466['Targets']),_0x488739=_0x4ee466[_0x48d2ba(0xbc3)],_0x43cf0d=_0x4ee466[_0x48d2ba(0x3c8)],_0x326bd3=_0x4ee466[_0x48d2ba(0x2da)],_0x388093=_0x4ee466[_0x48d2ba(0xafa)],_0x3a5bc9=_0x4ee466[_0x48d2ba(0x794)],_0x331901=_0x4ee466[_0x48d2ba(0x729)],_0xc0d546=_0x4ee466[_0x48d2ba(0xaca)],_0x5540cb=_0x4ee466[_0x48d2ba(0x9cf)];if(!_0x528daf)return;for(const _0x543a2c of _0x31d94e){if(_0x48d2ba(0xcf0)!==_0x48d2ba(0xcf0))_0x33bfc1[_0x48d2ba(0x6cf)]['initialize'][_0x48d2ba(0x6a3)](this,_0x1eff40),this['scale']['x']=-0x1,this[_0x48d2ba(0xb6e)][_0x48d2ba(0x2b2)]['x']=-0x1;else{if(!_0x543a2c)continue;let _0x2761cf=_0x43cf0d,_0x3992db=_0x326bd3;if(_0x488739[_0x48d2ba(0xb38)](/horz/i))_0x2761cf*=_0x543a2c[_0x48d2ba(0x850)]()?-0x1:0x1;if(_0x488739[_0x48d2ba(0xb38)](/vert/i))_0x3992db*=_0x543a2c['isActor']()?-0x1:0x1;_0x543a2c[_0x48d2ba(0xcd4)](_0x2761cf,_0x3992db,_0x388093,_0x3a5bc9,_0x331901),_0x543a2c[_0x48d2ba(0x93a)](_0xc0d546);}}if(_0x5540cb)_0x528daf['setWaitMode'](_0x48d2ba(0x29e));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x2f7),_0x4ccfef=>{const _0x4edb7a=_0x397c95;if(!SceneManager[_0x4edb7a(0x650)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4edb7a(0x5ff)](_0x4ccfef,_0x4ccfef);const _0x2a585a=$gameTemp[_0x4edb7a(0xaeb)](),_0x2aece9=VisuMZ[_0x4edb7a(0x32b)](_0x4ccfef['Targets']),_0x77c493=_0x4ccfef['Destination'],_0x1299ba=_0x4ccfef[_0x4edb7a(0x780)],_0x3fe656=_0x4ccfef[_0x4edb7a(0x5c1)],_0x5cb313=_0x4ccfef[_0x4edb7a(0xd03)],_0x3b6f25=_0x4ccfef['Duration'],_0x32cac9=_0x4ccfef['FaceDirection'],_0x1a33f6=_0x4ccfef[_0x4edb7a(0x729)],_0x302bae=_0x4ccfef['MotionType'],_0x59726e=_0x4ccfef[_0x4edb7a(0x9cf)];if(!_0x2a585a)return;for(const _0x2da708 of _0x2aece9){if(!_0x2da708)continue;let _0x15d25b=_0x2da708[_0x4edb7a(0x7eb)]()['_baseX'],_0x58744b=_0x2da708[_0x4edb7a(0x7eb)]()[_0x4edb7a(0x39a)];if(_0x77c493[_0x4edb7a(0xb38)](/home/i))_0x15d25b=_0x2da708[_0x4edb7a(0x7eb)]()[_0x4edb7a(0x169)],_0x58744b=_0x2da708[_0x4edb7a(0x7eb)]()[_0x4edb7a(0x887)];else{if(_0x77c493['match'](/center/i))'ywcXb'===_0x4edb7a(0x68e)?(_0x15d25b=Graphics[_0x4edb7a(0xb5d)]/0x2,_0x58744b=Graphics[_0x4edb7a(0xa9e)]/0x2):_0x4a9905[_0x4edb7a(0x3f6)]()[_0x4edb7a(0x91a)]()&&(this[_0x4edb7a(0x4da)](_0x4edb7a(0x293)),this[_0x4edb7a(0x7cb)](_0x98f363),this[_0x4edb7a(0xbf4)](_0x27457d),this[_0x4edb7a(0x4da)](_0x4edb7a(0x988)));else _0x77c493['match'](/point (\d+), (\d+)/i)&&(_0x4edb7a(0xcf1)==='NXEYb'?(_0x15d25b=Number(RegExp['$1']),_0x58744b=Number(RegExp['$2'])):_0x5ee0a2[_0x4edb7a(0x2b3)](_0x4edb7a(0x7e8)));}if(_0x1299ba[_0x4edb7a(0xb38)](/none/i))_0x15d25b+=_0x3fe656,_0x58744b+=_0x5cb313;else{if(_0x1299ba[_0x4edb7a(0xb38)](/horz/i)&&_0x1299ba[_0x4edb7a(0xb38)](/vert/i))_0x15d25b+=_0x2da708[_0x4edb7a(0x850)]()?-_0x3fe656:_0x3fe656,_0x58744b+=_0x2da708['isActor']()?-_0x5cb313:_0x5cb313;else{if(_0x1299ba['match'](/horz/i))_0x15d25b+=_0x2da708[_0x4edb7a(0x850)]()?-_0x3fe656:_0x3fe656,_0x58744b+=_0x5cb313;else _0x1299ba[_0x4edb7a(0xb38)](/vert/i)&&(_0x4edb7a(0x771)===_0x4edb7a(0x8d4)?_0x28916d=_0x4edb7a(0x4d5):(_0x15d25b+=_0x3fe656,_0x58744b+=_0x2da708[_0x4edb7a(0x850)]()?-_0x5cb313:_0x5cb313));}}_0x2da708[_0x4edb7a(0x27d)](_0x15d25b,_0x58744b,_0x3b6f25,_0x32cac9,_0x1a33f6,-0x1),_0x2da708[_0x4edb7a(0x93a)](_0x302bae);}if(_0x59726e)_0x2a585a[_0x4edb7a(0x2b3)](_0x4edb7a(0x29e));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],'ActSeq_Movement_MoveToTarget',_0x2b1d6c=>{const _0x1a4f8e=_0x397c95;if(!SceneManager[_0x1a4f8e(0x650)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x2b1d6c,_0x2b1d6c);const _0x3aa0b5=$gameTemp[_0x1a4f8e(0xaeb)](),_0x2cf713=VisuMZ[_0x1a4f8e(0x32b)](_0x2b1d6c[_0x1a4f8e(0x4b8)]),_0x240eaf=VisuMZ[_0x1a4f8e(0x32b)](_0x2b1d6c[_0x1a4f8e(0x5e8)]),_0x30d89b=_0x2b1d6c[_0x1a4f8e(0x8ad)];let _0x94bd5b=_0x2b1d6c[_0x1a4f8e(0x3e0)];const _0x1275fc=_0x2b1d6c[_0x1a4f8e(0x780)],_0x574182=_0x2b1d6c[_0x1a4f8e(0x5c1)],_0x530216=_0x2b1d6c[_0x1a4f8e(0xd03)],_0x260f1d=_0x2b1d6c['Duration'],_0x4a3122=_0x2b1d6c[_0x1a4f8e(0x794)],_0x26be6b=_0x2b1d6c[_0x1a4f8e(0x729)],_0x5b6d67=_0x2b1d6c[_0x1a4f8e(0xaca)],_0x13f2cf=_0x2b1d6c['WaitForMovement'],_0x56027d=Math['min'](..._0x240eaf[_0x1a4f8e(0xb9a)](_0x3713f7=>_0x3713f7[_0x1a4f8e(0x7eb)]()[_0x1a4f8e(0x4fd)]-_0x3713f7[_0x1a4f8e(0x7eb)]()[_0x1a4f8e(0x559)]()/0x2)),_0x15cb0c=Math[_0x1a4f8e(0x483)](..._0x240eaf[_0x1a4f8e(0xb9a)](_0x8be21b=>_0x8be21b['battler']()[_0x1a4f8e(0x4fd)]+_0x8be21b['battler']()[_0x1a4f8e(0x559)]()/0x2)),_0x5b3fdd=Math[_0x1a4f8e(0x9d3)](..._0x240eaf[_0x1a4f8e(0xb9a)](_0x20f64f=>_0x20f64f[_0x1a4f8e(0x7eb)]()[_0x1a4f8e(0x39a)]-_0x20f64f[_0x1a4f8e(0x7eb)]()[_0x1a4f8e(0xc37)]())),_0x295474=Math[_0x1a4f8e(0x483)](..._0x240eaf[_0x1a4f8e(0xb9a)](_0x31033d=>_0x31033d['battler']()[_0x1a4f8e(0x39a)])),_0x171730=_0x240eaf[_0x1a4f8e(0x742)](_0x470822=>_0x470822[_0x1a4f8e(0x850)]())[_0x1a4f8e(0x187)],_0x19f742=_0x240eaf[_0x1a4f8e(0x742)](_0x3f0824=>_0x3f0824['isEnemy']())[_0x1a4f8e(0x187)];let _0x22d595=0x0,_0x3c3b33=0x0;if(_0x30d89b[_0x1a4f8e(0xb38)](/front/i))_0x22d595=_0x171730>=_0x19f742?_0x56027d:_0x15cb0c;else{if(_0x30d89b['match'](/middle/i))_0x22d595=(_0x56027d+_0x15cb0c)/0x2,_0x94bd5b=-0x1;else{if(_0x30d89b['match'](/back/i)){if(_0x1a4f8e(0xbc7)===_0x1a4f8e(0xbc7))_0x22d595=_0x171730>=_0x19f742?_0x15cb0c:_0x56027d;else{if(!_0x1633ac['isSceneBattle']())return;if(!_0x51ecec[_0x1a4f8e(0x440)])return;_0xd00e2b[_0x1a4f8e(0x3cc)]=!![];}}}}if(_0x30d89b[_0x1a4f8e(0xb38)](/head/i))_0x3c3b33=_0x5b3fdd;else{if(_0x30d89b[_0x1a4f8e(0xb38)](/center/i))_0x3c3b33=(_0x5b3fdd+_0x295474)/0x2;else _0x30d89b['match'](/base/i)&&(_0x3c3b33=_0x295474);}if(!_0x3aa0b5)return;for(const _0x382ed6 of _0x2cf713){if(!_0x382ed6)continue;let _0x5c2a61=_0x22d595,_0x525fa9=_0x3c3b33;if(_0x1275fc['match'](/none/i))_0x1a4f8e(0x35a)===_0x1a4f8e(0xbd8)?(_0xdb20eb=(_0x446b25+_0x2198b0)/0x2,_0x549d03=-0x1):(_0x5c2a61+=_0x574182,_0x525fa9+=_0x530216);else{if(_0x1275fc[_0x1a4f8e(0xb38)](/horz/i)&&_0x1275fc[_0x1a4f8e(0xb38)](/vert/i))_0x5c2a61+=_0x382ed6['isActor']()?-_0x574182:_0x574182,_0x525fa9+=_0x382ed6[_0x1a4f8e(0x850)]()?-_0x530216:_0x530216;else{if(_0x1275fc[_0x1a4f8e(0xb38)](/horz/i))_0x5c2a61+=_0x382ed6[_0x1a4f8e(0x850)]()?-_0x574182:_0x574182,_0x525fa9+=_0x530216;else _0x1275fc['match'](/vert/i)&&(_0x5c2a61+=_0x574182,_0x525fa9+=_0x382ed6['isActor']()?-_0x530216:_0x530216);}}_0x382ed6['moveBattlerToPoint'](_0x5c2a61,_0x525fa9,_0x260f1d,_0x4a3122,_0x26be6b,_0x94bd5b),_0x382ed6[_0x1a4f8e(0x93a)](_0x5b6d67);}if(_0x13f2cf)_0x3aa0b5[_0x1a4f8e(0x2b3)](_0x1a4f8e(0x29e));}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],'ActSeq_Movement_Opacity',_0x19c036=>{const _0x502384=_0x397c95;if(!SceneManager[_0x502384(0x650)]())return;VisuMZ['ConvertParams'](_0x19c036,_0x19c036);const _0xc4b3d=$gameTemp[_0x502384(0xaeb)](),_0x599649=VisuMZ['CreateActionSequenceTargets'](_0x19c036[_0x502384(0x3b9)]),_0x2b25ce=_0x19c036[_0x502384(0x197)],_0x1b5d5a=_0x19c036[_0x502384(0xafa)],_0x4f0ce6=_0x19c036['EasingType'],_0x4866e4=_0x19c036[_0x502384(0x1c3)];if(!_0xc4b3d)return;for(const _0x3bc9c1 of _0x599649){if('tOFJh'!==_0x502384(0x277))return this['battlerSprites']()[_0x502384(0x4f0)](_0x226b84=>_0x226b84[_0x502384(0x32e)]());else{if(!_0x3bc9c1)continue;_0x3bc9c1[_0x502384(0x724)](_0x2b25ce,_0x1b5d5a,_0x4f0ce6);}}if(_0x4866e4)_0xc4b3d[_0x502384(0x2b3)](_0x502384(0x531));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x329),_0x432b60=>{const _0x36077a=_0x397c95;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x36077a(0x5ff)](_0x432b60,_0x432b60);const _0x239d8d=$gameTemp['getLastPluginCommandInterpreter'](),_0x3ed8f5=VisuMZ[_0x36077a(0x32b)](_0x432b60[_0x36077a(0x3b9)]),_0x4706be=_0x432b60[_0x36077a(0x6e5)],_0x2885b2=_0x432b60[_0x36077a(0x1b1)],_0x95d438=_0x432b60['Duration'],_0x376425=_0x432b60[_0x36077a(0x729)],_0x5a5b5d=_0x432b60['WaitForScale'];if(!_0x239d8d)return;for(const _0x5c6f64 of _0x3ed8f5){if(!_0x5c6f64)continue;_0x5c6f64[_0x36077a(0x46b)](_0x4706be,_0x2885b2,_0x95d438,_0x376425);}if(_0x5a5b5d)_0x239d8d[_0x36077a(0x2b3)](_0x36077a(0x236));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xcb8),_0x45dc5c=>{const _0x43f116=_0x397c95;if(!SceneManager[_0x43f116(0x650)]())return;VisuMZ[_0x43f116(0x5ff)](_0x45dc5c,_0x45dc5c);const _0x338620=$gameTemp[_0x43f116(0xaeb)](),_0x212a49=VisuMZ[_0x43f116(0x32b)](_0x45dc5c[_0x43f116(0x3b9)]),_0x57a6a1=_0x45dc5c[_0x43f116(0x35c)],_0x50777c=_0x45dc5c['SkewY'],_0x45c7c7=_0x45dc5c[_0x43f116(0xafa)],_0x4cc1c0=_0x45dc5c[_0x43f116(0x729)],_0x2937ab=_0x45dc5c['WaitForSkew'];if(!_0x338620)return;for(const _0x14ea98 of _0x212a49){if(!_0x14ea98)continue;_0x14ea98['skewBattler'](_0x57a6a1,_0x50777c,_0x45c7c7,_0x4cc1c0);}if(_0x2937ab)_0x338620[_0x43f116(0x2b3)](_0x43f116(0x759));}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],'ActSeq_Movement_Spin',_0x4b2837=>{const _0x1de5b0=_0x397c95;if(!SceneManager[_0x1de5b0(0x650)]())return;VisuMZ[_0x1de5b0(0x5ff)](_0x4b2837,_0x4b2837);const _0x3b68e3=$gameTemp[_0x1de5b0(0xaeb)](),_0x2ad9ad=VisuMZ[_0x1de5b0(0x32b)](_0x4b2837[_0x1de5b0(0x3b9)]),_0x385492=_0x4b2837[_0x1de5b0(0x6f0)],_0x225452=_0x4b2837['Duration'],_0x4abac7=_0x4b2837[_0x1de5b0(0x729)],_0x43ad90=_0x4b2837['RevertAngle'],_0x47ec3b=_0x4b2837[_0x1de5b0(0x2bb)];if(!_0x3b68e3)return;for(const _0x3800c3 of _0x2ad9ad){if(!_0x3800c3)continue;_0x3800c3[_0x1de5b0(0x229)](_0x385492,_0x225452,_0x4abac7,_0x43ad90);}if(_0x47ec3b)_0x3b68e3[_0x1de5b0(0x2b3)]('battleSpin');}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x342),_0x2b4e54=>{const _0x20d960=_0x397c95;if(!SceneManager[_0x20d960(0x650)]())return;const _0x4b7cca=$gameTemp[_0x20d960(0xaeb)]();if(!_0x4b7cca)return;_0x4b7cca['setWaitMode'](_0x20d960(0x7f6));}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x87c),_0x372e6e=>{const _0x17ae1a=_0x397c95;if(!SceneManager[_0x17ae1a(0x650)]())return;const _0x2a7506=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2a7506)return;_0x2a7506[_0x17ae1a(0x2b3)](_0x17ae1a(0x990));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x9d4),_0x3dbf84=>{const _0xc9bd64=_0x397c95;if(!SceneManager[_0xc9bd64(0x650)]())return;const _0x3ff832=$gameTemp[_0xc9bd64(0xaeb)]();if(!_0x3ff832)return;_0x3ff832['setWaitMode'](_0xc9bd64(0x29e));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xc84),_0x42e7cf=>{const _0x3e13dc=_0x397c95;if(!SceneManager['isSceneBattle']())return;const _0x58f72a=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x58f72a)return;_0x58f72a['setWaitMode'](_0x3e13dc(0x531));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x704),_0x4dc6cd=>{const _0x51d7a0=_0x397c95;if(!SceneManager[_0x51d7a0(0x650)]())return;const _0x445e20=$gameTemp[_0x51d7a0(0xaeb)]();if(!_0x445e20)return;_0x445e20[_0x51d7a0(0x2b3)](_0x51d7a0(0x236));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x701),_0x9a93d2=>{const _0x4cf117=_0x397c95;if(!SceneManager[_0x4cf117(0x650)]())return;const _0x1ab87c=$gameTemp[_0x4cf117(0xaeb)]();if(!_0x1ab87c)return;_0x1ab87c['setWaitMode']('battleSpriteSkew');}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x2f4),_0x444fc9=>{const _0x2bfe4d=_0x397c95;if(!SceneManager[_0x2bfe4d(0x650)]())return;const _0x1f8a08=$gameTemp[_0x2bfe4d(0xaeb)]();if(!_0x1f8a08)return;_0x1f8a08['setWaitMode']('battleSpin');}),PluginManager[_0x397c95(0x14e)](pluginData['name'],'ActSeq_Projectile_Animation',_0x2ac3b6=>{const _0x5361ed=_0x397c95;if(!SceneManager[_0x5361ed(0x650)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ['ConvertParams'](_0x2ac3b6,_0x2ac3b6);const _0x2eeb93=$gameTemp[_0x5361ed(0xaeb)](),_0x797d85=_0x2ac3b6[_0x5361ed(0x6a6)];if(!_0x2eeb93)return;const _0x3e0450=BattleManager['_spriteset'];if(!_0x3e0450)return;_0x3e0450[_0x5361ed(0x686)](_0x2ac3b6);if(_0x797d85)_0x2eeb93[_0x5361ed(0x2b3)](_0x5361ed(0x733));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xb8a),_0x29caf6=>{const _0xf2619=_0x397c95;if(!SceneManager[_0xf2619(0x650)]())return;if(!Imported[_0xf2619(0xa2a)])return;VisuMZ[_0xf2619(0x5ff)](_0x29caf6,_0x29caf6);const _0x589321=$gameTemp['getLastPluginCommandInterpreter'](),_0x32436b=_0x29caf6['WaitForProjectile'];if(!_0x589321)return;const _0x2d9323=BattleManager[_0xf2619(0x69b)];if(!_0x2d9323)return;_0x2d9323[_0xf2619(0x686)](_0x29caf6);if(_0x32436b)_0x589321[_0xf2619(0x2b3)]('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x56e),_0x18d55c=>{const _0xa951a=_0x397c95;if(!SceneManager[_0xa951a(0x650)]())return;if(!Imported[_0xa951a(0xa2a)])return;VisuMZ['ConvertParams'](_0x18d55c,_0x18d55c);const _0x864c5b=$gameTemp['getLastPluginCommandInterpreter'](),_0x24b856=_0x18d55c[_0xa951a(0x6a6)];if(!_0x864c5b)return;const _0x338f63=BattleManager[_0xa951a(0x69b)];if(!_0x338f63)return;_0x338f63[_0xa951a(0x686)](_0x18d55c);if(_0x24b856)_0x864c5b[_0xa951a(0x2b3)](_0xa951a(0x733));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x29d),_0x1e68ef=>{const _0x316837=_0x397c95;if(!SceneManager[_0x316837(0x650)]())return;if(!Imported[_0x316837(0x35e)])return;VisuMZ['ConvertParams'](_0x1e68ef,_0x1e68ef);const _0x79cede=$gameTemp['getLastPluginCommandInterpreter'](),_0x30b897=_0x1e68ef['WaitForSkew'];if(!_0x79cede)return;$gameScreen[_0x316837(0x253)](_0x1e68ef['SkewX'],_0x1e68ef[_0x316837(0xa87)],_0x1e68ef[_0x316837(0xafa)],_0x1e68ef[_0x316837(0x729)]);if(_0x30b897)_0x79cede[_0x316837(0x2b3)](_0x316837(0x8fb));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0xaad),_0x291160=>{const _0x548824=_0x397c95;if(!SceneManager[_0x548824(0x650)]())return;if(!Imported[_0x548824(0x35e)])return;VisuMZ[_0x548824(0x5ff)](_0x291160,_0x291160);const _0x236382=$gameTemp[_0x548824(0xaeb)](),_0x12a022=_0x291160[_0x548824(0x1df)];if(!_0x236382)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x291160[_0x548824(0xafa)],_0x291160[_0x548824(0x729)]);if(_0x12a022)_0x236382['setWaitMode'](_0x548824(0x8fb));}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0xa97),_0x157467=>{const _0x337f00=_0x397c95;if(!SceneManager[_0x337f00(0x650)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3b593b=$gameTemp[_0x337f00(0xaeb)]();if(!_0x3b593b)return;_0x3b593b['setWaitMode'](_0x337f00(0x8fb));}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0x9fe),_0x2c6dab=>{const _0xe30300=_0x397c95;if(!SceneManager[_0xe30300(0x650)]())return;VisuMZ['ConvertParams'](_0x2c6dab,_0x2c6dab);const _0x26c17e=$gameTemp[_0xe30300(0xaeb)](),_0x471469=_0x2c6dab['Index'],_0x3e0bfd=_0x2c6dab[_0xe30300(0x44d)];if(!_0x26c17e)return;BattleManager['_targetIndex']=_0x471469,BattleManager[_0xe30300(0x227)]=BattleManager[_0xe30300(0xc3d)]?BattleManager[_0xe30300(0xc3d)][BattleManager[_0xe30300(0xafb)]]||null:null,BattleManager[_0xe30300(0x227)]&&_0x3e0bfd[_0xe30300(0x27f)]()['trim']()!==_0xe30300(0xb7f)&&_0x26c17e['command119']([_0x3e0bfd]);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x87e),_0x22aac4=>{const _0x1340a5=_0x397c95;if(!SceneManager[_0x1340a5(0x650)]())return;VisuMZ[_0x1340a5(0x5ff)](_0x22aac4,_0x22aac4);const _0x5108cb=$gameTemp['getLastPluginCommandInterpreter'](),_0x8bf75=_0x22aac4[_0x1340a5(0x44d)];if(!_0x5108cb)return;BattleManager[_0x1340a5(0xafb)]++,BattleManager[_0x1340a5(0x227)]=BattleManager['_allTargets'][BattleManager[_0x1340a5(0xafb)]]||null,BattleManager[_0x1340a5(0x227)]&&_0x8bf75[_0x1340a5(0x27f)]()[_0x1340a5(0xb34)]()!==_0x1340a5(0xb7f)&&_0x5108cb['command119']([_0x8bf75]);}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x372),_0x51a657=>{const _0x5e870b=_0x397c95;if(!SceneManager[_0x5e870b(0x650)]())return;VisuMZ[_0x5e870b(0x5ff)](_0x51a657,_0x51a657);const _0x2c06e3=$gameTemp[_0x5e870b(0xaeb)](),_0x62573c=_0x51a657[_0x5e870b(0x44d)];if(!_0x2c06e3)return;BattleManager['_targetIndex']--,BattleManager[_0x5e870b(0x227)]=BattleManager['_allTargets'][BattleManager[_0x5e870b(0xafb)]]||null,BattleManager[_0x5e870b(0x227)]&&_0x62573c[_0x5e870b(0x27f)]()[_0x5e870b(0xb34)]()!==_0x5e870b(0xb7f)&&('pZvGT'!=='LBLbn'?_0x2c06e3[_0x5e870b(0x3b7)]([_0x62573c]):this[_0x5e870b(0x263)][_0x5e870b(0x60e)]['smooth']!==this[_0x5e870b(0xcfb)]['battlerSmoothImage']()&&(this[_0x5e870b(0x263)]['bitmap'][_0x5e870b(0x6bc)]=this[_0x5e870b(0xcfb)][_0x5e870b(0x802)]()));}),PluginManager['registerCommand'](pluginData[_0x397c95(0xa29)],_0x397c95(0x1db),_0x59c473=>{const _0x11dcce=_0x397c95;if(!SceneManager[_0x11dcce(0x650)]())return;VisuMZ[_0x11dcce(0x5ff)](_0x59c473,_0x59c473);const _0x136e65=$gameTemp[_0x11dcce(0xaeb)](),_0x5f5669=_0x59c473[_0x11dcce(0x20c)],_0x161ae7=_0x59c473['JumpToLabel'];if(!_0x136e65)return;const _0x2e400d=BattleManager[_0x11dcce(0xafb)];for(;;){if(_0x11dcce(0x852)===_0x11dcce(0xa59))_0x3ea3c4[_0x11dcce(0x6cf)][_0x11dcce(0x918)][_0x11dcce(0x6a3)](this,_0x167f4b),this[_0x11dcce(0xbf1)](this[_0x11dcce(0xb58)]()),this[_0x11dcce(0x2ed)]();else{BattleManager[_0x11dcce(0xafb)]=Math[_0x11dcce(0x541)](BattleManager[_0x11dcce(0xc3d)]['length']);if(!_0x5f5669)break;if(BattleManager[_0x11dcce(0xafb)]!==_0x2e400d)break;if(BattleManager['_allTargets']['length']<=0x1){BattleManager[_0x11dcce(0xafb)]=0x0;break;}}}BattleManager[_0x11dcce(0x227)]=BattleManager[_0x11dcce(0xc3d)][BattleManager[_0x11dcce(0xafb)]]||null,BattleManager['_target']&&_0x161ae7['toUpperCase']()['trim']()!=='UNTITLED'&&_0x136e65['command119']([_0x161ae7]);}),PluginManager[_0x397c95(0x14e)](pluginData['name'],_0x397c95(0x93c),_0x42da5a=>{const _0x9f4677=_0x397c95;if(!SceneManager[_0x9f4677(0x650)]())return;VisuMZ[_0x9f4677(0x5ff)](_0x42da5a,_0x42da5a);const _0x3cefc8=VisuMZ[_0x9f4677(0x32b)](_0x42da5a[_0x9f4677(0x3b9)]);for(const _0x5cf4a0 of _0x3cefc8){if(!_0x5cf4a0)continue;if(!_0x5cf4a0[_0x9f4677(0x850)]())continue;_0x5cf4a0[_0x9f4677(0x62d)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0x373),_0x352005=>{const _0x4630d4=_0x397c95;if(!SceneManager[_0x4630d4(0x650)]())return;VisuMZ[_0x4630d4(0x5ff)](_0x352005,_0x352005);const _0x36e6a1=$gameTemp[_0x4630d4(0xaeb)]();let _0x2c5c14=![];const _0x4f82d9=_0x352005['JumpToLabel'],_0x190051=VisuMZ[_0x4630d4(0x32b)](_0x352005[_0x4630d4(0x3b9)]);for(const _0x3c80b8 of _0x190051){if(_0x4630d4(0x244)!=='VWJIJ')return this['_isBattlerFlipped'];else{if(!_0x3c80b8)continue;if(!_0x3c80b8['isActor']())continue;_0x3c80b8[_0x4630d4(0x8c5)]();if(_0x3c80b8[_0x4630d4(0x51d)]()[_0x4630d4(0x187)]>0x0){if('qZQXo'!=='qZQXo'){if(!this[_0x4630d4(0xb78)]())return;if(_0x250c97<=0x0)return;this[_0x4630d4(0xa34)]=_0x1ac4d6,this[_0x4630d4(0x179)]=_0x1bc0d5,this[_0x4630d4(0x9dc)]=_0x254a1b;}else _0x2c5c14=!![];}else _0x3c80b8[_0x4630d4(0x62d)]();}}if(_0x2c5c14&&_0x4f82d9['toUpperCase']()['trim']()!==_0x4630d4(0xb7f)){if(_0x4630d4(0x7d6)===_0x4630d4(0x7d6))_0x36e6a1[_0x4630d4(0x3b7)]([_0x4f82d9]);else{if(this['_targetBattlerKey']===_0x4630d4(0x79f))return![];if(this[_0x4630d4(0x512)]==='all\x20enemies')return!![];return this[_0x4630d4(0x130)]()&&!this[_0x4630d4(0xbd5)]()?this[_0x4630d4(0x3a9)]():_0x1e5b8d[_0x4630d4(0x1f3)][_0x4630d4(0x1e7)]['call'](this);}}}),PluginManager['registerCommand'](pluginData['name'],_0x397c95(0x639),_0x4d7fb6=>{const _0xcd2806=_0x397c95;if(!SceneManager[_0xcd2806(0x650)]())return;VisuMZ[_0xcd2806(0x5ff)](_0x4d7fb6,_0x4d7fb6);let _0x34c2c2=_0x4d7fb6[_0xcd2806(0x42c)];_0x34c2c2--,_0x34c2c2=Math[_0xcd2806(0x483)](_0x34c2c2,0x0);const _0x380615=VisuMZ[_0xcd2806(0x32b)](_0x4d7fb6[_0xcd2806(0x3b9)]);for(const _0x16729e of _0x380615){if(_0xcd2806(0xb63)!==_0xcd2806(0xc1b)){if(!_0x16729e)continue;if(!_0x16729e['isActor']())continue;_0x16729e['setActiveWeaponSlot'](_0x34c2c2);}else{if(_0x150641[_0xcd2806(0x74c)]()[_0xcd2806(0x542)]>0x0)return!![];this[_0xcd2806(0x13c)]='';}}}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x28f),_0x5d0462=>{const _0x5b14b3=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5b14b3(0x35e)])return;VisuMZ['ConvertParams'](_0x5d0462,_0x5d0462);const _0x5e1bab=$gameTemp['getLastPluginCommandInterpreter'](),_0x86cec1=_0x5d0462['WaitForZoom'];if(!_0x5e1bab)return;$gameScreen[_0x5b14b3(0x743)](_0x5d0462[_0x5b14b3(0x908)],_0x5d0462['Duration'],_0x5d0462[_0x5b14b3(0x729)]);if(_0x86cec1)_0x5e1bab[_0x5b14b3(0x2b3)](_0x5b14b3(0x82b));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],_0x397c95(0x1a4),_0x1e9802=>{const _0x3a35c5=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3a35c5(0x35e)])return;VisuMZ[_0x3a35c5(0x5ff)](_0x1e9802,_0x1e9802);const _0x457364=$gameTemp[_0x3a35c5(0xaeb)](),_0x3d9d21=_0x1e9802[_0x3a35c5(0x82f)];if(!_0x457364)return;$gameScreen[_0x3a35c5(0x743)](0x1,_0x1e9802[_0x3a35c5(0xafa)],_0x1e9802[_0x3a35c5(0x729)]);if(_0x3d9d21)_0x457364[_0x3a35c5(0x2b3)](_0x3a35c5(0x82b));}),PluginManager[_0x397c95(0x14e)](pluginData[_0x397c95(0xa29)],'ActSeq_Zoom_WaitForZoom',_0x4cbdd8=>{const _0x31b312=_0x397c95;if(!SceneManager[_0x31b312(0x650)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x331ff6=$gameTemp[_0x31b312(0xaeb)]();if(!_0x331ff6)return;_0x331ff6[_0x31b312(0x2b3)](_0x31b312(0x82b));}),VisuMZ['BattleCore'][_0x397c95(0xa61)]=Scene_Boot[_0x397c95(0x6cf)]['onDatabaseLoaded'],Scene_Boot[_0x397c95(0x6cf)][_0x397c95(0x654)]=function(){const _0x465701=_0x397c95;this[_0x465701(0x9ee)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x465701(0x3e8)](),this[_0x465701(0x3d7)](),VisuMZ[_0x465701(0x1f3)][_0x465701(0xa61)]['call'](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x465701(0x8b7)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x465701(0x8f0)]();},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Notetags']=function(){const _0x452938=_0x397c95;if(VisuMZ['ParseAllNotetags'])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x452938(0xba9)]();},Scene_Boot[_0x397c95(0x6cf)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x45762b=_0x397c95,_0x3be4b0=$dataSystem['weaponTypes'][_0x45762b(0x187)];for(let _0x5d469e=0x0;_0x5d469e<_0x3be4b0;_0x5d469e++){if(_0x45762b(0x364)===_0x45762b(0x364)){const _0x3d6cdf=$dataSystem['attackMotions'][_0x5d469e];if(_0x3d6cdf)continue;$dataSystem['attackMotions'][_0x5d469e]={'type':0x1,'weaponImageId':0x1};}else{if(!_0x493a1e[_0x45762b(0x650)]())return;if(!_0x45395d['VisuMZ_1_ElementStatusCore'])return;_0xed4f30[_0x45762b(0x5ff)](_0x2678ca,_0x535e62);const _0x342065=_0x4af96f[_0x45762b(0x183)],_0x2830ab=_0x3fdabb[_0x45762b(0xc83)];if(!_0x342065)return;_0x342065[_0x45762b(0x22c)]=_0x2830ab;}}},Scene_Boot[_0x397c95(0x6cf)][_0x397c95(0xad6)]=function(){const _0x1027e4=_0x397c95,_0x149292=VisuMZ[_0x1027e4(0x1f3)][_0x1027e4(0x716)];_0x149292[_0x1027e4(0x7a6)][_0x1027e4(0x8ed)]===undefined&&(_0x149292[_0x1027e4(0x7a6)][_0x1027e4(0x8ed)]='base'),_0x149292[_0x1027e4(0xc24)][_0x1027e4(0x94a)]===undefined&&(_0x149292['Actor']['SmoothImage']=![]),_0x149292['Enemy'][_0x1027e4(0x94a)]===undefined&&(_0x149292[_0x1027e4(0x7de)][_0x1027e4(0x94a)]=!![]),_0x149292[_0x1027e4(0xc24)][_0x1027e4(0xbc6)]===undefined&&(_0x149292[_0x1027e4(0xc24)][_0x1027e4(0xbc6)]=![]),_0x149292['Actor'][_0x1027e4(0x773)]===undefined&&(_0x149292[_0x1027e4(0xc24)][_0x1027e4(0x773)]=!![]);},VisuMZ['DamageStyles']={},Scene_Boot[_0x397c95(0x6cf)][_0x397c95(0x3e8)]=function(){const _0x2ea6e6=_0x397c95;for(const _0x3e7a40 of VisuMZ['BattleCore'][_0x2ea6e6(0x716)][_0x2ea6e6(0x7a6)]['DamageStyleList']){if(!_0x3e7a40)continue;const _0x585e0e=_0x3e7a40['Name']['toUpperCase']()[_0x2ea6e6(0xb34)]();VisuMZ[_0x2ea6e6(0x1aa)][_0x585e0e]=_0x3e7a40;}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xaa8)]={},Scene_Boot[_0x397c95(0x6cf)][_0x397c95(0x3d7)]=function(){const _0x26cc4d=_0x397c95,_0x45dea9=VisuMZ[_0x26cc4d(0x1f3)][_0x26cc4d(0xaa8)],_0x2cb278='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x4dec69=[[_0x26cc4d(0x45f),_0x26cc4d(0x335)],[_0x26cc4d(0x600),'POST-']],_0x56f9d2=[[_0x26cc4d(0xbac),_0x26cc4d(0xca0)],['%1Damage%2JS','JS\x20%1DAMAGE\x20%2']],_0x1c678e=[['',''],[_0x26cc4d(0x449),_0x26cc4d(0x96a)],['AsTarget',_0x26cc4d(0x6b1)]];for(const _0x2e7f70 of _0x56f9d2){if(_0x26cc4d(0x393)==='BFsbI'){_0x372fc4=_0x47cc55[_0x1bd83f][_0x26cc4d(0x6a3)](this,_0x125624,_0x161a4c);if(_0xd9ea9c)_0x516c7f=_0x20423c;}else for(const _0x324f31 of _0x1c678e){for(const _0x1ac80e of _0x4dec69){const _0x76cf93=_0x2e7f70[0x0]['format'](_0x1ac80e[0x0],_0x324f31[0x0]),_0x1191a5=_0x2e7f70[0x1][_0x26cc4d(0xadd)](_0x1ac80e[0x1],_0x324f31[0x1])[_0x26cc4d(0xb34)](),_0xb34f4a=new RegExp(_0x2cb278[_0x26cc4d(0xadd)](_0x1191a5),'i');_0x45dea9[_0x76cf93]=_0xb34f4a;}}}const _0x17569b=[[_0x26cc4d(0x4cf),_0x26cc4d(0xc8c)],[_0x26cc4d(0x6df),_0x26cc4d(0xc2b)]];for(const _0x494759 of _0x17569b){for(const _0x2f9882 of _0x4dec69){if(_0x26cc4d(0xa65)!==_0x26cc4d(0xb41)){const _0x3aed99=_0x494759[0x0][_0x26cc4d(0xadd)](_0x2f9882[0x0]),_0x581a9f=_0x494759[0x1][_0x26cc4d(0xadd)](_0x2f9882[0x1]),_0x4e42f7=new RegExp(_0x2cb278[_0x26cc4d(0xadd)](_0x581a9f),'i');_0x45dea9[_0x3aed99]=_0x4e42f7;}else(this[_0x26cc4d(0x7ce)]!==_0x111f04||this[_0x26cc4d(0xa3f)]!==_0x17d5b9)&&(this['_targetHomeX']=_0x4653a0,this[_0x26cc4d(0xa3f)]=_0xca2e42,this[_0x26cc4d(0x204)]=_0x59b63a,this[_0x26cc4d(0x6b0)]=_0x214976,this[_0x26cc4d(0xa84)]=_0x263f7e,_0x3dd0d6<=0x0&&this[_0x26cc4d(0x4fe)]());}}const _0x1f5e5f=[[_0x26cc4d(0x491),_0x26cc4d(0xcb7)],['%1EndBattleJS','JS\x20%1END\x20BATTLE'],['BattleVictoryJS',_0x26cc4d(0xc0b)],['BattleDefeatJS',_0x26cc4d(0x95e)],[_0x26cc4d(0x7e7),_0x26cc4d(0x32c)],['EscapeFailureJS','JS\x20ESCAPE\x20FAILURE'],['%1StartTurnJS',_0x26cc4d(0x4dd)],[_0x26cc4d(0x57e),_0x26cc4d(0x9d8)],[_0x26cc4d(0xafc),'JS\x20%1REGENERATE']];for(const _0x2c5798 of _0x1f5e5f){for(const _0x4cee4e of _0x4dec69){const _0xdd5307=_0x2c5798[0x0]['format'](_0x4cee4e[0x0]),_0x23706d=_0x2c5798[0x1][_0x26cc4d(0xadd)](_0x4cee4e[0x1]),_0x4633fa=new RegExp(_0x2cb278['format'](_0x23706d),'i');_0x45dea9[_0xdd5307]=_0x4633fa;}}},Scene_Boot[_0x397c95(0x6cf)][_0x397c95(0x8e1)]=function(){const _0x2a397b=_0x397c95,_0x4ba635=$dataSkills[_0x2a397b(0x900)]($dataItems);for(const _0x4be233 of _0x4ba635){if(_0x2a397b(0x71c)!==_0x2a397b(0xa54)){if(!_0x4be233)continue;VisuMZ['BattleCore'][_0x2a397b(0x3a3)](_0x4be233);}else _0x4cb283[_0x2a397b(0x1f3)][_0x2a397b(0x91b)][_0x2a397b(0x6a3)](this);}},Scene_Boot['prototype'][_0x397c95(0x4a4)]=function(){const _0x3f94ed=_0x397c95,_0x1692bb=$dataActors[_0x3f94ed(0x900)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x12ae8a of _0x1692bb){if(!_0x12ae8a)continue;VisuMZ[_0x3f94ed(0x1f3)][_0x3f94ed(0xb68)](_0x12ae8a);}},Scene_Boot[_0x397c95(0x6cf)][_0x397c95(0x8b7)]=function(){const _0x19501c=_0x397c95,_0x39f58b=VisuMZ['BattleCore'][_0x19501c(0x716)]['Mechanics'][_0x19501c(0x609)],_0x1ce719=[];for(const _0x1101d5 of _0x39f58b){if(_0x19501c(0x804)!=='cvjSQ')this[_0x19501c(0x5bd)]();else{const _0x3511d9=$dataTroops[_0x1101d5];if(_0x3511d9)_0x1ce719[_0x19501c(0x4da)](JsonEx[_0x19501c(0x49d)](_0x3511d9));}}for(const _0x436526 of $dataTroops){if(!_0x436526)continue;for(const _0x48195f of _0x1ce719){if(_0x48195f['id']===_0x436526['id'])continue;_0x436526['pages']=_0x436526[_0x19501c(0xc33)][_0x19501c(0x900)](_0x48195f['pages']);}}},Scene_Boot[_0x397c95(0x6cf)][_0x397c95(0x580)]=function(){const _0x2e7b54=_0x397c95,_0x58ce0d=VisuMZ[_0x2e7b54(0x1f3)][_0x2e7b54(0x716)][_0x2e7b54(0x305)];if(_0x58ce0d[_0x2e7b54(0xcb1)]>0x0&&$dataCommonEvents[_0x58ce0d[_0x2e7b54(0xcb1)]]){const _0x3c2bed=$dataCommonEvents[_0x58ce0d[_0x2e7b54(0xcb1)]],_0x5a76dd=_0x3c2bed['list'][_0x2e7b54(0x187)]-0x2,_0x409b5e=_0x3c2bed[_0x2e7b54(0x7e1)][_0x5a76dd];if(_0x409b5e&&_0x409b5e[_0x2e7b54(0x665)]!==0xe6){if(_0x2e7b54(0x6ba)===_0x2e7b54(0x6ba)){const _0x23d109={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x4ea265=_0x3c2bed['list']['pop']();_0x3c2bed[_0x2e7b54(0x7e1)][_0x2e7b54(0x74e)](_0x23d109),_0x3c2bed[_0x2e7b54(0x7e1)][_0x2e7b54(0x74e)](_0x4ea265);}else{const _0x546bab=_0x163375['inputtingAction']();if(_0x546bab)_0x546bab['setTargetBattlerKey'](_0x2e7b54(0x79f));this[_0x2e7b54(0x173)]();}}}},Scene_Boot[_0x397c95(0x6cf)][_0x397c95(0x8f0)]=function(){const _0x5a30f3=_0x397c95;VisuMZ[_0x5a30f3(0x1f3)][_0x5a30f3(0x901)](),VisuMZ[_0x5a30f3(0x1f3)]['BindCommonEventKeysForGroup']($dataSkills),VisuMZ[_0x5a30f3(0x1f3)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ['BattleCore'][_0x397c95(0x901)]=function(){const _0x4dd85e=_0x397c95;VisuMZ[_0x4dd85e(0x1f3)][_0x4dd85e(0x4f2)]={};for(const _0x2478c6 of $dataCommonEvents){if(_0x4dd85e(0x4b7)!==_0x4dd85e(0xc7f)){if(!_0x2478c6)continue;if(_0x2478c6[_0x4dd85e(0xa29)][_0x4dd85e(0xb38)](/\[(.*)\]/i)){let _0x3ed9e1=String(RegExp['$1'])['replace'](/,/g,'')[_0x4dd85e(0x27f)]()[_0x4dd85e(0xb34)]();VisuMZ['BattleCore'][_0x4dd85e(0x4f2)][_0x3ed9e1]=_0x2478c6['id'];}}else return this[_0x4dd85e(0xade)]>0x0;}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x682)]=function(_0x48ff33){const _0x5ddb4f=_0x397c95;for(const _0x16eaee of _0x48ff33){if(!_0x16eaee)continue;VisuMZ['BattleCore'][_0x5ddb4f(0xb3c)](_0x16eaee);}},VisuMZ['BattleCore'][_0x397c95(0xb3c)]=function(_0x987eba){const _0x4fac7d=_0x397c95;if(!_0x987eba)return;if(!_0x987eba[_0x4fac7d(0x358)])return;VisuMZ[_0x4fac7d(0x1f3)][_0x4fac7d(0x4f2)]=VisuMZ[_0x4fac7d(0x1f3)][_0x4fac7d(0x4f2)]||{};const _0x2e216c=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x39258f=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x43eba8=[];const _0x8006b1=_0x987eba['note'][_0x4fac7d(0xb38)](_0x2e216c);if(_0x8006b1){for(const _0x5697fd of _0x8006b1){if(_0x4fac7d(0xa5d)!==_0x4fac7d(0x921)){_0x5697fd[_0x4fac7d(0xb38)](_0x2e216c);const _0x33587e=String(RegExp['$1'])['split'](',')['map'](_0x4100f5=>String(_0x4100f5)['toUpperCase']()[_0x4fac7d(0xb34)]());_0x43eba8=_0x43eba8[_0x4fac7d(0x900)](_0x33587e);}else return![];}if(!_0x987eba[_0x4fac7d(0x6cc)][_0x4fac7d(0xb38)](/<CUSTOM ACTION SEQUENCE>/i)){if('EtpSO'===_0x4fac7d(0x5a2))_0x987eba[_0x4fac7d(0x6cc)]+=_0x4fac7d(0x6a5);else{if(!_0x5695ed['isSceneBattle']())return;const _0x27b5a6=_0x323c9d['getLastPluginCommandInterpreter']();if(!_0x27b5a6)return;_0x27b5a6[_0x4fac7d(0x2b3)](_0x4fac7d(0x5ca));}};}if(_0x987eba[_0x4fac7d(0x6cc)][_0x4fac7d(0xb38)](_0x39258f)){const _0xe1e32a=String(RegExp['$1'])[_0x4fac7d(0x9af)](/[\r\n]+/)[_0x4fac7d(0xb9a)](_0x49a83a=>String(_0x49a83a)['toUpperCase']()[_0x4fac7d(0xb34)]());_0x43eba8=_0x43eba8[_0x4fac7d(0x900)](_0xe1e32a);if(!_0x987eba['note'][_0x4fac7d(0xb38)](/<CUSTOM ACTION SEQUENCE>/i)){if('wOJSQ'!==_0x4fac7d(0x8db))_0x987eba[_0x4fac7d(0x6cc)]+=_0x4fac7d(0x6a5);else return 0x0;};}for(const _0x520e93 of _0x43eba8){if(_0x4fac7d(0x1d5)===_0x4fac7d(0x1d5)){if(VisuMZ[_0x4fac7d(0x1f3)]['_commonEventKey'][_0x520e93]){if(_0x4fac7d(0xa37)!==_0x4fac7d(0x325)){const _0x4e71b6=VisuMZ[_0x4fac7d(0x1f3)][_0x4fac7d(0x4f2)][_0x520e93],_0x2b795d={'code':0x2c,'dataId':_0x4e71b6,'value1':0x1,'value2':0x0};_0x987eba[_0x4fac7d(0x358)][_0x4fac7d(0x4da)](_0x2b795d);}else this[_0x4fac7d(0xc1a)]=null;}}else this[_0x4fac7d(0x7aa)]();}},Scene_Boot[_0x397c95(0x6cf)][_0x397c95(0xba9)]=function(){const _0x587537=_0x397c95,_0x426ddd=$dataSkills[_0x587537(0x900)]($dataItems);for(const _0x46605f of _0x426ddd){if('iMhFN'!=='iMhFN')return'#%1'['format'](_0x20b515(_0x5f1f00['$1']));else{if(!_0x46605f)continue;VisuMZ[_0x587537(0x1f3)][_0x587537(0x888)](_0x46605f);}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xab8)]=VisuMZ[_0x397c95(0xab8)],VisuMZ[_0x397c95(0xab8)]=function(_0x557210){const _0x10abe5=_0x397c95;if(VisuMZ[_0x10abe5(0x1f3)][_0x10abe5(0xab8)]){if('kHoHO'!==_0x10abe5(0x8e4)){const _0xaccc68=this[_0x10abe5(0x15b)];_0xaccc68['drawText'](_0x5c53bc,0x0,_0x47876b['y'],_0xaccc68[_0x10abe5(0x14f)],_0x10abe5(0x971));}else VisuMZ['BattleCore'][_0x10abe5(0xab8)][_0x10abe5(0x6a3)](this,_0x557210);}VisuMZ['BattleCore'][_0x10abe5(0xb68)](_0x557210);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xba6)]=VisuMZ[_0x397c95(0xba6)],VisuMZ[_0x397c95(0xba6)]=function(_0x2cd935){const _0xc3a2b5=_0x397c95;VisuMZ[_0xc3a2b5(0x1f3)][_0xc3a2b5(0xba6)]&&VisuMZ[_0xc3a2b5(0x1f3)]['ParseClassNotetags'][_0xc3a2b5(0x6a3)](this,_0x2cd935),VisuMZ['BattleCore'][_0xc3a2b5(0xb68)](_0x2cd935);},VisuMZ['BattleCore']['ParseSkillNotetags']=VisuMZ[_0x397c95(0x446)],VisuMZ[_0x397c95(0x446)]=function(_0x236422){const _0x46eaca=_0x397c95;VisuMZ[_0x46eaca(0x1f3)][_0x46eaca(0x446)]&&VisuMZ[_0x46eaca(0x1f3)]['ParseSkillNotetags'][_0x46eaca(0x6a3)](this,_0x236422),VisuMZ[_0x46eaca(0x1f3)][_0x46eaca(0x3a3)](_0x236422),VisuMZ['BattleCore']['Parse_Notetags_Targets'](_0x236422);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x2a6)]=VisuMZ['ParseItemNotetags'],VisuMZ['ParseItemNotetags']=function(_0x2bdaac){const _0x40ca7c=_0x397c95;VisuMZ['BattleCore'][_0x40ca7c(0x2a6)]&&VisuMZ[_0x40ca7c(0x1f3)]['ParseItemNotetags'][_0x40ca7c(0x6a3)](this,_0x2bdaac),VisuMZ[_0x40ca7c(0x1f3)]['Parse_Notetags_Action'](_0x2bdaac),VisuMZ['BattleCore'][_0x40ca7c(0x888)](_0x2bdaac);},VisuMZ[_0x397c95(0x1f3)]['ParseWeaponNotetags']=VisuMZ[_0x397c95(0x333)],VisuMZ['ParseWeaponNotetags']=function(_0x210245){const _0x8ea52d=_0x397c95;if(VisuMZ[_0x8ea52d(0x1f3)]['ParseWeaponNotetags']){if(_0x8ea52d(0xa04)===_0x8ea52d(0xcdf)){const _0x24e9df=_0x36a012['BattleCore'][_0x8ea52d(0x39f)]['call'](this);return _0x24e9df[_0x8ea52d(0x386)]=this[_0x8ea52d(0x386)],_0x24e9df[_0x8ea52d(0xa03)]=this[_0x8ea52d(0xa03)],_0x24e9df['visualHpGauge']=this[_0x8ea52d(0x9d5)],_0x24e9df;}else VisuMZ['BattleCore'][_0x8ea52d(0x333)][_0x8ea52d(0x6a3)](this,_0x210245);}VisuMZ[_0x8ea52d(0x1f3)]['Parse_Notetags_TraitObjects'](_0x210245);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x188)]=VisuMZ['ParseArmorNotetags'],VisuMZ['ParseArmorNotetags']=function(_0x470bfd){const _0x4dd987=_0x397c95;VisuMZ[_0x4dd987(0x1f3)][_0x4dd987(0x188)]&&(_0x4dd987(0x5a4)!==_0x4dd987(0xa85)?VisuMZ[_0x4dd987(0x1f3)][_0x4dd987(0x188)][_0x4dd987(0x6a3)](this,_0x470bfd):_0x3ff34e[_0x4dd987(0x4da)](_0x4dd987(0xb5e),_0x39e457,_0x326e15)),VisuMZ[_0x4dd987(0x1f3)][_0x4dd987(0xb68)](_0x470bfd);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x205)]=VisuMZ[_0x397c95(0x205)],VisuMZ[_0x397c95(0x205)]=function(_0x40a4e6){const _0x394e2f=_0x397c95;if(VisuMZ['BattleCore'][_0x394e2f(0x205)]){if(_0x394e2f(0xaf3)===_0x394e2f(0x777)){if(_0x5034a6){const _0x2f4c47=_0x4cf9d7[_0x394e2f(0xb70)](_0xf41c60);return _0x2f4c47>=0x0?[_0x4bbfcf[_0x2f4c47-0x1]||_0x449e63]:[_0x2e38f0];}}else VisuMZ[_0x394e2f(0x1f3)][_0x394e2f(0x205)][_0x394e2f(0x6a3)](this,_0x40a4e6);}VisuMZ[_0x394e2f(0x1f3)][_0x394e2f(0xb68)](_0x40a4e6);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x747)]=VisuMZ[_0x397c95(0x747)],VisuMZ[_0x397c95(0x747)]=function(_0x3e3544){const _0x8e9327=_0x397c95;VisuMZ[_0x8e9327(0x1f3)][_0x8e9327(0x747)]&&VisuMZ[_0x8e9327(0x1f3)]['ParseStateNotetags']['call'](this,_0x3e3544),VisuMZ[_0x8e9327(0x1f3)][_0x8e9327(0xb68)](_0x3e3544);},VisuMZ['BattleCore'][_0x397c95(0x3a3)]=function(_0x5aa6e7){const _0x434c9a=_0x397c95,_0xf2e013=[_0x434c9a(0xb80),'PostApplyJS',_0x434c9a(0x6eb),_0x434c9a(0xa1d),_0x434c9a(0x86a),_0x434c9a(0x5cf),_0x434c9a(0x3ee),_0x434c9a(0x969)];for(const _0x423bce of _0xf2e013){VisuMZ[_0x434c9a(0x1f3)][_0x434c9a(0xa23)](_0x5aa6e7,_0x423bce);}const _0x2dce17=_0x5aa6e7['note'];if(_0x2dce17[_0x434c9a(0xb38)](/<ALWAYS CRITICAL/i)){if(_0x434c9a(0x510)===_0x434c9a(0x510))_0x5aa6e7[_0x434c9a(0x649)][_0x434c9a(0xc97)]=!![];else{const _0x24ee2e=_0x4c0f92[_0x434c9a(0x49d)](_0x3b8b5c);_0x24ee2e[_0x434c9a(0x913)]=![],_0x24ee2e[_0x434c9a(0x193)]=0x0,this[_0x434c9a(0xaec)][_0x434c9a(0x4da)](_0x24ee2e);}}if(_0x2dce17[_0x434c9a(0xb38)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)){if(_0x434c9a(0x6e0)!==_0x434c9a(0x6e0))return this['hasSvBattler']()&&this[_0x434c9a(0x9d9)]()[_0x434c9a(0xb38)](/\$/i);else _0x5aa6e7[_0x434c9a(0x29a)]=Math['max'](0x1,Number(RegExp['$1']));}_0x2dce17[_0x434c9a(0xb38)](/<TARGET:[ ](.*)>/i)&&(_0x5aa6e7[_0x434c9a(0x220)]=String(RegExp['$1'])[_0x434c9a(0x27f)]()[_0x434c9a(0xb34)]());},VisuMZ[_0x397c95(0x1f3)]['Parse_Notetags_TraitObjects']=function(_0x128e8c){const _0xe55a34=_0x397c95,_0x133daa=['PreApplyAsUserJS',_0xe55a34(0x1ed),'PreDamageAsUserJS',_0xe55a34(0xcd5),_0xe55a34(0x1a0),_0xe55a34(0x748),_0xe55a34(0x241),_0xe55a34(0x226),'PreStartActionJS',_0xe55a34(0x5cf),_0xe55a34(0x3ee),_0xe55a34(0x969),_0xe55a34(0x4bd),_0xe55a34(0x8c1),_0xe55a34(0x4ed),_0xe55a34(0xb3f),_0xe55a34(0x8ae),_0xe55a34(0x6be),_0xe55a34(0x7e7),_0xe55a34(0xcfd),_0xe55a34(0x3db),_0xe55a34(0x7ea),_0xe55a34(0x7e3),_0xe55a34(0x29b),_0xe55a34(0x13f),_0xe55a34(0x1ae)];for(const _0xb3cdfb of _0x133daa){VisuMZ[_0xe55a34(0x1f3)]['createJS'](_0x128e8c,_0xb3cdfb);}},VisuMZ[_0x397c95(0x1f3)]['Parse_Notetags_Targets']=function(_0x2499ca){const _0x5bc26f=_0x397c95,_0x47573e=_0x2499ca[_0x5bc26f(0x6cc)];if(_0x47573e[_0x5bc26f(0xb38)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x5e4273=String(RegExp['$1']),_0x395473=VisuMZ['BattleCore']['createKeyJS'](_0x2499ca,_0x5bc26f(0x3b9));VisuMZ[_0x5bc26f(0x1f3)][_0x5bc26f(0x8e8)](_0x5e4273,_0x395473);}if(_0x47573e[_0x5bc26f(0xb38)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x5bc26f(0x92b)!==_0x5bc26f(0x2d5)){const _0x30a88b=String(RegExp['$1']),_0x4e253a=VisuMZ['BattleCore'][_0x5bc26f(0xc17)](_0x2499ca,_0x5bc26f(0xb03));VisuMZ['BattleCore']['createCommandVisibleJS'](_0x30a88b,_0x4e253a);}else{if(!_0x3d053f[_0x5bc26f(0x515)](_0x3a727f))return!![];}}},VisuMZ[_0x397c95(0x1f3)]['JS']={},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xa23)]=function(_0x5a6d7c,_0x204d99){const _0x14960d=_0x397c95,_0x47052d=_0x5a6d7c[_0x14960d(0x6cc)];if(_0x47052d[_0x14960d(0xb38)](VisuMZ['BattleCore']['RegExp'][_0x204d99])){const _0x1cf9f4=RegExp['$1'],_0x3e98ca=_0x14960d(0x8b0)[_0x14960d(0xadd)](_0x1cf9f4),_0x43640b=VisuMZ[_0x14960d(0x1f3)][_0x14960d(0xc17)](_0x5a6d7c,_0x204d99);VisuMZ['BattleCore']['JS'][_0x43640b]=new Function(_0x3e98ca);}},VisuMZ['BattleCore'][_0x397c95(0xc17)]=function(_0x376118,_0x6ba1df){const _0x6edc18=_0x397c95;if(VisuMZ['createKeyJS'])return VisuMZ[_0x6edc18(0xc17)](_0x376118,_0x6ba1df);let _0x5a26fe='';if($dataActors[_0x6edc18(0x932)](_0x376118))_0x5a26fe=_0x6edc18(0xa66)[_0x6edc18(0xadd)](_0x376118['id'],_0x6ba1df);if($dataClasses[_0x6edc18(0x932)](_0x376118))_0x5a26fe='Class-%1-%2'[_0x6edc18(0xadd)](_0x376118['id'],_0x6ba1df);if($dataSkills[_0x6edc18(0x932)](_0x376118))_0x5a26fe=_0x6edc18(0x1de)[_0x6edc18(0xadd)](_0x376118['id'],_0x6ba1df);if($dataItems[_0x6edc18(0x932)](_0x376118))_0x5a26fe='Item-%1-%2'[_0x6edc18(0xadd)](_0x376118['id'],_0x6ba1df);if($dataWeapons[_0x6edc18(0x932)](_0x376118))_0x5a26fe='Weapon-%1-%2'[_0x6edc18(0xadd)](_0x376118['id'],_0x6ba1df);if($dataArmors[_0x6edc18(0x932)](_0x376118))_0x5a26fe=_0x6edc18(0x940)[_0x6edc18(0xadd)](_0x376118['id'],_0x6ba1df);if($dataEnemies[_0x6edc18(0x932)](_0x376118))_0x5a26fe=_0x6edc18(0x3ea)[_0x6edc18(0xadd)](_0x376118['id'],_0x6ba1df);if($dataStates[_0x6edc18(0x932)](_0x376118))_0x5a26fe=_0x6edc18(0x5f5)[_0x6edc18(0xadd)](_0x376118['id'],_0x6ba1df);return _0x5a26fe;},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x8e8)]=function(_0x3c43ba,_0x5d96f5){const _0x1c4ee8=_0x397c95,_0x39a22f=_0x1c4ee8(0x379)[_0x1c4ee8(0xadd)](_0x3c43ba);VisuMZ[_0x1c4ee8(0x1f3)]['JS'][_0x5d96f5]=new Function(_0x39a22f);},VisuMZ[_0x397c95(0x1f3)]['createCommandVisibleJS']=function(_0x4c4320,_0x29601c){const _0x49c935=_0x397c95,_0x12d83b=_0x49c935(0x7d5)[_0x49c935(0xadd)](_0x4c4320);VisuMZ[_0x49c935(0x1f3)]['JS'][_0x29601c]=new Function(_0x12d83b);},TextManager['autoBattle']=VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x716)][_0x397c95(0x982)][_0x397c95(0x933)],TextManager[_0x397c95(0x679)]=VisuMZ[_0x397c95(0x1f3)]['Settings'][_0x397c95(0x7c8)]['StartName'],TextManager[_0x397c95(0x567)]=VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x716)][_0x397c95(0x7c8)][_0x397c95(0xad3)],TextManager['visualHpGauge']=VisuMZ['BattleCore'][_0x397c95(0x716)][_0x397c95(0xaef)][_0x397c95(0xc0e)],ColorManager[_0x397c95(0x662)]=function(_0x4732a0){const _0x565924=_0x397c95;return _0x4732a0=String(_0x4732a0),_0x4732a0[_0x565924(0xb38)](/#(.*)/i)?_0x565924(0x34b)['format'](String(RegExp['$1'])):this['textColor'](Number(_0x4732a0));},DataManager['getDamageStyle']=function(_0x396f60){const _0x91edf=_0x397c95;if(_0x396f60[_0x91edf(0x6cc)][_0x91edf(0xb38)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x91edf(0xc3e)!=='gEycA')this[_0x91edf(0x2ca)]=_0x5c604a,_0x5589e5[_0x91edf(0x6cf)][_0x91edf(0x918)]['call'](this,_0x2a2274),this[_0x91edf(0xbf1)](_0x2b0164['BG_TYPE']),this[_0x91edf(0x7c1)](),this[_0x91edf(0x16a)](),this[_0x91edf(0xb3d)]();else{const _0x3ec1e0=String(RegExp['$1'])[_0x91edf(0x27f)]()[_0x91edf(0xb34)]();if(_0x3ec1e0===_0x91edf(0x4e8))return _0x91edf(0x4e8);if(VisuMZ[_0x91edf(0x1aa)][_0x3ec1e0])return _0x3ec1e0;}}const _0x3d4b97=VisuMZ['BattleCore']['Settings'][_0x91edf(0x7a6)][_0x91edf(0x7d9)][_0x91edf(0x27f)]()['trim']();if(VisuMZ[_0x91edf(0x1aa)][_0x3d4b97])return _0x3d4b97;return _0x91edf(0x4e8);},DataManager[_0x397c95(0xbe6)]=function(_0x437422){const _0x1ed701=_0x397c95;_0x437422=_0x437422['toUpperCase']()[_0x1ed701(0xb34)](),this[_0x1ed701(0xa33)]=this[_0x1ed701(0xa33)]||{};if(this[_0x1ed701(0xa33)][_0x437422])return this[_0x1ed701(0xa33)][_0x437422];for(let _0xa3e3a6=0x1;_0xa3e3a6<0x64;_0xa3e3a6++){if(!$dataSystem[_0x1ed701(0x19a)][_0xa3e3a6])continue;let _0x28c0fb=$dataSystem[_0x1ed701(0x19a)][_0xa3e3a6][_0x1ed701(0x27f)]()['trim']();_0x28c0fb=_0x28c0fb[_0x1ed701(0x2bd)](/\x1I\[(\d+)\]/gi,''),_0x28c0fb=_0x28c0fb[_0x1ed701(0x2bd)](/\\I\[(\d+)\]/gi,''),this[_0x1ed701(0xa33)][_0x28c0fb]=_0xa3e3a6;}return this[_0x1ed701(0xa33)][_0x437422]||0x0;},DataManager[_0x397c95(0xaf2)]=function(_0x59d0b3){const _0x3c13ce=_0x397c95;_0x59d0b3=_0x59d0b3['toUpperCase']()[_0x3c13ce(0xb34)](),this[_0x3c13ce(0x26e)]=this['_skillIDs']||{};if(this[_0x3c13ce(0x26e)][_0x59d0b3])return this[_0x3c13ce(0x26e)][_0x59d0b3];for(const _0x3d6684 of $dataSkills){if(!_0x3d6684)continue;this[_0x3c13ce(0x26e)][_0x3d6684['name'][_0x3c13ce(0x27f)]()[_0x3c13ce(0xb34)]()]=_0x3d6684['id'];}return this[_0x3c13ce(0x26e)][_0x59d0b3]||0x0;},DataManager['getEnemyIdWithName']=function(_0x5e065e){const _0xec8a27=_0x397c95;_0x5e065e=_0x5e065e['toUpperCase']()[_0xec8a27(0xb34)](),this[_0xec8a27(0x418)]=this[_0xec8a27(0x418)]||{};if(this[_0xec8a27(0x418)][_0x5e065e])return this[_0xec8a27(0x418)][_0x5e065e];for(const _0x3d4eb1 of $dataEnemies){if('fltQb'===_0xec8a27(0xccc)){if(!this['item']()['damage'][_0xec8a27(0xc97)])return 0x0;let _0x235858=_0x5f3de3['BattleCore']['Settings'][_0xec8a27(0x7a6)][_0xec8a27(0x624)]['call'](this,_0x372ec7);return _0x235858=this[_0xec8a27(0xc49)][_0xec8a27(0x1a8)]*_0x235858+this[_0xec8a27(0xc49)][_0xec8a27(0xc44)],_0x235858;}else{if(!_0x3d4eb1)continue;this[_0xec8a27(0x418)][_0x3d4eb1[_0xec8a27(0xa29)]['toUpperCase']()[_0xec8a27(0xb34)]()]=_0x3d4eb1['id'];}}return this[_0xec8a27(0x418)][_0x5e065e]||0x0;},DataManager[_0x397c95(0x9cb)]=function(_0x3acb02){const _0x4d4ef4=_0x397c95;_0x3acb02=_0x3acb02[_0x4d4ef4(0x27f)]()[_0x4d4ef4(0xb34)](),this[_0x4d4ef4(0x66f)]=this['_wtypeIDs']||{};if(this[_0x4d4ef4(0x66f)][_0x3acb02])return this[_0x4d4ef4(0x66f)][_0x3acb02];for(let _0x4c5036=0x1;_0x4c5036<0x64;_0x4c5036++){if(!$dataSystem[_0x4d4ef4(0x6ec)][_0x4c5036])continue;let _0xf544d1=$dataSystem[_0x4d4ef4(0x6ec)][_0x4c5036][_0x4d4ef4(0x27f)]()[_0x4d4ef4(0xb34)]();_0xf544d1=_0xf544d1[_0x4d4ef4(0x2bd)](/\x1I\[(\d+)\]/gi,''),_0xf544d1=_0xf544d1[_0x4d4ef4(0x2bd)](/\\I\[(\d+)\]/gi,''),this[_0x4d4ef4(0x66f)][_0xf544d1]=_0x4c5036;}return this[_0x4d4ef4(0x66f)][_0x4d4ef4(0x5a9)]=0x0,this[_0x4d4ef4(0x66f)][_0x3acb02]||0x0;},DataManager['battleDisplayText']=function(_0x3a2fc8){const _0x95dc9b=_0x397c95,_0x5b9816='\x5cI[%1]%2';let _0x17edbb=_0x3a2fc8['iconIndex'],_0x5d4675=_0x3a2fc8['name'];const _0x407937=_0x3a2fc8[_0x95dc9b(0x6cc)];return _0x407937[_0x95dc9b(0xb38)](/<DISPLAY ICON: (\d+)>/i)&&(_0x95dc9b(0x3e2)==='NFncr'?this[_0x95dc9b(0x263)][_0x95dc9b(0x60e)][_0x95dc9b(0x6bc)]=this[_0x95dc9b(0xcfb)][_0x95dc9b(0x802)]():_0x17edbb=Number(RegExp['$1'])),_0x407937[_0x95dc9b(0xb38)](/<DISPLAY TEXT: (.*)>/i)&&(_0x5d4675=String(RegExp['$1'])),_0x5b9816[_0x95dc9b(0xadd)](_0x17edbb,_0x5d4675);},DataManager[_0x397c95(0x79c)]=function(_0x1bb248){const _0x53ceb5=_0x397c95;return _0x1bb248[_0x53ceb5(0x6cc)][_0x53ceb5(0xb38)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x1bb248['name'];},DataManager[_0x397c95(0x539)]=function(_0x5a47f1){const _0x5c940f=_0x397c95;if(_0x5a47f1[_0x5c940f(0x6cc)][_0x5c940f(0xb38)](/<COMMAND ICON: (\d+)>/i))return Number(RegExp['$1']);else{if(_0x5c940f(0x545)!=='RatUJ')return _0x5a47f1[_0x5c940f(0x3ab)];else{this[_0x5c940f(0x9df)]=this[_0x5c940f(0x9df)]||{};if(this[_0x5c940f(0x9df)][_0x8ba365]!==_0x5da929)return this[_0x5c940f(0x9df)][_0x39be11];this[_0x5c940f(0x9df)][_0xb17b8c]=null;const _0x37a8d8=this[_0x5c940f(0x77b)](),_0x209c83=_0x37a8d8[_0x5c940f(0xc19)](_0x5f0fec=>_0x5f0fec[_0x5c940f(0x12e)]()===_0x5950f0);if(_0x209c83)this[_0x5c940f(0x9df)][_0x3085d3]=_0x209c83;return this['_battlerKeyCache'][_0x34ab9b];}}},DataManager['swapEnemyIDs']=function(_0x4bfa01){const _0x5b9cf6=_0x397c95,_0x589c99=$dataEnemies[_0x4bfa01];if(_0x589c99){if(_0x5b9cf6(0x956)==='XjjFS'){if(_0x589c99[_0x5b9cf6(0x6cc)][_0x5b9cf6(0xb38)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x56ffeb=String(RegExp['$1'])[_0x5b9cf6(0x9af)](/[\r\n]+/)[_0x5b9cf6(0x723)](''),_0x212ad4=this[_0x5b9cf6(0x831)](_0x56ffeb);_0x4bfa01=this['getEnemyIdWithName'](_0x212ad4)||_0x4bfa01,_0x4bfa01=DataManager['swapEnemyIDs'](_0x4bfa01);}}else{let _0x5b6676=0x0;this[_0x5b9cf6(0x7b5)][_0x5b9cf6(0x187)]>0x0&&(_0x5b6676=this[_0x5b9cf6(0x7b5)][this[_0x5b9cf6(0x7b5)]['length']-0x1]),this[_0x5b9cf6(0x7b0)]['length']>_0x5b6676?this['wait']():this[_0x5b9cf6(0x7aa)]();}}return _0x4bfa01;},DataManager[_0x397c95(0x831)]=function(_0x53e531){const _0x312fb2=_0x397c95;let _0x5aa352=0x0;const _0x1cc17b={};for(const _0x520962 of _0x53e531){if('BYoqY'!==_0x312fb2(0x692)){if(_0xec207b[_0x312fb2(0x8d5)])return![];return _0x28498a[_0x312fb2(0x1f3)][_0x312fb2(0x716)]['Enemy'][_0x312fb2(0xb55)];}else{if(_0x520962[_0x312fb2(0xb38)](/(.*):[ ](\d+)/i)){if(_0x312fb2(0x44f)===_0x312fb2(0x77e))_0xaaed25[_0x312fb2(0xd07)](_0x312fb2(0x5a8));else{const _0x3b7170=String(RegExp['$1'])[_0x312fb2(0xb34)](),_0x3382e1=Number(RegExp['$2']);_0x1cc17b[_0x3b7170]=_0x3382e1,_0x5aa352+=_0x3382e1;}}else{if(_0x520962[_0x312fb2(0xb38)](/(.*):[ ](\d+\.?\d+)/i)){const _0x497980=String(RegExp['$1'])['trim'](),_0x32a52e=Number(RegExp['$2']);_0x1cc17b[_0x497980]=_0x32a52e,_0x5aa352+=_0x32a52e;}else _0x520962!==''&&(_0x1cc17b[_0x520962]=0x1,_0x5aa352++);}}}if(_0x5aa352<=0x0)return'';let _0x5414c3=Math[_0x312fb2(0x4ce)]()*_0x5aa352;for(const _0x1d4e9a in _0x1cc17b){if('iUgiU'!=='rjKhk'){_0x5414c3-=_0x1cc17b[_0x1d4e9a];if(_0x5414c3<=0x0)return _0x1d4e9a;}else _0x3a20d0['performCollapse']();}return'';},DataManager[_0x397c95(0xb4c)]=function(_0x212d3f){const _0x549b14=_0x397c95;if(!_0x212d3f)return![];if(!VisuMZ['BattleCore'][_0x549b14(0x716)][_0x549b14(0x44c)][_0x549b14(0x7c7)])return![];if(_0x212d3f[_0x549b14(0x6cc)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x212d3f[_0x549b14(0x6cc)][_0x549b14(0xb38)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x269acb of _0x212d3f[_0x549b14(0x358)]){if(!_0x269acb)continue;if(_0x269acb[_0x549b14(0x665)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x397c95(0x2c6)]=function(_0x3ee7fb){const _0x3043a6=_0x397c95,_0x14e7a5=$dataTroops[_0x3ee7fb];if(!_0x14e7a5)return'';let _0x24d9df='';_0x24d9df+=_0x14e7a5[_0x3043a6(0xa29)];for(const _0x3aa887 of _0x14e7a5[_0x3043a6(0xc33)]){for(const _0x4e8103 of _0x3aa887[_0x3043a6(0x7e1)]){[0x6c,0x198][_0x3043a6(0x932)](_0x4e8103['code'])&&(_0x24d9df+='\x0a',_0x24d9df+=_0x4e8103[_0x3043a6(0x554)][0x0]);}}return _0x24d9df;},ConfigManager['autoBattleAtStart']=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x397c95(0xa03)]=ConfigManager[_0x397c95(0xa03)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x397c95(0x9d5)]??!![],VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x39f)]=ConfigManager[_0x397c95(0x947)],ConfigManager[_0x397c95(0x947)]=function(){const _0x3b58c7=_0x397c95,_0x459b1a=VisuMZ[_0x3b58c7(0x1f3)][_0x3b58c7(0x39f)][_0x3b58c7(0x6a3)](this);return _0x459b1a[_0x3b58c7(0x386)]=this[_0x3b58c7(0x386)],_0x459b1a['autoBattleUseSkills']=this['autoBattleUseSkills'],_0x459b1a[_0x3b58c7(0x9d5)]=this[_0x3b58c7(0x9d5)],_0x459b1a;},VisuMZ['BattleCore'][_0x397c95(0x172)]=ConfigManager[_0x397c95(0xcec)],ConfigManager[_0x397c95(0xcec)]=function(_0x833833){const _0x1fafa3=_0x397c95;VisuMZ[_0x1fafa3(0x1f3)][_0x1fafa3(0x172)]['call'](this,_0x833833);if(_0x1fafa3(0x386)in _0x833833)'xAhHC'!==_0x1fafa3(0xc52)?(this[_0x1fafa3(0x7b0)][_0x1fafa3(0x4da)](_0x5d1938),this[_0x1fafa3(0x2ed)](),this[_0x1fafa3(0x7aa)]()):this[_0x1fafa3(0x386)]=_0x833833[_0x1fafa3(0x386)];else{if(_0x1fafa3(0x3af)===_0x1fafa3(0x84f)){const _0x241719=[],_0x16b684=new _0x3b28b0(this);return _0x16b684['setAttack'](),_0x241719['push'](_0x16b684),_0x241719;}else this[_0x1fafa3(0x386)]=![];}_0x1fafa3(0xa03)in _0x833833?this[_0x1fafa3(0xa03)]=_0x833833[_0x1fafa3(0xa03)]:this[_0x1fafa3(0xa03)]=![];if('visualHpGauge'in _0x833833)this['visualHpGauge']=_0x833833['visualHpGauge'];else{if('YYOLQ'!==_0x1fafa3(0x7e9))this[_0x1fafa3(0x9d5)]=!![];else{const _0x3c925e=this['battleLayoutStyle']();['xp',_0x1fafa3(0xab1),_0x1fafa3(0x8fe)]['includes'](_0x3c925e)&&this[_0x1fafa3(0x1a1)][_0x1fafa3(0x230)](),this[_0x1fafa3(0x6e2)]();}}},ImageManager[_0x397c95(0x365)]=ImageManager[_0x397c95(0x365)]||0x9,ImageManager['svActorVertCells']=ImageManager[_0x397c95(0x2bf)]||0x6,VisuMZ[_0x397c95(0x1f3)]['BattleManager_setup']=BattleManager['setup'],BattleManager[_0x397c95(0x74a)]=function(_0x4a4c51,_0x15a29e,_0x547d30){const _0x481464=_0x397c95;VisuMZ[_0x481464(0x1f3)]['BattleManager_setup']['call'](this,_0x4a4c51,_0x15a29e,_0x547d30),this[_0x481464(0x9df)]={};},VisuMZ[_0x397c95(0x1f3)]['BattleManager_initMembers']=BattleManager[_0x397c95(0x652)],BattleManager['initMembers']=function(){const _0x2ceebb=_0x397c95;VisuMZ['BattleCore'][_0x2ceebb(0x9d1)][_0x2ceebb(0x6a3)](this),this[_0x2ceebb(0x86d)]=[];},BattleManager[_0x397c95(0x5f7)]=function(){const _0x3c6ee1=_0x397c95;if(!SceneManager[_0x3c6ee1(0x650)]())return;const _0x25f7f9=SceneManager['_scene'][_0x3c6ee1(0x1e8)];if(_0x25f7f9)_0x25f7f9[_0x3c6ee1(0xbfa)]();},BattleManager[_0x397c95(0x466)]=function(){const _0x204d01=_0x397c95;if(BattleManager['isTpb']())return _0x204d01(0x6b8);return _0x204d01(0x6b3);},BattleManager[_0x397c95(0x348)]=function(_0x5200bc){return _0x5200bc=_0x5200bc['toUpperCase']()['trim'](),this['battleSys']()===_0x5200bc;},BattleManager[_0x397c95(0x267)]=function(){const _0x3062d9=_0x397c95;return this[_0x3062d9(0x348)](_0x3062d9(0x6b3));},BattleManager[_0x397c95(0x5c0)]=function(){const _0x4c7c09=_0x397c95;return this[_0x4c7c09(0x267)]();},BattleManager[_0x397c95(0x55b)]=function(){return!this['isTurnBased']();},BattleManager[_0x397c95(0x658)]=function(){return!this['isTurnBased']()&&!this['isTickBased']();},BattleManager['getBattlerFromKey']=function(_0x1592d6){const _0x29077e=_0x397c95;this[_0x29077e(0x9df)]=this['_battlerKeyCache']||{};if(this['_battlerKeyCache'][_0x1592d6]!==undefined)return this['_battlerKeyCache'][_0x1592d6];this[_0x29077e(0x9df)][_0x1592d6]=null;const _0x182aec=this['allBattleMembers'](),_0x31c7ef=_0x182aec[_0x29077e(0xc19)](_0x2fa4e2=>_0x2fa4e2[_0x29077e(0x12e)]()===_0x1592d6);if(_0x31c7ef)this[_0x29077e(0x9df)][_0x1592d6]=_0x31c7ef;return this[_0x29077e(0x9df)][_0x1592d6];},Game_BattlerBase['prototype'][_0x397c95(0x12e)]=function(){const _0x4467e9=_0x397c95;return _0x4467e9(0x31b)[_0x4467e9(0xadd)](this['isActor']()?'actor':'enemy',this[_0x4467e9(0xa29)]());},Game_Action[_0x397c95(0x6cf)]['setTargetBattlerKey']=function(_0x182667){const _0x374c4b=_0x397c95;if(this[_0x374c4b(0x512)]!=='')return;if(typeof _0x182667===_0x374c4b(0x626)){if(_0x374c4b(0x766)===_0x374c4b(0x766))this[_0x374c4b(0x512)]=_0x182667[_0x374c4b(0x9a2)]()['trim']();else return _0x3b5365[_0x374c4b(0x1f3)][_0x374c4b(0x22a)][_0x374c4b(0x6a3)](this);}else this[_0x374c4b(0x512)]=_0x182667['battlerKey']();},Game_Action[_0x397c95(0x6cf)]['getBattlerKeyTargets']=function(){return[this['getSpecificBattlerKeyTarget']()];},Game_Action['prototype'][_0x397c95(0x520)]=function(){const _0x3bba5c=_0x397c95,_0x5aa45f=this[_0x3bba5c(0x512)]||'',_0x3f31a2=BattleManager[_0x3bba5c(0x4cb)](_0x5aa45f);if(!_0x3f31a2)return this[_0x3bba5c(0x912)]();if(!_0x3f31a2[_0x3bba5c(0xa0e)]())this['getBattlerKeyTargetReplacement']();return _0x3f31a2;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x912)]=function(){const _0x5b585d=_0x397c95,_0x35911e=this['_targetBattlerKey'];return _0x35911e['match'](/ACTOR/i)?_0x5b585d(0x863)===_0x5b585d(0x863)?this[_0x5b585d(0x154)]()['trueRandomTarget']():this[_0x5b585d(0x5c8)]():this[_0x5b585d(0xb5f)]()[_0x5b585d(0x99b)]();},BattleManager[_0x397c95(0xa05)]=function(){const _0x23571b=_0x397c95;return this['allBattleMembers']()['filter'](_0x115f53=>_0x115f53[_0x23571b(0x46a)]());},BattleManager[_0x397c95(0xb97)]=function(_0x931d72){const _0x323d69=_0x397c95;_0x931d72===_0x323d69(0x8ae)&&(_0x323d69(0x21c)!==_0x323d69(0x832)?this[_0x323d69(0x356)]=!![]:(this[_0x323d69(0x9a8)]=_0x5d7231,this[_0x323d69(0x1e2)]=_0x2a9742)),$gameParty[_0x323d69(0xb97)](_0x931d72),$gameTroop[_0x323d69(0xb97)](_0x931d72);},VisuMZ['BattleCore']['BattleManager_startBattle']=BattleManager[_0x397c95(0x345)],BattleManager['startBattle']=function(){const _0xce03fd=_0x397c95;this[_0xce03fd(0x5e1)]=![],this[_0xce03fd(0x8d5)]=ConfigManager['autoBattleAtStart'],this[_0xce03fd(0x356)]=![],this[_0xce03fd(0xb97)](_0xce03fd(0x4bd)),VisuMZ[_0xce03fd(0x1f3)][_0xce03fd(0x4f9)]['call'](this),this[_0xce03fd(0xb97)](_0xce03fd(0x8c1));},BattleManager[_0x397c95(0xca8)]=function(_0x3f308f){const _0x58c128=_0x397c95,_0x210463=VisuMZ[_0x58c128(0x1f3)]['Settings']['Mechanics'];_0x3f308f!=='EscapeFail'&&_0x210463['BattleEndEvent']&&VisuMZ['BattleCore'][_0x58c128(0xcee)](_0x210463[_0x58c128(0x6f7)])&&$gameTemp['reserveCommonEvent'](_0x210463[_0x58c128(0x6f7)]);const _0x490b84='%1Event'[_0x58c128(0xadd)](_0x3f308f);if(_0x210463[_0x490b84]&&VisuMZ['BattleCore'][_0x58c128(0xcee)](_0x210463[_0x490b84])){if(_0x58c128(0x59b)!=='XfRyi')$gameTemp[_0x58c128(0x280)](_0x210463[_0x490b84]);else return this[_0x58c128(0x77b)]()[_0x58c128(0x742)](_0x5bd436=>_0x5bd436[_0x58c128(0x46a)]());}},VisuMZ['BattleCore']['BattleManager_checkBattleEnd']=BattleManager[_0x397c95(0x424)],BattleManager[_0x397c95(0x424)]=function(){const _0x556433=_0x397c95;if(this[_0x556433(0xae6)]===_0x556433(0x731)){if($gameTemp[_0x556433(0x870)]())return![];}return VisuMZ[_0x556433(0x1f3)][_0x556433(0xa10)][_0x556433(0x6a3)](this);},VisuMZ['BattleCore'][_0x397c95(0x7a1)]=BattleManager[_0x397c95(0x51b)],BattleManager[_0x397c95(0x51b)]=function(){const _0x5e342d=_0x397c95;this[_0x5e342d(0x356)]=!![],this['processBattleCoreJS']('BattleVictoryJS'),VisuMZ[_0x5e342d(0x1f3)]['BattleManager_processVictory']['call'](this),this['processPostBattleCommonEvents'](_0x5e342d(0x2ba));},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x63b)]=BattleManager['processAbort'],BattleManager[_0x397c95(0x8ba)]=function(){const _0x315020=_0x397c95;this[_0x315020(0x356)]=!![],VisuMZ[_0x315020(0x1f3)]['BattleManager_processAbort'][_0x315020(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)]['BattleManager_processDefeat']=BattleManager[_0x397c95(0x4ad)],BattleManager[_0x397c95(0x4ad)]=function(){const _0x4d5f76=_0x397c95;this[_0x4d5f76(0x356)]=!![],this['processBattleCoreJS'](_0x4d5f76(0x6be)),VisuMZ[_0x4d5f76(0x1f3)][_0x4d5f76(0xc66)][_0x4d5f76(0x6a3)](this),this[_0x4d5f76(0xca8)](_0x4d5f76(0x633));},VisuMZ['BattleCore'][_0x397c95(0x8c3)]=BattleManager[_0x397c95(0x496)],BattleManager[_0x397c95(0x496)]=function(_0x3147c1){const _0x159962=_0x397c95;this[_0x159962(0x5e1)]=!![],this['_autoBattle']=![],this[_0x159962(0xb97)](_0x159962(0x4ed)),VisuMZ['BattleCore'][_0x159962(0x8c3)][_0x159962(0x6a3)](this,_0x3147c1),this[_0x159962(0xb97)](_0x159962(0xb3f));},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x465)]=BattleManager[_0x397c95(0x776)],BattleManager['startTurn']=function(){const _0x1a482a=_0x397c95;if(this[_0x1a482a(0x5c0)]())this[_0x1a482a(0xb97)](_0x1a482a(0x3db));VisuMZ[_0x1a482a(0x1f3)][_0x1a482a(0x465)][_0x1a482a(0x6a3)](this);if(this[_0x1a482a(0x5c0)]())this[_0x1a482a(0xb97)](_0x1a482a(0x7ea));},VisuMZ['BattleCore']['BattleManager_startAction']=BattleManager[_0x397c95(0x3b2)],BattleManager[_0x397c95(0x3b2)]=function(){const _0x44be96=_0x397c95,_0x6bba7f=this[_0x44be96(0x127)][_0x44be96(0xc76)](),_0x5b1e53=this['_subject'];_0x6bba7f&&_0x6bba7f[_0x44be96(0x339)]()===_0x5b1e53&&_0x6bba7f['actionBattleCoreJS']('PreStartActionJS'),VisuMZ[_0x44be96(0x1f3)]['BattleManager_startAction'][_0x44be96(0x6a3)](this),_0x6bba7f&&_0x6bba7f[_0x44be96(0x339)]()===_0x5b1e53&&(_0x44be96(0x9b2)===_0x44be96(0xcc1)?this['x']=_0x4e23c9[_0x44be96(0xb5d)]-this[_0x44be96(0x9ec)]()[_0x44be96(0x7eb)]()[_0x44be96(0x4fd)]:_0x6bba7f[_0x44be96(0x5b2)](_0x44be96(0x5cf)));},VisuMZ['BattleCore'][_0x397c95(0x3ac)]=BattleManager['endAction'],BattleManager[_0x397c95(0x87d)]=function(){const _0x261da6=_0x397c95,_0x4fbdf6=this[_0x261da6(0x183)],_0x2b9201=this[_0x261da6(0x127)];_0x4fbdf6&&_0x4fbdf6!==this['_lastAction']&&_0x4fbdf6['subject']()===_0x2b9201&&_0x4fbdf6[_0x261da6(0x5b2)](_0x261da6(0x3ee));if(this[_0x261da6(0x127)]){if(_0x261da6(0xbc2)===_0x261da6(0x2a2)){if(!_0x4cf612[_0x261da6(0x650)]())return;if(!_0xf3e27b[_0x261da6(0x35e)])return;_0x5c1cfb['ConvertParams'](_0x40dc68,_0x3b6230);const _0x7d6d01=_0x6321a7[_0x261da6(0xaeb)](),_0x2ffd64=_0x272373[_0x261da6(0x981)],_0x1d9fd4=_0x24243e['ResetOffset'],_0x10f534=_0xf9e68c[_0x261da6(0xba2)];if(_0x2ffd64){const _0x4772d7=_0x113d32[_0x261da6(0x403)](_0x4f463b[_0x261da6(0x76b)]/0x2),_0x2f98b9=_0x26326d[_0x261da6(0x403)](_0x438bcb[_0x261da6(0x9b1)]/0x2);_0xb63692['setBattleCameraPoint'](_0x4772d7,_0x2f98b9,_0x319a9e[_0x261da6(0xafa)],_0x1aa1c6['EasingType']);}_0x1d9fd4&&_0x178cd2[_0x261da6(0x1ab)](0x0,0x0,_0xd73ded['Duration'],_0x4e1354[_0x261da6(0x729)]);if(_0x10f534)_0x7d6d01['setWaitMode'](_0x261da6(0x907));}else VisuMZ[_0x261da6(0x1f3)][_0x261da6(0x3ac)]['call'](this);}else this[_0x261da6(0xae6)]=_0x261da6(0x731);_0x4fbdf6&&_0x4fbdf6!==this[_0x261da6(0x877)]&&_0x4fbdf6[_0x261da6(0x339)]()===_0x2b9201&&('WUktN'===_0x261da6(0xb8d)?_0x4fbdf6['actionBattleCoreJS'](_0x261da6(0x969)):_0x5d4762['BattleCore'][_0x261da6(0x458)][_0x261da6(0x6a3)](this)),this[_0x261da6(0x1a9)](this[_0x261da6(0x77b)]()),this[_0x261da6(0x877)]=this['_action'];},BattleManager[_0x397c95(0x1a9)]=function(_0x1b8575){const _0x364471=_0x397c95;for(const _0x117ed3 of _0x1b8575){if(!_0x117ed3)continue;if(!_0x117ed3[_0x364471(0x7eb)]())continue;_0x117ed3['battler']()[_0x364471(0x840)]();}},BattleManager[_0x397c95(0x3e4)]=function(){const _0x597243=_0x397c95;!this['_logWindow']['isBusy']()&&(_0x597243(0x669)===_0x597243(0x669)?this['endAction']():(_0x47be4a=_0x2f9078[_0x597243(0xb5d)]/0x2,_0x361b87=_0x3bbd55[_0x597243(0xa9e)]/0x2));},Game_Battler['prototype']['onAllActionsEnd']=function(){const _0x2d73bb=_0x397c95;this[_0x2d73bb(0x823)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x45e1bb=VisuMZ['SkillsStatesCore'][_0x2d73bb(0x716)]['States'];_0x45e1bb&&_0x45e1bb['ActionEndUpdate']===![]&&this[_0x2d73bb(0x7b1)](0x1);}else{if('ZQnlx'===_0x2d73bb(0xa7a)){if(!_0x49bf13[_0x2d73bb(0x650)]())return;const _0x236f20=_0x2db2f6[_0x2d73bb(0x598)];_0x236f20[_0x2d73bb(0x2ed)]();}else this['removeStatesAuto'](0x1);}this[_0x2d73bb(0xbe9)]();},BattleManager['makeEscapeRatio']=function(){const _0xb27fb2=_0x397c95;this[_0xb27fb2(0xa80)]=VisuMZ['BattleCore'][_0xb27fb2(0x716)]['Mechanics'][_0xb27fb2(0x482)]['call'](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x171)]=BattleManager[_0x397c95(0x25f)],BattleManager[_0x397c95(0x25f)]=function(){const _0x5c1b39=_0x397c95;this[_0x5c1b39(0xb97)](_0x5c1b39(0x7e7)),BattleManager[_0x5c1b39(0x69b)][_0x5c1b39(0x96c)](),VisuMZ[_0x5c1b39(0x1f3)][_0x5c1b39(0x171)]['call'](this),this[_0x5c1b39(0xca8)]('EscapeSuccess');},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x7dd)]=BattleManager[_0x397c95(0x5ce)],BattleManager[_0x397c95(0x5ce)]=function(){const _0x4ec491=_0x397c95;this[_0x4ec491(0xb97)]('EscapeFailureJS');const _0x192d5f=this[_0x4ec491(0xa80)];VisuMZ[_0x4ec491(0x1f3)]['BattleManager_onEscapeFailure']['call'](this),this[_0x4ec491(0xa80)]=_0x192d5f+VisuMZ[_0x4ec491(0x1f3)][_0x4ec491(0x716)][_0x4ec491(0x305)]['CalcEscapeRaiseJS']['call'](this),this['processPostBattleCommonEvents'](_0x4ec491(0x184));},BattleManager[_0x397c95(0xcab)]=function(){const _0x307d36=_0x397c95;let _0x2bbfc2=![];if(this[_0x307d36(0x35f)]())for(const _0x1d616a of $gameTroop[_0x307d36(0x484)]()){this[_0x307d36(0x598)][_0x307d36(0x4da)](_0x307d36(0x3de),TextManager['emerge'][_0x307d36(0xadd)](_0x1d616a)),this['_logWindow'][_0x307d36(0x4da)](_0x307d36(0xbf0)),_0x2bbfc2=!![];}if(this[_0x307d36(0x9ea)])this[_0x307d36(0x598)][_0x307d36(0x4da)]('addText',TextManager[_0x307d36(0x84d)]['format']($gameParty[_0x307d36(0xa29)]())),this[_0x307d36(0x598)]['push']('wait');else this[_0x307d36(0xb21)]&&(this[_0x307d36(0x598)][_0x307d36(0x4da)](_0x307d36(0x3de),TextManager[_0x307d36(0x497)][_0x307d36(0xadd)]($gameParty[_0x307d36(0xa29)]())),this[_0x307d36(0x598)][_0x307d36(0x4da)]('wait'));_0x2bbfc2&&(_0x307d36(0x6dc)===_0x307d36(0x6fc)?this[_0x307d36(0x791)]++:(this[_0x307d36(0x598)][_0x307d36(0x4da)](_0x307d36(0xbf0)),this['_logWindow'][_0x307d36(0x4da)](_0x307d36(0x15f)))),this[_0x307d36(0x939)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x307d36(0x1f7)]=![]);},BattleManager[_0x397c95(0x35f)]=function(){const _0x29d64a=_0x397c95;if(BattleManager[_0x29d64a(0x8d5)])return![];return VisuMZ[_0x29d64a(0x1f3)]['Settings'][_0x29d64a(0x7de)][_0x29d64a(0xb55)];},VisuMZ['BattleCore'][_0x397c95(0x63d)]=BattleManager[_0x397c95(0x5c4)],BattleManager['startInput']=function(){const _0x2f6bfd=_0x397c95;VisuMZ[_0x2f6bfd(0x1f3)]['BattleManager_startInput'][_0x2f6bfd(0x6a3)](this),this['isDTB']()&&this[_0x2f6bfd(0xcbc)]()&&!this[_0x2f6bfd(0xb21)]&&$gameParty['canInput']()&&this[_0x2f6bfd(0x2e3)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x2237df=_0x397c95;return VisuMZ[_0x2237df(0x1f3)][_0x2237df(0x716)][_0x2237df(0x982)][_0x2237df(0xb36)];},BattleManager[_0x397c95(0xa24)]=function(){const _0x575305=_0x397c95;this[_0x575305(0x767)]()&&this[_0x575305(0x2e3)]();},VisuMZ[_0x397c95(0x1f3)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x5c3)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x5c3)]=function(){const _0x57c817=_0x397c95;VisuMZ[_0x57c817(0x1f3)][_0x57c817(0x85d)][_0x57c817(0x6a3)](this),BattleManager[_0x57c817(0x939)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x57c817(0x1f7)]=![],this[_0x57c817(0xae7)]());},BattleManager['invokeMagicReflection']=function(_0x1b3756,_0x115c59){const _0x3d78dd=_0x397c95;this[_0x3d78dd(0x183)]['_reflectionTarget']=_0x115c59,this[_0x3d78dd(0x598)][_0x3d78dd(0xa8e)](_0x115c59),this[_0x3d78dd(0x598)][_0x3d78dd(0x61d)](_0x1b3756,this[_0x3d78dd(0x183)]),this['_action'][_0x3d78dd(0xa43)](_0x1b3756),this[_0x3d78dd(0x598)]['displayActionResults'](_0x1b3756,_0x1b3756);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x132)]=BattleManager[_0x397c95(0x4af)],BattleManager[_0x397c95(0x4af)]=function(){const _0x98c5e9=_0x397c95;VisuMZ[_0x98c5e9(0x1f3)][_0x98c5e9(0x132)]['call'](this),this['_actionBattlers']=this[_0x98c5e9(0x201)][_0x98c5e9(0x742)](_0x18e425=>_0x18e425&&_0x18e425['isAppeared']());},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x80b)]=BattleManager[_0x397c95(0x73b)],BattleManager[_0x397c95(0x73b)]=function(_0xdbb86d){const _0x5a1e88=_0x397c95;if(this['_phase']===_0x5a1e88(0x869))this[_0x5a1e88(0x5b3)]();else this['_phase']===_0x5a1e88(0xae1)?_0x5a1e88(0x671)!==_0x5a1e88(0x671)?_0x209fc6[_0x5a1e88(0xaf6)]=![]:this[_0x5a1e88(0x64c)]():VisuMZ[_0x5a1e88(0x1f3)][_0x5a1e88(0x80b)][_0x5a1e88(0x6a3)](this,_0xdbb86d);},BattleManager[_0x397c95(0x2ea)]=function(){const _0x48ac2b=_0x397c95;this[_0x48ac2b(0xc3d)]=this[_0x48ac2b(0x689)][_0x48ac2b(0x468)](0x0),this[_0x48ac2b(0xafb)]=0x0,this[_0x48ac2b(0x227)]=this[_0x48ac2b(0xc3d)][0x0]||null,this[_0x48ac2b(0xae6)]=_0x48ac2b(0x869);},BattleManager[_0x397c95(0x5b3)]=function(){const _0x3b3504=_0x397c95;!this['updateEventMain']()&&!this[_0x3b3504(0x598)][_0x3b3504(0xc5e)]()&&(_0x3b3504(0x894)===_0x3b3504(0x894)?this[_0x3b3504(0xae6)]=_0x3b3504(0x774):(_0x26c788['isAttack']()&&_0x4faff6[_0x3b3504(0x850)]()&&this[_0x3b3504(0x4da)](_0x3b3504(0xb5e),_0xb5d656,_0xeed6c1),_0x2f90af[_0x3b3504(0x398)]()[_0x3b3504(0x72d)]<0x0?this['targetActionSet'](_0xdbcaee,_0x8da968,_0x3fece1):this['wholeActionSet'](_0x24013b,_0x15b32f,_0x3e0a79)));},BattleManager[_0x397c95(0xae1)]=function(_0x1b796a){const _0x4e7ff9=_0x397c95;this['_actionBattlers'][_0x4e7ff9(0x723)](_0x1b796a);if(_0x1b796a===this['_subject'])return;const _0x28fcad=JsonEx['makeDeepCopy'](_0x1b796a[_0x4e7ff9(0xc76)]());this[_0x4e7ff9(0x86d)]['push']([_0x1b796a,_0x28fcad]);},BattleManager[_0x397c95(0x936)]=function(){},BattleManager[_0x397c95(0x438)]=function(){const _0x1596a9=_0x397c95;if(this['isTpb']())this['_phase']='turn';else this['_forcedBattlers'][_0x1596a9(0x187)]>0x0?_0x1596a9(0x37f)!==_0x1596a9(0x406)?this[_0x1596a9(0xae6)]=_0x1596a9(0x731):_0x21b2f8+=_0x386e3d[_0x1596a9(0x76b)]-_0x3b31cb:this['startInput']();},BattleManager[_0x397c95(0x8d6)]=function(){const _0x3749e5=_0x397c95,_0x4241d9=this[_0x3749e5(0x127)];_0x4241d9&&this[_0x3749e5(0x939)]()&&_0x4241d9[_0x3749e5(0xd07)](_0x3749e5(0x5a8));for(;;){const _0x3482bb=this['getNextSubjectFromPool']();if(!_0x3482bb){if('njhuk'===_0x3749e5(0x836)){const _0x5921e0=_0x4e560f[_0x3749e5(0x6cc)];if(_0x5921e0[_0x3749e5(0xb38)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x48ca22(_0x357558['$1'])*0.01;else{if(_0x5921e0[_0x3749e5(0xb38)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x4df7a2(_0x3a16d5['$1'])||0x0;}}else return null;}if(_0x3482bb[_0x3749e5(0x2e9)]()&&_0x3482bb[_0x3749e5(0xa0e)]()){if(_0x3749e5(0x3fc)!==_0x3749e5(0x3fc)){const _0x13e215=_0x46c0c0[_0x3749e5(0x398)]();this[_0x3749e5(0x3eb)](_0x591ad4,_0x13e215),this[_0x3749e5(0x4da)]('applyImmortal',_0xdf377e,_0x39dfa9,!![]),this['push']('performActionStart',_0x5dfb6b,_0x509ff4),this[_0x3749e5(0x4da)](_0x3749e5(0xb09)),this[_0x3749e5(0x4da)](_0x3749e5(0xbcc),_0x2d2ed5,_0x56c857),this[_0x3749e5(0x4da)](_0x3749e5(0xcdc));}else return _0x3482bb;}}},BattleManager[_0x397c95(0xbc5)]=function(){const _0x3a9fe9=_0x397c95;if(this[_0x3a9fe9(0x86d)][_0x3a9fe9(0x187)]>0x0){const _0x17d172=this['_forcedBattlers']['shift'](),_0x1305cb=_0x17d172[0x0];return _0x1305cb[_0x3a9fe9(0x31c)]=_0x1305cb[_0x3a9fe9(0x31c)]||[],_0x1305cb[_0x3a9fe9(0x31c)][0x0]=_0x17d172[0x1],_0x1305cb;}else return this[_0x3a9fe9(0x201)][_0x3a9fe9(0x163)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x23c)]=Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xae1)],Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xae1)]=function(_0x411405,_0x219cb5){const _0x20335c=_0x397c95;VisuMZ[_0x20335c(0x1f3)]['Game_Battler_forceAction'][_0x20335c(0x6a3)](this,_0x411405,_0x219cb5),this[_0x20335c(0x31c)][this[_0x20335c(0x31c)][_0x20335c(0x187)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0x397c95(0x6cf)]['command339']=function(_0x2be2c1){const _0x5a9a3f=_0x397c95;return this[_0x5a9a3f(0x6d5)](_0x2be2c1[0x0],_0x2be2c1[0x1],_0xa24871=>{const _0x3a9b63=_0x5a9a3f;!_0xa24871['isDeathStateAffected']()&&(_0xa24871[_0x3a9b63(0xae1)](_0x2be2c1[0x2],_0x2be2c1[0x3]),BattleManager[_0x3a9b63(0xae1)](_0xa24871));}),!![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x467)]=Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xaa7)],Game_Battler['prototype'][_0x397c95(0xaa7)]=function(){const _0x13c1dd=_0x397c95;VisuMZ[_0x13c1dd(0x1f3)][_0x13c1dd(0x467)][_0x13c1dd(0x6a3)](this),this['_actions'][_0x13c1dd(0x187)]<=0x0&&(_0x13c1dd(0x89f)==='khWjo'?this[_0x13c1dd(0xca7)]=Number['MIN_SAFE_INTEGER']:(_0x2ddc26[_0x13c1dd(0x6cf)][_0x13c1dd(0x28c)][_0x13c1dd(0x6a3)](this),this[_0x13c1dd(0xa6b)]()));},BattleManager['shouldHideBattleEndPopups']=function(){const _0x59e1af=_0x397c95;if(VisuMZ[_0x59e1af(0x1f3)]['Settings'][_0x59e1af(0x7a6)][_0x59e1af(0x509)]??!![])return![];return SceneManager['isSceneBattle']()&&this['_endingBattle'];},VisuMZ['BattleCore']['BattleManager_selectNextCommand']=BattleManager[_0x397c95(0x2e3)],BattleManager[_0x397c95(0x2e3)]=function(){const _0x51910e=_0x397c95;if(this[_0x51910e(0x939)]()){if(_0x51910e(0x13e)!=='ECdZj')this[_0x51910e(0xcb9)]();else{if(this['_phase']===_0x51910e(0x731)){if(_0x4c4028[_0x51910e(0x870)]())return![];}return _0x2707b2[_0x51910e(0x1f3)]['BattleManager_checkBattleEnd'][_0x51910e(0x6a3)](this);}}else{if(_0x51910e(0x28e)===_0x51910e(0x28e))VisuMZ[_0x51910e(0x1f3)][_0x51910e(0x458)][_0x51910e(0x6a3)](this);else return _0x4fb88a[_0x51910e(0x1f3)][_0x51910e(0xa9a)][_0x51910e(0x6a3)](this);}},BattleManager['selectNextCommandTpb']=function(){const _0x55ca51=_0x397c95;if(this[_0x55ca51(0xc1a)]){if(this['_currentActor'][_0x55ca51(0x2e3)]())return;this[_0x55ca51(0x79a)](),this[_0x55ca51(0x17a)](),!this[_0x55ca51(0x127)]&&!this[_0x55ca51(0xc1a)]&&SceneManager[_0x55ca51(0x6fe)][_0x55ca51(0x385)]();}else!this['_subject']&&this[_0x55ca51(0x5bd)]();},BattleManager[_0x397c95(0x17a)]=function(){const _0x17f093=_0x397c95;(!this[_0x17f093(0x767)]()||this[_0x17f093(0x61e)]())&&(this[_0x17f093(0x8fa)]&&(!$gameParty[_0x17f093(0x7ee)]()[_0x17f093(0x932)](this[_0x17f093(0x8fa)])&&(this[_0x17f093(0x8fa)]=null)),!this[_0x17f093(0x8fa)]?(this['cancelActorInput'](),this[_0x17f093(0xc1a)]=null,this[_0x17f093(0xaf6)]=![]):'pcGzp'!==_0x17f093(0x30e)?this['push']('addText',_0x17f093(0x417)['format'](_0x5720bc[_0x17f093(0xc43)](_0x5b7431))):this['revertTpbCachedActor']());},BattleManager[_0x397c95(0x910)]=function(){const _0x677d0=_0x397c95;if(!$gameParty[_0x677d0(0x7ee)]()[_0x677d0(0x932)](this['_tpbSceneChangeCacheActor'])){if(_0x677d0(0xa00)==='iAKAp')this['_tpbSceneChangeCacheActor']=null;else return _0x596be6[_0x677d0(0x301)]?_0x3bc9af[_0x677d0(0x3ce)](_0x677d0(0x5e9)):_0x386934[_0x677d0(0x1f3)][_0x677d0(0x716)][_0x677d0(0x7c8)][_0x677d0(0x479)];}this[_0x677d0(0x8fa)]?'iUEPQ'!=='iUEPQ'?(_0x113d52=this[_0x677d0(0xcfb)][_0x677d0(0x9a8)]??_0x2accb7,_0x131ae2=this[_0x677d0(0xcfb)][_0x677d0(0x1e2)]??_0x3125cd):(this[_0x677d0(0xc1a)]=this[_0x677d0(0x8fa)],this[_0x677d0(0xc1a)][_0x677d0(0x2d9)]='charged',this[_0x677d0(0xaf6)]=!![],this['_tpbSceneChangeCacheActor']=null):'FsIAq'===_0x677d0(0x573)?(this[_0x677d0(0x95f)](),this[_0x677d0(0xc1a)]=null,this['_inputting']=![]):(this[_0x677d0(0x362)](),this[_0x677d0(0xc5a)]());},VisuMZ['BattleCore'][_0x397c95(0x7bd)]=BattleManager[_0x397c95(0xb06)],BattleManager[_0x397c95(0xb06)]=function(){const _0x64cb68=_0x397c95;if(this[_0x64cb68(0xae6)]===_0x64cb68(0x869)){if(_0x64cb68(0x6c0)!==_0x64cb68(0x6c0)){const _0x3c0866=this[_0x64cb68(0xbfb)](_0x64cb68(0x6ad),_0x30fd46['id']);this['select'](_0x3c0866||0x0);}else return this[_0x64cb68(0x1c0)]();}else{if(_0x64cb68(0x4fc)==='iHFYf'){this[_0x64cb68(0x2ad)]=_0x502149[_0x64cb68(0x8a2)]||[0x0,0x0,0x0,0x0],this[_0x64cb68(0x2ad)]=_0x404b77[_0x64cb68(0x49d)](this[_0x64cb68(0x2ad)]),this[_0x64cb68(0x5fa)]=_0x232126[_0x64cb68(0x814)]||0x0;const _0x501283=this['fontSize'](),_0x8763db=_0x5b2088[_0x64cb68(0xaee)](_0x501283*0x1e),_0x1e6eb2=this[_0x64cb68(0x8e7)](_0x8763db,_0x501283);_0x1e6eb2[_0x64cb68(0x60e)]['textColor']=_0x1a4dff[_0x64cb68(0x662)](_0x73a9a[_0x64cb68(0x7ab)]),_0x1e6eb2[_0x64cb68(0x60e)]['drawText'](_0xa9c8f,0x0,0x0,_0x8763db,_0x501283,_0x64cb68(0x971)),_0x1e6eb2['dy']=0x0;}else return VisuMZ[_0x64cb68(0x1f3)]['BattleManager_isTpbMainPhase'][_0x64cb68(0x6a3)](this);}},BattleManager[_0x397c95(0x1c0)]=function(){const _0x1f0cb9=_0x397c95;return this[_0x1f0cb9(0x3b5)]();},VisuMZ[_0x397c95(0x1f3)]['BattleManager_cancelActorInput']=BattleManager['cancelActorInput'],BattleManager['cancelActorInput']=function(){const _0x2bd907=_0x397c95;if(this[_0x2bd907(0x939)]()&&this[_0x2bd907(0xae6)]===_0x2bd907(0x49f)){if(_0x2bd907(0x249)===_0x2bd907(0x38d))return _0x2aa551[_0x2bd907(0x6cf)][_0x2bd907(0x286)][_0x2bd907(0x6a3)](this);else this[_0x2bd907(0xc1a)]=null;}VisuMZ[_0x2bd907(0x1f3)]['BattleManager_cancelActorInput'][_0x2bd907(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)]['BattleManager_inputtingAction']=BattleManager['inputtingAction'],BattleManager[_0x397c95(0x772)]=function(){const _0x4f97bd=_0x397c95,_0x39f9eb=this[_0x4f97bd(0xc1a)];if(_0x39f9eb&&!_0x39f9eb['inputtingAction']()){const _0x18afa2=_0x39f9eb[_0x4f97bd(0xbe0)];_0x39f9eb[_0x4f97bd(0x31c)][_0x18afa2]=new Game_Action(_0x39f9eb);}return VisuMZ['BattleCore'][_0x4f97bd(0x855)][_0x4f97bd(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x5e3)]=BattleManager['checkSubstitute'],BattleManager['checkSubstitute']=function(_0x252bd3){const _0x5a9e5d=_0x397c95;if(this['_action'][_0x5a9e5d(0xca9)]())return![];return VisuMZ[_0x5a9e5d(0x1f3)][_0x5a9e5d(0x5e3)][_0x5a9e5d(0x6a3)](this,_0x252bd3);},SceneManager[_0x397c95(0x650)]=function(){const _0x300ba0=_0x397c95;return this[_0x300ba0(0x6fe)]&&this[_0x300ba0(0x6fe)][_0x300ba0(0x32a)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x399e65=_0x397c95;return Spriteset_Battle[_0x399e65(0x6cf)][_0x399e65(0xa46)]();},SceneManager[_0x397c95(0xb64)]=function(){const _0x3d3c05=_0x397c95;if(SceneManager[_0x3d3c05(0x3f1)](Scene_Options))return!![];return![];},SceneManager[_0x397c95(0x919)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x397c95(0x9c1)]=function(_0x2eb4a1){const _0x223b18=_0x397c95;if(!SceneManager[_0x223b18(0x650)]())return!![];const _0x14e424=[_0x223b18(0x779),_0x223b18(0xaf9)];return _0x14e424[_0x223b18(0x932)](_0x2eb4a1['name']);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x53e)]=SceneManager[_0x397c95(0x4da)],SceneManager['push']=function(_0x5c1162){const _0x3f7db4=_0x397c95;if(!SceneManager[_0x3f7db4(0x9c1)](_0x5c1162))return this['displayBattleCoreTransitionErrorMsg'](_0x5c1162);VisuMZ[_0x3f7db4(0x1f3)][_0x3f7db4(0x53e)]['call'](this,_0x5c1162);},SceneManager[_0x397c95(0x411)]=function(_0x47aa3b){const _0x1eb90e=_0x397c95;if(!$gameTemp[_0x1eb90e(0x196)]())return;if(this[_0x1eb90e(0xbf3)])return;this[_0x1eb90e(0xbf3)]=!![];let _0x205c72='';_0x205c72+=_0x1eb90e(0x170),_0x205c72+=_0x1eb90e(0x611)[_0x1eb90e(0xadd)](_0x47aa3b[_0x1eb90e(0xa29)]),alert(_0x205c72);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x7b7)]=Game_Temp['prototype'][_0x397c95(0xad9)],Game_Temp[_0x397c95(0x6cf)][_0x397c95(0xad9)]=function(_0x1fa0df,_0x1a7dc4,_0x5d25e7){const _0x3c4af8=_0x397c95;_0x1fa0df=_0x1fa0df[_0x3c4af8(0x742)]((_0x120c75,_0x1cb96d,_0x143bcb)=>_0x143bcb[_0x3c4af8(0xb70)](_0x120c75)===_0x1cb96d);if(SceneManager[_0x3c4af8(0x650)]()&&SceneManager[_0x3c4af8(0xcc4)]()){if(_0x3c4af8(0x8ac)!==_0x3c4af8(0x8ac)){if(this[_0x3c4af8(0x512)]!=='')return;typeof _0x46d32e===_0x3c4af8(0x626)?this[_0x3c4af8(0x512)]=_0x2ac1dd[_0x3c4af8(0x9a2)]()[_0x3c4af8(0xb34)]():this[_0x3c4af8(0x512)]=_0x34188d[_0x3c4af8(0x12e)]();}else _0x5d25e7=!_0x5d25e7;}VisuMZ[_0x3c4af8(0x1f3)][_0x3c4af8(0x7b7)][_0x3c4af8(0x6a3)](this,_0x1fa0df,_0x1a7dc4,_0x5d25e7),SceneManager[_0x3c4af8(0x650)]()&&(_0x3c4af8(0xa82)===_0x3c4af8(0x480)?(this[_0x3c4af8(0xcfe)][_0x3c4af8(0x8ff)]=_0x140581(_0x57c427['$1']),this[_0x3c4af8(0xcfe)][_0x3c4af8(0x269)]=_0x4f617a(_0x360f16['$2'])):BattleManager[_0x3c4af8(0x69b)][_0x3c4af8(0x2c3)]());},Game_Temp[_0x397c95(0x6cf)]['setLastPluginCommandInterpreter']=function(_0x25cec3){this['_lastPluginCommandInterpreter']=_0x25cec3;},Game_Temp[_0x397c95(0x6cf)][_0x397c95(0xaeb)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x397c95(0x6cf)][_0x397c95(0x4f3)]=function(){const _0x5909a2=_0x397c95;this[_0x5909a2(0x6c3)]=undefined;},Game_Temp[_0x397c95(0x6cf)][_0x397c95(0x19d)]=function(_0x427670){const _0x4312fc=_0x397c95;if($gameMap&&$dataMap&&$dataMap[_0x4312fc(0x6cc)]){if(_0x4312fc(0x1ca)===_0x4312fc(0xc71))return;else this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x4312fc(0x6cc)]);}const _0xbdd61e=$dataTroops[_0x427670];if(_0xbdd61e){if('VtkFy'!==_0x4312fc(0x17b)){if(_0x25f705['VisuMZ_2_BattleSystemCTB']&&_0x3df740[_0x4312fc(0xac0)]())return![];else{if(!_0x4dd5fd[_0x4312fc(0x1f3)][_0x4312fc(0x3cb)])return![];const _0x2935f0=_0x53c8cf[_0x4312fc(0x4c3)]()[_0x4312fc(0x742)](_0x40f575=>_0x40f575[_0x4312fc(0x784)]()&&_0x40f575[_0x4312fc(0x3a6)]());return _0x2935f0[_0x4312fc(0x187)]>0x0&&_0x51166f[_0x4312fc(0x793)]()!==_0x2935f0[_0x2935f0[_0x4312fc(0x187)]-0x1];}}else{let _0x3c498d=DataManager[_0x4312fc(0x2c6)](_0xbdd61e['id']);this[_0x4312fc(0x891)](_0x3c498d);}}},Game_Temp[_0x397c95(0x6cf)]['parseForcedGameTroopSettingsBattleCore']=function(_0x4ecfc2){const _0x5f087b=_0x397c95;if(!_0x4ecfc2)return;if(_0x4ecfc2[_0x5f087b(0xb38)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x4929d0=String(RegExp['$1']);if(_0x4929d0['match'](/DEFAULT/i))this[_0x5f087b(0x6c3)]=_0x5f087b(0xac1);else{if(_0x4929d0['match'](/LIST/i))this['_forcedBattleLayout']='list';else{if(_0x4929d0['match'](/XP/i)){if(_0x5f087b(0x2e4)==='yJLhK'){if(this[_0x5f087b(0x179)]<=0x0)return;const _0x5c8e5a=this[_0x5f087b(0x9dc)]-this[_0x5f087b(0x179)],_0x451bdf=this[_0x5f087b(0x9dc)]/0x2,_0x420e4b=this[_0x5f087b(0xa34)],_0x4e776c=-_0x420e4b/_0x23cc83['pow'](_0x451bdf,0x2);this[_0x5f087b(0x88c)]=_0x4e776c*_0x892a9[_0x5f087b(0x3cd)](_0x5c8e5a-_0x451bdf,0x2)+_0x420e4b,this[_0x5f087b(0x179)]--;if(this['_jumpDuration']<=0x0)return this[_0x5f087b(0xcc9)]();}else this['_forcedBattleLayout']='xp';}else{if(_0x4929d0['match'](/PORTRAIT/i))this[_0x5f087b(0x6c3)]=_0x5f087b(0xab1);else{if(_0x4929d0[_0x5f087b(0xb38)](/BORDER/i))_0x5f087b(0x9e3)!=='lNuqI'?(_0x3de5b6[_0x5f087b(0x975)]=_0x42efc4['_ptbActionCost']||{},_0x1b91c0[_0x5f087b(0x975)]['priority']=0x0):this[_0x5f087b(0x6c3)]=_0x5f087b(0x8fe);else{if(_0x4929d0['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i))_0x5f087b(0x6a4)===_0x5f087b(0x6a4)?Imported[_0x5f087b(0x667)]?_0x5f087b(0x9ad)===_0x5f087b(0x9ad)?this[_0x5f087b(0x6c3)]=_0x5f087b(0xaba):_0x18238a[_0x5f087b(0xc91)]():this['_forcedBattleLayout']='default':this[_0x5f087b(0x4da)](_0x5f087b(0x362),_0x16b50f);else{if(_0x4929d0[_0x5f087b(0xb38)](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(Imported[_0x5f087b(0xa6a)]){if('mgKeo'===_0x5f087b(0x7d7))this[_0x5f087b(0x6c3)]=_0x5f087b(0x605);else return this['currentAction']()&&this[_0x5f087b(0xc76)]()[_0x5f087b(0x398)]()&&!this[_0x5f087b(0xc76)]()['isMagical']();}else this[_0x5f087b(0x6c3)]='default';}}}}}}}}},VisuMZ['BattleCore']['Game_System_initialize']=Game_System[_0x397c95(0x6cf)][_0x397c95(0x918)],Game_System[_0x397c95(0x6cf)]['initialize']=function(){const _0xf81675=_0x397c95;VisuMZ[_0xf81675(0x1f3)][_0xf81675(0xc0d)]['call'](this),this[_0xf81675(0x312)]();},Game_System[_0x397c95(0x6cf)][_0x397c95(0x312)]=function(){const _0x230cca=_0x397c95;this[_0x230cca(0xc39)]=this[_0x230cca(0xc39)]||[];},Game_System[_0x397c95(0x6cf)][_0x397c95(0xb30)]=function(){const _0x259607=_0x397c95;if(this[_0x259607(0xc39)]===undefined)this[_0x259607(0x312)]();return this['_defeatedEnemies'];},Game_System[_0x397c95(0x6cf)]['registerDefeatedEnemy']=function(_0x4c325b){const _0x2d5a1a=_0x397c95;if(this[_0x2d5a1a(0xc39)]===undefined)this[_0x2d5a1a(0x312)]();if(!_0x4c325b)return;if(this['_defeatedEnemies'][_0x2d5a1a(0x932)](_0x4c325b))return;this[_0x2d5a1a(0xc39)]['push'](_0x4c325b),this[_0x2d5a1a(0xc39)]['sort']((_0x176332,_0x36ab58)=>_0x176332-_0x36ab58);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x615)]=Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0xb52)],Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0xb52)]=function(_0x2a37d1){const _0x300065=_0x397c95,_0x115e3f=this[_0x300065(0xa0e)](),_0x4ea070=this[_0x300065(0xa1a)]();VisuMZ['BattleCore'][_0x300065(0x615)][_0x300065(0x6a3)](this,_0x2a37d1);this[_0x300065(0x407)]()&&_0x115e3f&&this[_0x300065(0x88a)]()&&(this['_visualHpGauge_JustDied']=!this[_0x300065(0x569)](),$gameSystem['registerDefeatedEnemy'](this[_0x300065(0x6a0)]()));if(SceneManager[_0x300065(0x650)]()&&_0x4ea070!==this[_0x300065(0xa1a)]()){if(this[_0x300065(0x7eb)]()){if(_0x300065(0x3bd)===_0x300065(0x3bd))this['battler']()[_0x300065(0x840)]();else{const _0x53e77e=_0x513cd4['width'],_0xd10e24=_0x5a32e0['round']((_0x6975bf['boxWidth']-_0x53e77e)/0x2),_0x4e0d7a=this[_0x300065(0x9e5)](0x4,!![]),_0x9a1b5=_0x5271d8[_0x300065(0xa9e)]-_0x4e0d7a+(_0x36c098['height']-_0x49bf8e['boxHeight'])/0x2;return new _0x2e2266(_0xd10e24,_0x9a1b5,_0x53e77e,_0x4e0d7a);}}}},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x569)]=function(){const _0x45dcab=_0x397c95;return $gameSystem[_0x45dcab(0xb30)]()['includes'](this[_0x45dcab(0xb98)]);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xc75)]=Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x817)],Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x817)]=function(_0x3f3dcb){const _0x13e8a5=_0x397c95;VisuMZ['BattleCore']['Game_BattlerBase_eraseState'][_0x13e8a5(0x6a3)](this,_0x3f3dcb),this[_0x13e8a5(0x407)]()&&_0x3f3dcb===this[_0x13e8a5(0x207)]()&&this[_0x13e8a5(0xa0e)]()&&(this[_0x13e8a5(0xd05)]=![]),!this[_0x13e8a5(0xc9f)]&&!this[_0x13e8a5(0x12d)]&&SceneManager['isSceneBattle']()&&this['requestMotionRefresh']();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x57b)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x15f)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0x15f)]=function(){const _0x4548a5=_0x397c95;VisuMZ[_0x4548a5(0x1f3)][_0x4548a5(0x57b)][_0x4548a5(0x6a3)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4548a5(0xc49)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x4548a5(0x738)]=_0x4548a5(0xac1),this[_0x4548a5(0x5f9)]();},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x5f9)]=function(){const _0x3c77db=_0x397c95;this[_0x3c77db(0x512)]='';},VisuMZ['BattleCore'][_0x397c95(0x5cc)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x1c4)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0x1c4)]=function(_0x592296){const _0x36fd1a=_0x397c95;VisuMZ[_0x36fd1a(0x1f3)][_0x36fd1a(0x5cc)][_0x36fd1a(0x6a3)](this,_0x592296),this[_0x36fd1a(0x5f9)]();},VisuMZ[_0x397c95(0x1f3)]['Game_Action_setSkill']=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x8aa)],Game_Action['prototype'][_0x397c95(0x8aa)]=function(_0x3d74db){const _0x454fe1=_0x397c95;VisuMZ['BattleCore'][_0x454fe1(0x47b)][_0x454fe1(0x6a3)](this,_0x3d74db),this[_0x454fe1(0x5f9)]();},VisuMZ['BattleCore']['Game_Action_setItem']=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x3a5)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0x3a5)]=function(_0x386a45){const _0x4726aa=_0x397c95;VisuMZ[_0x4726aa(0x1f3)][_0x4726aa(0x744)][_0x4726aa(0x6a3)](this,_0x386a45),this['clearTargetBattlerKey']();},Game_Action[_0x397c95(0x6cf)][_0x397c95(0xb9d)]=function(_0x4d3a25,_0x37b12f){const _0x342f13=_0x397c95;return VisuMZ['BattleCore']['Settings'][_0x342f13(0x7a6)]['OverallFormulaJS'][_0x342f13(0x6a3)](this,_0x4d3a25,_0x37b12f);},Game_Action['prototype'][_0x397c95(0x394)]=function(_0x4efb54,_0x444c11){const _0x9fde5a=_0x397c95;return VisuMZ['BattleCore'][_0x9fde5a(0x716)][_0x9fde5a(0x7a6)][_0x9fde5a(0x712)][_0x9fde5a(0x6a3)](this,_0x4efb54,_0x444c11);},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x866)]=function(_0x2e8c5a,_0xfb8dea){const _0x262883=_0x397c95;return VisuMZ[_0x262883(0x1f3)][_0x262883(0x716)][_0x262883(0x7a6)][_0x262883(0x726)]['call'](this,_0x2e8c5a,_0xfb8dea);},VisuMZ['BattleCore'][_0x397c95(0xad0)]=Game_Action[_0x397c95(0x6cf)]['itemHit'],Game_Action[_0x397c95(0x6cf)][_0x397c95(0x294)]=function(_0x2db1bd){const _0x28ad92=_0x397c95,_0x475e0f=this['item']()[_0x28ad92(0x6cc)];if(_0x475e0f[_0x28ad92(0xb38)](/<ALWAYS HIT>/i)){if(_0x28ad92(0x54e)==='LXwqU')return 0x1;else this[_0x28ad92(0x90f)][_0x28ad92(0xab3)](_0x5be507,0x0,_0x1333ce);}else{if(_0x475e0f['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0x28ad92(0xcda)===_0x28ad92(0xc13)){const _0x3c121a=_0x50f068[_0x4d3448];if(_0x3c121a){if(_0x3c121a[_0x28ad92(0x6cc)][_0x28ad92(0xb38)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x4c75cf=_0x13a7ce(_0x382a8f['$1'])['split'](/[\r\n]+/)[_0x28ad92(0x723)](''),_0x1153ae=this[_0x28ad92(0x831)](_0x4c75cf);_0x26f6e3=this[_0x28ad92(0x1b4)](_0x1153ae)||_0x40c7e8,_0x51c5a7=_0x4a68b3[_0x28ad92(0x76a)](_0x53d609);}}return _0x1cf80b;}else return Number(RegExp['$1'])/0x64;}else{if(_0x28ad92(0x839)===_0x28ad92(0x839)){let _0x155d4c=VisuMZ[_0x28ad92(0x1f3)][_0x28ad92(0xad0)]['call'](this,_0x2db1bd);return _0x155d4c=this[_0x28ad92(0xc49)]['hitRate']*_0x155d4c+this[_0x28ad92(0xc49)][_0x28ad92(0x83a)],_0x155d4c;}else return _0x10bdda[_0x28ad92(0x1f3)][_0x28ad92(0x716)][_0x28ad92(0x7a6)]['GuardFormulaJS'][_0x28ad92(0x6a3)](this,_0x4be281,_0x550985);}}},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x8a4)]=function(_0x5c741f){const _0x41f690=_0x397c95;if(!this['item']()[_0x41f690(0x649)][_0x41f690(0xc97)])return 0x0;let _0x1f5893=VisuMZ['BattleCore']['Settings'][_0x41f690(0x7a6)]['CriticalHitRateJS'][_0x41f690(0x6a3)](this,_0x5c741f);return _0x1f5893=this[_0x41f690(0xc49)][_0x41f690(0x1a8)]*_0x1f5893+this[_0x41f690(0xc49)][_0x41f690(0xc44)],_0x1f5893;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x5de)]=function(_0x486776){const _0x59a0b7=_0x397c95;return _0x486776=VisuMZ[_0x59a0b7(0x1f3)][_0x59a0b7(0x716)][_0x59a0b7(0x7a6)][_0x59a0b7(0x2c7)]['call'](this,_0x486776),_0x486776=this[_0x59a0b7(0xc49)][_0x59a0b7(0x3f0)]*_0x486776+this['_multipliers']['criticalDmgFlat'],_0x486776;},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xae4)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0xb79)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0xb79)]=function(_0x30f3de){const _0x49ef11=_0x397c95;if(this[_0x49ef11(0x738)]!==_0x49ef11(0xac1)){if(_0x49ef11(0xc38)!==_0x49ef11(0xc38)){_0x2c3b9a[_0x49ef11(0x6cf)][_0x49ef11(0x67c)]['call'](this);const _0x503bc2=this[_0x49ef11(0x1b2)]();_0x503bc2===_0x49ef11(0x8fe)&&this[_0x49ef11(0x4c5)]();}else return this[_0x49ef11(0x882)](_0x30f3de);}else{if(DataManager[_0x49ef11(0x922)](this[_0x49ef11(0x398)]())==='MANUAL'){if(_0x49ef11(0x538)==='JxueX'){const _0x83402a=_0x1aa765[_0x49ef11(0x4c3)]();_0x208a8c[_0x49ef11(0x6bd)]()&&_0x83402a[_0x49ef11(0x187)]>0x1&&this[_0x49ef11(0x7d0)](_0x49ef11(0xab9),this[_0x49ef11(0x690)]['bind'](this));}else return VisuMZ['BattleCore'][_0x49ef11(0xae4)][_0x49ef11(0x6a3)](this,_0x30f3de);}else return this[_0x49ef11(0x64b)](_0x30f3de);}},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x801)]=function(_0xc6bea4){const _0x421f17=_0x397c95;this[_0x421f17(0x738)]=_0xc6bea4;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x882)]=function(_0x2a2cd5){const _0x188687=_0x397c95,_0x44af4f=this[_0x188687(0x398)](),_0x358026=_0x44af4f[_0x188687(0x649)][_0x188687(0x7f5)];_0x44af4f['damage'][_0x188687(0x7f5)]=this['_customDamageFormula'];let _0xff130a=VisuMZ['BattleCore'][_0x188687(0xae4)][_0x188687(0x6a3)](this,_0x2a2cd5);return _0x44af4f[_0x188687(0x649)][_0x188687(0x7f5)]=_0x358026,_0xff130a;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x6f9)]=function(){const _0x3d7c2d=_0x397c95;if(this[_0x3d7c2d(0x398)]()[_0x3d7c2d(0x6cc)][_0x3d7c2d(0xb38)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x546fb1=String(RegExp['$1'])['toUpperCase']()[_0x3d7c2d(0xb34)]();return _0x546fb1;}return'MANUAL';},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x64b)]=function(_0x560eec){const _0x16b9d7=_0x397c95,_0xc60dfb=DataManager[_0x16b9d7(0x922)](this['item']()),_0x6a01bc=VisuMZ[_0x16b9d7(0x1aa)][_0xc60dfb];try{return _0x6a01bc['Formula'][_0x16b9d7(0x6a3)](this,_0x560eec);}catch(_0x239f96){if($gameTemp[_0x16b9d7(0x196)]())console[_0x16b9d7(0x3dd)](_0x239f96);return VisuMZ[_0x16b9d7(0x1f3)][_0x16b9d7(0xae4)][_0x16b9d7(0x6a3)](this);}},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x46e)]=function(_0x5d6998,_0x5cc4c1){const _0x4dbfc6=_0x397c95;if(this[_0x4dbfc6(0xb00)]())return _0x5cc4c1;const _0x348aa7=this['subject'](),_0x21231f=_0x5d6998;let _0x517034=[],_0x57cd30=[];_0x517034[_0x4dbfc6(0x4da)](this['_armorPenetration'][_0x4dbfc6(0xa4e)],this[_0x4dbfc6(0x6c1)][_0x4dbfc6(0xa6c)]),_0x57cd30[_0x4dbfc6(0x4da)](this[_0x4dbfc6(0x6c1)][_0x4dbfc6(0x4c2)],this[_0x4dbfc6(0x6c1)][_0x4dbfc6(0xad8)]);const _0x502258=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x4f36eb=this[_0x4dbfc6(0x279)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x25d159=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x407df6=this[_0x4dbfc6(0x279)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x517034=_0x517034[_0x4dbfc6(0x900)](_0x21231f[_0x4dbfc6(0xa9d)]()[_0x4dbfc6(0xb9a)](_0x2c557e=>_0x2c557e&&_0x2c557e[_0x4dbfc6(0x6cc)][_0x4dbfc6(0xb38)](_0x502258)?Number(RegExp['$1']):0x0)),_0x57cd30=_0x57cd30[_0x4dbfc6(0x900)](_0x21231f[_0x4dbfc6(0xa9d)]()[_0x4dbfc6(0xb9a)](_0x50f0e5=>_0x50f0e5&&_0x50f0e5[_0x4dbfc6(0x6cc)][_0x4dbfc6(0xb38)](_0x4f36eb)?Number(RegExp['$1'])/0x64:0x0)),_0x517034=_0x517034[_0x4dbfc6(0x900)](_0x348aa7['traitObjects']()['map'](_0x238c39=>_0x238c39&&_0x238c39[_0x4dbfc6(0x6cc)][_0x4dbfc6(0xb38)](_0x25d159)?Number(RegExp['$1']):0x0)),_0x57cd30=_0x57cd30['concat'](_0x348aa7[_0x4dbfc6(0xa9d)]()[_0x4dbfc6(0xb9a)](_0x535f2c=>_0x535f2c&&_0x535f2c[_0x4dbfc6(0x6cc)]['match'](_0x407df6)?Number(RegExp['$1'])/0x64:0x0));this['item']()[_0x4dbfc6(0x6cc)][_0x4dbfc6(0xb38)](_0x25d159)&&(_0x4dbfc6(0x43f)!==_0x4dbfc6(0x368)?_0x517034['push'](Number(RegExp['$1'])):_0x5799d2+=_0x1b044e[_0x4dbfc6(0x3b1)](_0x4b03fb['hpDamage']));if(this['item']()[_0x4dbfc6(0x6cc)][_0x4dbfc6(0xb38)](_0x407df6)){if(_0x4dbfc6(0x1d2)!==_0x4dbfc6(0x1d2)){const _0xcb5a39=_0x1aa083[_0x4dbfc6(0x567)],_0xb69675='autoBattleUseSkills';this[_0x4dbfc6(0x659)](_0xcb5a39,_0xb69675);}else _0x57cd30[_0x4dbfc6(0x4da)](Number(RegExp['$1']));}_0x5cc4c1=_0x517034[_0x4dbfc6(0x2b9)]((_0x312a0d,_0x490ca1)=>_0x312a0d-_0x490ca1,_0x5cc4c1);if(_0x5cc4c1>0x0){if(_0x4dbfc6(0x2a7)==='yduyP')_0x5cc4c1=_0x57cd30[_0x4dbfc6(0x2b9)]((_0x20ccca,_0x30dc07)=>_0x20ccca*(0x1-_0x30dc07),_0x5cc4c1);else{_0x5f57ab[_0x4dbfc6(0x6cf)][_0x4dbfc6(0xb89)]['call'](this,_0x4619a0),_0x53c64e[_0x4dbfc6(0xb89)](this[_0x4dbfc6(0x9ec)]()),_0x138910['select'](this[_0x4dbfc6(0x9ec)]());if(!this[_0x4dbfc6(0x9ec)]())return;if(this[_0x4dbfc6(0x74f)]()){const _0x42228f=_0x2c907b[_0x4dbfc6(0x6fe)][_0x4dbfc6(0xba1)];this[_0x4dbfc6(0x9ec)]()[_0x4dbfc6(0x850)]()?_0x42228f[_0x4dbfc6(0xb89)](this['enemy']()[_0x4dbfc6(0x6e7)]()):_0x42228f['deselect']();}}}return _0x5cc4c1;},VisuMZ['BattleCore'][_0x397c95(0x257)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0xa77)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0xa77)]=function(_0x4cbf00,_0x2a5edb){const _0x3a5e7e=_0x397c95;_0x2a5edb=_0x2a5edb*this[_0x3a5e7e(0xc49)]['damageRate'],_0x2a5edb+=this[_0x3a5e7e(0xc49)][_0x3a5e7e(0x69d)]*(_0x2a5edb>=0x0?0x1:-0x1),_0x2a5edb=this[_0x3a5e7e(0x24c)](_0x3a5e7e(0xb96),_0x4cbf00,_0x2a5edb,![]),_0x2a5edb=this['applyDamageCaps'](_0x2a5edb),_0x2a5edb=Math[_0x3a5e7e(0x403)](_0x2a5edb),this[_0x3a5e7e(0xcaa)]=_0x2a5edb,this[_0x3a5e7e(0x52b)]=this['_totalValue']||0x0,this[_0x3a5e7e(0x52b)]+=_0x2a5edb,VisuMZ[_0x3a5e7e(0x1f3)][_0x3a5e7e(0x257)]['call'](this,_0x4cbf00,_0x2a5edb),this[_0x3a5e7e(0x24c)](_0x3a5e7e(0x430),_0x4cbf00,_0x2a5edb,!![]);},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x5f8)]=function(_0x3ae585){const _0xa00334=_0x397c95;if(this[_0xa00334(0x47d)]())return _0x3ae585;return _0x3ae585=this['applySoftDamageCap'](_0x3ae585),_0x3ae585=this[_0xa00334(0x99d)](_0x3ae585),_0x3ae585;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x47d)]=function(){const _0x51b753=_0x397c95,_0x15dbb3=/<BYPASS DAMAGE CAP>/i;if(this[_0x51b753(0x398)]()['note'][_0x51b753(0xb38)](_0x15dbb3))return!![];if(this[_0x51b753(0x339)]()[_0x51b753(0xa9d)]()[_0x51b753(0x4f0)](_0x523318=>_0x523318&&_0x523318['note'][_0x51b753(0xb38)](_0x15dbb3)))return!![];return!VisuMZ[_0x51b753(0x1f3)][_0x51b753(0x716)]['Damage'][_0x51b753(0xb94)];},Game_Action['prototype']['applySoftDamageCap']=function(_0x1eed22){const _0x23d13f=_0x397c95;if(!VisuMZ[_0x23d13f(0x1f3)]['Settings'][_0x23d13f(0x7a6)][_0x23d13f(0x1c8)])return _0x1eed22;const _0x3d604e=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x23d13f(0x398)]()[_0x23d13f(0x6cc)][_0x23d13f(0xb38)](_0x3d604e))return _0x1eed22;if(this['subject']()[_0x23d13f(0xa9d)]()['some'](_0x1464f5=>_0x1464f5&&_0x1464f5[_0x23d13f(0x6cc)]['match'](_0x3d604e)))return _0x1eed22;const _0x3d757e=_0x1eed22<0x0?-0x1:0x1;_0x1eed22=Math['abs'](_0x1eed22);let _0x147034=this[_0x23d13f(0x339)]()[_0x23d13f(0x9a4)]();if(this[_0x23d13f(0x398)]()[_0x23d13f(0x6cc)][_0x23d13f(0xb38)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)){if('jAVHX'===_0x23d13f(0x34e))return _0x789e9b[_0x23d13f(0x1f3)][_0x23d13f(0x716)][_0x23d13f(0xc24)][_0x23d13f(0x94a)];else _0x147034+=Number(RegExp['$1'])/0x64;}_0x147034=_0x147034[_0x23d13f(0x8ca)](0.01,0x1);const _0x35b9c9=this['getHardDamageCap'](),_0x4d00fc=_0x147034*_0x35b9c9;if(_0x1eed22>_0x4d00fc&&_0x35b9c9>_0x4d00fc){_0x1eed22-=_0x4d00fc;const _0x4fb7a3=VisuMZ[_0x23d13f(0x1f3)][_0x23d13f(0x716)]['Damage']['DefaultSoftScaler'],_0x3a4a8f=Math[_0x23d13f(0x483)](0x1-_0x1eed22/((_0x35b9c9-_0x4d00fc)*_0x4fb7a3+_0x1eed22),0.01);_0x1eed22*=_0x3a4a8f,_0x1eed22+=_0x4d00fc;}return _0x1eed22*_0x3d757e;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x77f)]=function(){const _0x2b69ec=_0x397c95;if(this[_0x2b69ec(0x398)]()[_0x2b69ec(0x6cc)]['match'](/<DAMAGE CAP:[ ](\d+)>/i))return Number(RegExp['$1']);else{if(_0x2b69ec(0xbc4)!==_0x2b69ec(0xbc4))this[_0x2b69ec(0xb27)]['visible']=this['isOpen']();else return this['subject']()[_0x2b69ec(0x410)]();}},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x99d)]=function(_0x12dc8a){const _0x46b38b=_0x397c95;console[_0x46b38b(0x3dd)](_0x12dc8a);let _0x196a8f=this[_0x46b38b(0x77f)]();return _0x12dc8a['clamp'](-_0x196a8f,_0x196a8f);},Game_Action[_0x397c95(0x6cf)]['shouldDisperseDamage']=function(){const _0x5f07b7=_0x397c95;if(!this[_0x5f07b7(0x398)]())return![];return(this[_0x5f07b7(0x398)]()[_0x5f07b7(0x6cc)]||'')[_0x5f07b7(0xb38)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x397c95(0x6cf)]['disperseDamage']=function(_0x183872){const _0x35276b=_0x397c95;if(this[_0x35276b(0xa7d)]()){let _0x562719=BattleManager[_0x35276b(0x689)];_0x183872/=_0x562719['length'];if(this[_0x35276b(0x5d0)]()){if(_0x35276b(0xbad)!==_0x35276b(0xbad)){if(this[_0x35276b(0x7eb)]())this[_0x35276b(0x7eb)]()[_0x35276b(0x840)]();}else _0x183872*=this[_0x35276b(0x339)]()[_0x35276b(0x2a4)]()+0x1;}_0x183872=_0x183872>0x0?Math['ceil'](_0x183872):Math[_0x35276b(0xaee)](_0x183872);}return _0x183872;},VisuMZ['BattleCore'][_0x397c95(0x31d)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0xb9d)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0xb9d)]=function(_0x3c2371,_0x49d81a){const _0x4738ac=_0x397c95;let _0x1e30f4=VisuMZ[_0x4738ac(0x1f3)][_0x4738ac(0x31d)]['call'](this,_0x3c2371,_0x49d81a);return this['disperseDamage'](_0x1e30f4);},Game_Action['prototype'][_0x397c95(0x67f)]=function(_0x145fff,_0x46c2b0){const _0x132d03=_0x397c95;let _0x49ae26=(_0x145fff['mhp']*_0x46c2b0[_0x132d03(0xb19)]+_0x46c2b0['value2'])*_0x145fff[_0x132d03(0x304)];_0x49ae26=this[_0x132d03(0x413)](_0x49ae26);if(this[_0x132d03(0xc57)]()){if(_0x132d03(0x56b)===_0x132d03(0x4eb)){if(!this['isBorderStylePortraitShown']())return;if(!this[_0x132d03(0x86b)])this['createBorderStylePortraitSprite']();this[_0x132d03(0x452)](),this[_0x132d03(0x8b2)]();}else _0x49ae26*=this['subject']()[_0x132d03(0xa8f)];}_0x49ae26=Math[_0x132d03(0xaee)](_0x49ae26),_0x49ae26!==0x0&&(_0x145fff[_0x132d03(0x1ef)](_0x49ae26),this[_0x132d03(0x126)](_0x145fff));},Game_Action['prototype'][_0x397c95(0xa7b)]=function(_0x1fed1b,_0x1ba68f){const _0x544211=_0x397c95;let _0x16d72d=(_0x1fed1b[_0x544211(0x612)]*_0x1ba68f['value1']+_0x1ba68f[_0x544211(0x258)])*_0x1fed1b[_0x544211(0x304)];_0x16d72d=this[_0x544211(0x413)](_0x16d72d),this[_0x544211(0xc57)]()&&(_0x544211(0x8e3)===_0x544211(0x8e3)?_0x16d72d*=this['subject']()[_0x544211(0xa8f)]:_0x2ebde9['damage'][_0x544211(0xc97)]=!![]),_0x16d72d=Math[_0x544211(0xaee)](_0x16d72d),_0x16d72d!==0x0&&(_0x544211(0x1cd)===_0x544211(0x1cd)?(_0x1fed1b[_0x544211(0xc00)](_0x16d72d),this[_0x544211(0x126)](_0x1fed1b)):this[_0x544211(0xcfe)][_0x544211(0x265)]=_0x1e4a33[_0x544211(0x6cf)][_0x544211(0x7e4)][_0x544211(0x6a3)](this));},Game_Action[_0x397c95(0x6cf)]['itemEffectGainTp']=function(_0x41a196,_0x504aad){const _0x39950e=_0x397c95;let _0x11aba5=Math[_0x39950e(0xaee)](_0x504aad['value1']);_0x11aba5=this[_0x39950e(0x413)](_0x11aba5),_0x11aba5!==0x0&&(_0x39950e(0x599)!==_0x39950e(0x247)?(_0x41a196[_0x39950e(0x4d0)](_0x11aba5),this[_0x39950e(0x126)](_0x41a196)):_0x178206=_0x2b139b);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xb1d)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0xa43)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0xa43)]=function(_0xdfaa4a){const _0x54da13=_0x397c95;this[_0x54da13(0x24c)]('PreApply%1JS',_0xdfaa4a,0x0,!![]),VisuMZ[_0x54da13(0x1f3)][_0x54da13(0xb1d)][_0x54da13(0x6a3)](this,_0xdfaa4a),this[_0x54da13(0x24c)](_0x54da13(0xc72),_0xdfaa4a,this['_executedValue']||0x0,!![]),this[_0x54da13(0xbc0)](_0xdfaa4a);},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x24c)]=function(_0x1b4329,_0x207feb,_0x32adcd,_0x53e24f){const _0xf2cf60=_0x397c95;if(this[_0xf2cf60(0x12d)]||this[_0xf2cf60(0xc9f)])return;_0x32adcd=_0x32adcd||0x0;const _0x19db75=_0x32adcd,_0x6b2ae4=VisuMZ[_0xf2cf60(0x1f3)][_0xf2cf60(0x716)][_0xf2cf60(0x305)],_0x34f2ab=_0x1b4329['format']('');if(_0x6b2ae4[_0x34f2ab]){_0x32adcd=_0x6b2ae4[_0x34f2ab]['call'](this,_0x32adcd,_0x207feb);if(_0x53e24f)_0x32adcd=_0x19db75;}let _0x3d8e5e=VisuMZ[_0xf2cf60(0x1f3)][_0xf2cf60(0xc17)](this[_0xf2cf60(0x398)](),_0x1b4329['format'](''));if(VisuMZ[_0xf2cf60(0x1f3)]['JS'][_0x3d8e5e]){if(_0xf2cf60(0x770)!==_0xf2cf60(0x770))this[_0xf2cf60(0x95c)](_0xf2cf60(0x2ef));else{_0x32adcd=VisuMZ[_0xf2cf60(0x1f3)]['JS'][_0x3d8e5e]['call'](this,this[_0xf2cf60(0x339)](),_0x207feb,this['item'](),_0x32adcd);if(_0x53e24f)_0x32adcd=_0x19db75;}}for(const _0x294053 of this['subject']()['traitObjects']()){if('tYaMF'===_0xf2cf60(0x7b3))return this[_0xf2cf60(0xcb6)]();else{if(!_0x294053)continue;_0x3d8e5e=VisuMZ[_0xf2cf60(0x1f3)][_0xf2cf60(0xc17)](_0x294053,_0x1b4329[_0xf2cf60(0xadd)]('AsUser'));if(VisuMZ[_0xf2cf60(0x1f3)]['JS'][_0x3d8e5e]){_0x32adcd=VisuMZ[_0xf2cf60(0x1f3)]['JS'][_0x3d8e5e][_0xf2cf60(0x6a3)](this,this['subject'](),_0x207feb,_0x294053,_0x32adcd);if(_0x53e24f)_0x32adcd=_0x19db75;}}}for(const _0x3e961a of _0x207feb[_0xf2cf60(0xa9d)]()){if(!_0x3e961a)continue;_0x3d8e5e=VisuMZ['BattleCore'][_0xf2cf60(0xc17)](_0x3e961a,_0x1b4329['format'](_0xf2cf60(0x72c)));if(VisuMZ[_0xf2cf60(0x1f3)]['JS'][_0x3d8e5e]){if('LKGkk'===_0xf2cf60(0x8a6))_0x574558=_0x499dee['CastCertain'];else{_0x32adcd=VisuMZ[_0xf2cf60(0x1f3)]['JS'][_0x3d8e5e]['call'](this,this['subject'](),_0x207feb,_0x3e961a,_0x32adcd);if(_0x53e24f)_0x32adcd=_0x19db75;}}}return _0x32adcd;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x5b2)]=function(_0x392e0c){const _0x30ee71=_0x397c95,_0x3c5356=this['_totalValue']||0x0,_0x4c87e8=VisuMZ[_0x30ee71(0x1f3)][_0x30ee71(0x716)][_0x30ee71(0x305)],_0x1e92ca=_0x392e0c[_0x30ee71(0xadd)]('');_0x4c87e8[_0x1e92ca]&&_0x4c87e8[_0x1e92ca][_0x30ee71(0x6a3)](this,_0x3c5356);let _0x5c9893=VisuMZ['BattleCore']['createKeyJS'](this[_0x30ee71(0x398)](),_0x392e0c);VisuMZ[_0x30ee71(0x1f3)]['JS'][_0x5c9893]&&('CYUtb'!==_0x30ee71(0x58a)?VisuMZ[_0x30ee71(0x1f3)]['JS'][_0x5c9893][_0x30ee71(0x6a3)](this,this['subject'](),this['subject'](),this[_0x30ee71(0x398)](),_0x3c5356):this['_spriteset'][_0x30ee71(0x76c)]());for(const _0x5aff01 of this[_0x30ee71(0x339)]()[_0x30ee71(0xa9d)]()){if(!_0x5aff01)continue;_0x5c9893=VisuMZ[_0x30ee71(0x1f3)][_0x30ee71(0xc17)](_0x5aff01,_0x392e0c),VisuMZ[_0x30ee71(0x1f3)]['JS'][_0x5c9893]&&VisuMZ[_0x30ee71(0x1f3)]['JS'][_0x5c9893][_0x30ee71(0x6a3)](this,this[_0x30ee71(0x339)](),this[_0x30ee71(0x339)](),_0x5aff01,_0x3c5356);}},Game_Action['prototype']['speed']=function(){const _0x14a2f6=_0x397c95;return VisuMZ[_0x14a2f6(0x1f3)]['Settings']['Mechanics'][_0x14a2f6(0x32f)][_0x14a2f6(0x6a3)](this);},Game_Action[_0x397c95(0x6cf)][_0x397c95(0xce4)]=function(){const _0x16f46e=_0x397c95;return VisuMZ[_0x16f46e(0x1f3)][_0x16f46e(0x716)][_0x16f46e(0x305)][_0x16f46e(0xb0f)];},Game_Action[_0x397c95(0x6cf)]['isCustomBattleScope']=function(){const _0x3749cd=_0x397c95;if(this[_0x3749cd(0x512)]===_0x3749cd(0x79f))return![];if(this[_0x3749cd(0x512)]===_0x3749cd(0x99e))return![];if(!this['item']())return![];return this[_0x3749cd(0x398)]()['note'][_0x3749cd(0xb38)](/<JS TARGETS>/i);},Game_Action['prototype'][_0x397c95(0x130)]=function(){const _0x4fe826=_0x397c95;if(this[_0x4fe826(0x512)]==='all\x20actors')return![];if(this[_0x4fe826(0x512)]==='all\x20enemies')return![];if(!this['_forcing']&&this[_0x4fe826(0x339)]()[_0x4fe826(0xae5)]())return![];if(this['isCustomBattleScope']())return!![];if(!this['item']())return![];return typeof this[_0x4fe826(0x398)]()[_0x4fe826(0x220)]===_0x4fe826(0x626);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x1e7)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x845)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0x845)]=function(){const _0x2218eb=_0x397c95;if(this[_0x2218eb(0x512)]==='all\x20actors')return![];if(this[_0x2218eb(0x512)]===_0x2218eb(0x99e))return!![];return this[_0x2218eb(0x130)]()&&!this[_0x2218eb(0xbd5)]()?this[_0x2218eb(0x3a9)]():'jcBOV'===_0x2218eb(0x858)?VisuMZ['BattleCore'][_0x2218eb(0x1e7)]['call'](this):this[_0x2218eb(0x398)]()?_0x2cf901[_0x2218eb(0x1f3)][_0x2218eb(0x6e9)][_0x2218eb(0x6a3)](this):0x0;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x3a9)]=function(){const _0x320cff=_0x397c95,_0x445afc=this['item']()[_0x320cff(0x220)];return _0x445afc[_0x320cff(0xb38)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore'][_0x397c95(0x86e)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0xca9)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0xca9)]=function(){const _0x550828=_0x397c95;if(this[_0x550828(0x512)]==='all\x20actors')return!![];if(this[_0x550828(0x512)]===_0x550828(0x99e))return![];if(this[_0x550828(0x130)]()&&!this[_0x550828(0xbd5)]()){if(_0x550828(0x4b3)===_0x550828(0x4b3))return this[_0x550828(0x40b)]();else this[_0x550828(0x903)]=_0x317b62['mpDamage']>=0x0?0x2:0x3,this[_0x550828(0x1fc)](_0x2283cc[_0x550828(0x193)]);}else{if(_0x550828(0x968)!==_0x550828(0x2cd))return VisuMZ[_0x550828(0x1f3)][_0x550828(0x86e)][_0x550828(0x6a3)](this);else{if(this[_0x550828(0xc39)]===_0x5e973a)this[_0x550828(0x312)]();return this[_0x550828(0xc39)];}}},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x40b)]=function(){const _0x3d7946=_0x397c95,_0xa1914f=this['item']()[_0x3d7946(0x220)];return _0xa1914f[_0x3d7946(0xb38)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x395)]=function(){const _0x44daf1=_0x397c95;if(this[_0x44daf1(0x130)]()&&!this[_0x44daf1(0xbd5)]()){if('IGLlP'!==_0x44daf1(0x514)){const _0x40ea91=this[_0x44daf1(0x398)]()[_0x44daf1(0x220)];return _0x40ea91[_0x44daf1(0xb38)](/(?:ENEMY|FOE)/i)&&_0x40ea91['match'](/OR/i)&&_0x40ea91[_0x44daf1(0xb38)](/(?:ALLY|FRIEND)/i);}else{if(_0x5a53e4['isCommonEventReserved']())return![];}}else return![];},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x9ef)]=function(){const _0xc02025=_0x397c95;if(this['isForAnyone']()){const _0x1e0bb2=this[_0xc02025(0x398)]()[_0xc02025(0x220)];if(_0x1e0bb2['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x603)]=function(){const _0x59f455=_0x397c95;if(this['isForAnyone']()){if(_0x59f455(0x57f)!==_0x59f455(0x1d8)){const _0x12bcb3=this[_0x59f455(0x398)]()['scope'];if(_0x12bcb3['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}else return this['_enemy'][_0x59f455(0x674)]();}return![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x41a)]=Game_Action[_0x397c95(0x6cf)]['isForAliveFriend'],Game_Action[_0x397c95(0x6cf)][_0x397c95(0x9e9)]=function(){const _0x4b6c95=_0x397c95;if(this[_0x4b6c95(0x130)]()&&!this[_0x4b6c95(0xbd5)]()){if('lQPrG'!=='WPgFo')return this[_0x4b6c95(0x807)]();else this[_0x4b6c95(0x263)]['x']=0x0,this['_mainSprite']['y']=this[_0x4b6c95(0x9b1)]*0.5;}else return VisuMZ[_0x4b6c95(0x1f3)][_0x4b6c95(0x41a)][_0x4b6c95(0x6a3)](this);},Game_Action['prototype'][_0x397c95(0x807)]=function(){const _0x158222=_0x397c95;if(this[_0x158222(0x395)]())return!![];return![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xcc8)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x81c)],Game_Action[_0x397c95(0x6cf)]['isForOne']=function(){const _0x85d731=_0x397c95;if(this['_targetBattlerKey']===_0x85d731(0x79f))return![];if(this[_0x85d731(0x512)]===_0x85d731(0x99e))return![];if(this[_0x85d731(0x130)]()&&!this[_0x85d731(0xbd5)]()){if(_0x85d731(0x4c9)!=='scUot')_0x25e6b9[_0x85d731(0x7d0)](_0x85d731(0x5e9),this[_0x85d731(0xae7)][_0x85d731(0x16e)](this));else return this['isForOneBattleCore']();}else{if(_0x85d731(0x323)!=='gkONt')this[_0x85d731(0x4da)](_0x85d731(0xb5e),_0x598aae,_0x45e86a);else return VisuMZ[_0x85d731(0x1f3)][_0x85d731(0xcc8)][_0x85d731(0x6a3)](this);}},Game_Action[_0x397c95(0x6cf)]['isForOneBattleCore']=function(){const _0x43c2e6=_0x397c95;if(this[_0x43c2e6(0x395)]())return!![];return![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xa9a)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0xa89)],Game_Action[_0x397c95(0x6cf)]['isForRandom']=function(){const _0x417af7=_0x397c95;if(this['_targetBattlerKey']===_0x417af7(0x79f))return![];if(this[_0x417af7(0x512)]==='all\x20enemies')return![];return this[_0x417af7(0x130)]()&&!this[_0x417af7(0xbd5)]()?_0x417af7(0x206)!==_0x417af7(0xbab)?this[_0x417af7(0x139)]():_0x35079a[_0x417af7(0x3ab)]:_0x417af7(0x64a)!=='NXNUx'?this[_0x417af7(0x4a3)]()?this[_0x417af7(0xa08)]['allowCollapse']():!![]:VisuMZ[_0x417af7(0x1f3)][_0x417af7(0xa9a)][_0x417af7(0x6a3)](this);},Game_Action[_0x397c95(0x6cf)]['isForRandomBattleCore']=function(){const _0x3120a8=_0x397c95,_0x5b1d2f=this['item']()[_0x3120a8(0x220)];return _0x5b1d2f[_0x3120a8(0xb38)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x56c)]=Game_Action['prototype'][_0x397c95(0x4bb)],Game_Action['prototype'][_0x397c95(0x4bb)]=function(){const _0x17bd4e=_0x397c95;if(this[_0x17bd4e(0x512)]===_0x17bd4e(0x79f))return!![];if(this['_targetBattlerKey']===_0x17bd4e(0x99e))return!![];return VisuMZ[_0x17bd4e(0x1f3)][_0x17bd4e(0x56c)][_0x17bd4e(0x6a3)](this);},Game_Action['prototype']['canSingleOrMultipleSelect']=function(){const _0x265c9a=_0x397c95;if(!this['item']())return![];if(this[_0x265c9a(0x129)]())return![];return(this[_0x265c9a(0x398)]()[_0x265c9a(0x6cc)]||'')[_0x265c9a(0xb38)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x397c95(0x7c3)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0xa1b)],Game_Action['prototype']['needsSelection']=function(){const _0x2581c5=_0x397c95;return this[_0x2581c5(0x130)]()&&!this[_0x2581c5(0xbd5)]()?this['needsSelectionBattleCore']():VisuMZ['BattleCore'][_0x2581c5(0x7c3)][_0x2581c5(0x6a3)](this);},Game_Action[_0x397c95(0x6cf)][_0x397c95(0xce3)]=function(){const _0x4a8f48=_0x397c95,_0xade8fc=this[_0x4a8f48(0x398)]()[_0x4a8f48(0x220)];if(_0xade8fc[_0x4a8f48(0xb38)](/RANDOM/i))return![];if(_0xade8fc[_0x4a8f48(0xb38)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0xade8fc['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0xade8fc[_0x4a8f48(0xb38)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0xade8fc[_0x4a8f48(0xb38)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x4a8f48(0x1f3)][_0x4a8f48(0x7c3)][_0x4a8f48(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x4b2)]=Game_Action['prototype']['makeTargets'],Game_Action[_0x397c95(0x6cf)]['makeTargets']=function(){const _0x17623b=_0x397c95;let _0x3597bf=[];if(this[_0x17623b(0x130)]()){if('nqKNv'==='BvRrT')return!![];else this[_0x17623b(0xbd5)]()?_0x3597bf=this[_0x17623b(0x4a0)]():_0x3597bf=this[_0x17623b(0xa2f)]();}else{if(_0x17623b(0xb43)!==_0x17623b(0xbda))_0x3597bf=VisuMZ[_0x17623b(0x1f3)][_0x17623b(0x4b2)][_0x17623b(0x6a3)](this);else return _0x7d37cd['BattleCore'][_0x17623b(0x460)][_0x17623b(0x6a3)](this,_0x36b8e6);}return _0x3597bf=this[_0x17623b(0x4e6)](_0x3597bf),_0x3597bf;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x122)]=function(){const _0x2c5480=_0x397c95;return this[_0x2c5480(0x339)]()[_0x2c5480(0x850)]()&&!this[_0x2c5480(0x339)]()[_0x2c5480(0x3ed)]();},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x4a0)]=function(){const _0x14f26f=_0x397c95,_0x5d1b51=VisuMZ[_0x14f26f(0x1f3)][_0x14f26f(0xc17)](this['item'](),_0x14f26f(0x3b9));if(VisuMZ[_0x14f26f(0x1f3)]['JS'][_0x5d1b51]){if(_0x14f26f(0x9a1)===_0x14f26f(0x9a1)){targets=VisuMZ['BattleCore'][_0x14f26f(0x4b2)][_0x14f26f(0x6a3)](this);const _0x49818d=VisuMZ['BattleCore']['createKeyJS'](this[_0x14f26f(0x398)](),_0x14f26f(0x3b9));return targets=VisuMZ[_0x14f26f(0x1f3)]['JS'][_0x49818d][_0x14f26f(0x6a3)](this,this[_0x14f26f(0x339)](),targets),this['repeatTargets'](targets);}else return![];}return this[_0x14f26f(0xa2f)]();},Game_Action[_0x397c95(0x6cf)][_0x397c95(0xa2f)]=function(){const _0x210e6b=_0x397c95;let _0x5d9c81=[];const _0x383516=String(this['item']()[_0x210e6b(0x220)]);if(this[_0x210e6b(0x603)]()){if(this[_0x210e6b(0x122)]())return _0x5d9c81=this[_0x210e6b(0x619)](),this[_0x210e6b(0x54f)](_0x5d9c81);else{if(_0x210e6b(0x5ac)===_0x210e6b(0x5ac))return this[_0x210e6b(0xafb)]=-0x1,_0x5d9c81[_0x210e6b(0x4da)](...this[_0x210e6b(0x2a1)]()),this[_0x210e6b(0x54f)](_0x5d9c81);else this[_0x210e6b(0xc9b)](_0x463738);}}if(this['isForAnyoneFocusFriends']()){if(this['isSubjectValidForAnyoneSelect']()){if(_0x210e6b(0x125)!==_0x210e6b(0x125))this[_0x210e6b(0x24c)](_0x210e6b(0x7ef),_0x4ca373,0x0,!![]),_0x581d85[_0x210e6b(0x1f3)][_0x210e6b(0xb1d)][_0x210e6b(0x6a3)](this,_0x51831d),this[_0x210e6b(0x24c)]('PostApply%1JS',_0x21a5fb,this[_0x210e6b(0xcaa)]||0x0,!![]),this['applyResultSwitches'](_0x12c71b);else return _0x5d9c81=this[_0x210e6b(0x619)](),this[_0x210e6b(0x54f)](_0x5d9c81);}else{if(Imported[_0x210e6b(0x6fd)]){if(VisuMZ[_0x210e6b(0xcd6)][_0x210e6b(0x708)]<1.19){if(_0x210e6b(0xaa9)!==_0x210e6b(0xaa9))return this[_0x210e6b(0xa6d)]||0x0;else{let _0x2801dc='';_0x2801dc+=_0x210e6b(0x9c0),_0x2801dc+=_0x210e6b(0x727),_0x2801dc+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x2801dc),SceneManager[_0x210e6b(0x565)]();}}}return this['_targetIndex']=-0x1,_0x5d9c81[_0x210e6b(0x4da)](...this['targetsForFriends']()),this[_0x210e6b(0x54f)](_0x5d9c81);}}if(_0x383516[_0x210e6b(0xb38)](/(\d+) RANDOM ANY/i)){let _0x3ae125=Number(RegExp['$1']);while(_0x3ae125--){const _0x4683b3=Math['randomInt'](0x2)===0x0?this[_0x210e6b(0xb5f)]():this['friendsUnit']();_0x5d9c81[_0x210e6b(0x4da)](_0x4683b3[_0x210e6b(0x99b)]());}return this['repeatTargets'](_0x5d9c81);}if(_0x383516[_0x210e6b(0xb38)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if('rxTbm'!==_0x210e6b(0x785)){let _0xf76848=Number(RegExp['$1']);while(_0xf76848--){if(_0x210e6b(0x19c)===_0x210e6b(0x19c))_0x5d9c81[_0x210e6b(0x4da)](this['opponentsUnit']()[_0x210e6b(0x99b)]());else return _0x58c445['BattleCore'][_0x210e6b(0xcc8)][_0x210e6b(0x6a3)](this);}return this[_0x210e6b(0x54f)](_0x5d9c81);}else _0x65d1ca['prototype'][_0x210e6b(0x412)][_0x210e6b(0x6a3)](this);}if(_0x383516[_0x210e6b(0xb38)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if('XRIZv'!=='yvgPz'){let _0x3f45aa=Number(RegExp['$1']);while(_0x3f45aa--){_0x5d9c81[_0x210e6b(0x4da)](this['friendsUnit']()[_0x210e6b(0x99b)]());}return this[_0x210e6b(0x54f)](_0x5d9c81);}else{var _0x5926ce,_0x3cb011,_0x5b4573;for(_0x5b4573=_0x483960[_0x210e6b(0x187)]-0x1;_0x5b4573>0x0;_0x5b4573--){_0x5926ce=_0x691ebf[_0x210e6b(0xaee)](_0x32ce77['random']()*(_0x5b4573+0x1)),_0x3cb011=_0x289d46[_0x5b4573],_0x1ff17f[_0x5b4573]=_0x3c0a39[_0x5926ce],_0xb4a9c1[_0x5926ce]=_0x3cb011;}return _0x4248c8;}}if(_0x383516[_0x210e6b(0xb38)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x5d9c81['push'](...this['friendsUnit']()[_0x210e6b(0x4c3)]()[_0x210e6b(0x742)](_0x29cec3=>_0x29cec3!==this['subject']())),this[_0x210e6b(0x54f)](_0x5d9c81);return VisuMZ[_0x210e6b(0x1f3)][_0x210e6b(0x4b2)][_0x210e6b(0x6a3)](this);},Game_Action['prototype']['randomTargets']=function(_0x13b898){const _0x499fe7=_0x397c95,_0x43551c=[];for(let _0x443c7a=0x0;_0x443c7a<this[_0x499fe7(0x50f)]();_0x443c7a++){_0x43551c[_0x499fe7(0x4da)](_0x13b898[_0x499fe7(0x99b)]());}return _0x43551c;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x4e6)]=function(_0x239263){const _0xfb0c69=_0x397c95;if(!this[_0xfb0c69(0x398)]())return _0x239263;const _0x374f03=this[_0xfb0c69(0x398)]()[_0xfb0c69(0x6cc)];return _0x374f03['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x239263[_0xfb0c69(0x723)](this[_0xfb0c69(0x339)]()),_0x239263;},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x44e)]=Game_Action[_0x397c95(0x6cf)]['itemEffectAddAttackState'],Game_Action[_0x397c95(0x6cf)][_0x397c95(0x507)]=function(_0x4d134b,_0x10f413){const _0x57208f=_0x397c95;VisuMZ[_0x57208f(0x1f3)]['Game_Action_itemEffectAddAttackState']['call'](this,_0x4d134b,_0x10f413);if(!_0x4d134b[_0x57208f(0xc50)]())return;for(const _0x27f998 of this[_0x57208f(0x339)]()[_0x57208f(0x2f9)]()){if(_0x27f998===_0x4d134b[_0x57208f(0x207)]()){if(_0x57208f(0x8dd)==='GJsxa'){let _0x235608=_0x10f413[_0x57208f(0xb19)];_0x235608*=_0x4d134b[_0x57208f(0x926)](_0x27f998),_0x235608*=this[_0x57208f(0x339)]()[_0x57208f(0xba3)](_0x27f998),_0x235608*=this[_0x57208f(0x25b)](_0x4d134b),Math[_0x57208f(0x4ce)]()<_0x235608&&('XICpD'!=='SQllB'?(_0x4d134b['_deathStateApplied']=!![],this[_0x57208f(0x126)](_0x4d134b)):(_0x38ef8c[_0x57208f(0x1f3)][_0x57208f(0x9b3)][_0x57208f(0x6a3)](this),this[_0x57208f(0x5e7)]()));}else _0x1865f3['x']=_0x1688b2['x']+_0x32aa1e[_0x57208f(0xb7d)]*_0x5867a5,_0x84340['y']=_0x395fe9['y']+_0x5777f1[_0x57208f(0x189)];}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x8ec)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x61a)],Game_Action['prototype'][_0x397c95(0x61a)]=function(_0x3ea0bf,_0x467a65){const _0x3083a7=_0x397c95;VisuMZ[_0x3083a7(0x1f3)][_0x3083a7(0x8ec)][_0x3083a7(0x6a3)](this,_0x3ea0bf,_0x467a65);if(!_0x3ea0bf[_0x3083a7(0xc50)]())return;if(_0x467a65[_0x3083a7(0xc65)]!==_0x3ea0bf[_0x3083a7(0x207)]())return;let _0x262d0a=_0x467a65[_0x3083a7(0xb19)];!this[_0x3083a7(0xb00)]()&&('KylJt'!==_0x3083a7(0xb61)?(_0x262d0a*=_0x3ea0bf['stateRate'](_0x467a65['dataId']),_0x262d0a*=this[_0x3083a7(0x25b)](_0x3ea0bf)):(this[_0x3083a7(0x2df)]=this['applyEasing'](this[_0x3083a7(0x2df)],this['_targetGrowX'],_0x2d3b95,_0x8194be,_0x4da3df),this[_0x3083a7(0x4ff)]=this[_0x3083a7(0x3aa)](this[_0x3083a7(0x4ff)],this[_0x3083a7(0x7ed)],_0x5f0ec4,_0x47c210,_0x2477e3))),Math['random']()<_0x262d0a&&(_0x3083a7(0xa0b)!=='tySXW'?this[_0x3083a7(0x7d0)]('pageup',this[_0x3083a7(0xcbf)][_0x3083a7(0x16e)](this)):(_0x3ea0bf['_deathStateApplied']=!![],this[_0x3083a7(0x126)](_0x3ea0bf)));},VisuMZ['BattleCore'][_0x397c95(0xcf8)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x23e)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0x23e)]=function(){const _0x26d9a4=_0x397c95;VisuMZ[_0x26d9a4(0x1f3)][_0x26d9a4(0xcf8)][_0x26d9a4(0x6a3)](this),this['applyGlobalCommonEventNotetags'](),this[_0x26d9a4(0xa16)]();},Game_Action[_0x397c95(0x6cf)][_0x397c95(0x543)]=function(){const _0x529a75=_0x397c95;if(!SceneManager[_0x529a75(0x650)]())return;const _0xf696f6=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x3ad183=this['item']()[_0x529a75(0x6cc)]['match'](_0xf696f6);if(_0x3ad183){if(_0x529a75(0x124)!==_0x529a75(0x30c))for(const _0x53576e of _0x3ad183){if('oAMiY'===_0x529a75(0xcbe)){if(!_0x53576e)continue;_0x53576e[_0x529a75(0xb38)](_0xf696f6);const _0x5163af=String(RegExp['$1'])[_0x529a75(0x9af)](',')[_0x529a75(0xb9a)](_0x39fdbf=>String(_0x39fdbf)[_0x529a75(0xb34)]()),_0x12e04c=_0x5163af[_0x529a75(0xb9a)](_0x20b163=>DataManager[_0x529a75(0x354)](_0x20b163));for(const _0x5362cc of _0x12e04c){const _0xd99ffd=$dataCommonEvents[_0x5362cc];_0xd99ffd&&('kEBrS'!==_0x529a75(0xbc8)?(this['_battlerContainer'][_0x529a75(0x581)]['sort'](this[_0x529a75(0x875)][_0x529a75(0x16e)](this)),this[_0x529a75(0x3c3)]()):$gameTemp['reserveCommonEvent'](_0x5362cc));}}else this[_0x529a75(0x4da)](_0x529a75(0x3de),this[_0x529a75(0x970)](_0x51d345));}else{if(this[_0x529a75(0x793)]()[_0x529a75(0x6cc)][_0x529a75(0xb38)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x452e15(_0x3fed6c['$1']);else{if(this['actor']()['note'][_0x529a75(0xb38)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x5c5d6a(_0x4bec0f['$2']);}return 0x0;}}},DataManager[_0x397c95(0x354)]=function(_0x444385){const _0x330fd7=_0x397c95;_0x444385=_0x444385[_0x330fd7(0x27f)]()[_0x330fd7(0xb34)](),this[_0x330fd7(0x740)]=this['_commonEventIDs']||{};if(this[_0x330fd7(0x740)][_0x444385])return this['_commonEventIDs'][_0x444385];for(const _0x7ae356 of $dataCommonEvents){if(!_0x7ae356)continue;let _0x329fbf=_0x7ae356[_0x330fd7(0xa29)];_0x329fbf=_0x329fbf[_0x330fd7(0x2bd)](/\x1I\[(\d+)\]/gi,''),_0x329fbf=_0x329fbf['replace'](/\\I\[(\d+)\]/gi,''),this[_0x330fd7(0x740)][_0x329fbf[_0x330fd7(0x27f)]()['trim']()]=_0x7ae356['id'];}return this[_0x330fd7(0x740)][_0x444385]||0x0;},Game_Action[_0x397c95(0x6cf)][_0x397c95(0xa16)]=function(){const _0x41af1c=_0x397c95;if(!SceneManager[_0x41af1c(0x650)]())return;const _0x4f1722=VisuMZ[_0x41af1c(0x1f3)][_0x41af1c(0x716)][_0x41af1c(0x305)];if(_0x4f1722['SwitchCritical']){if('ZMitL'===_0x41af1c(0x89a))$gameSwitches[_0x41af1c(0x7f0)](_0x4f1722[_0x41af1c(0xc31)],![]);else return _0x3f95de[_0x41af1c(0x1f3)][_0x41af1c(0x716)][_0x41af1c(0x7c8)][_0x41af1c(0x479)];}if(_0x4f1722['SwitchMissEvade']){if(_0x41af1c(0xb66)===_0x41af1c(0x711)){this['_lastEnemy']=null,_0x31fb94[_0x41af1c(0x1f3)][_0x41af1c(0x993)][_0x41af1c(0x6a3)](this,_0x5c267a);if(_0x4a0f58['VisuMZ_2_AggroControlSystem']){if(_0x4f282f[_0x41af1c(0x950)]['version']<1.12){let _0x5d3a08='';_0x5d3a08+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x5d3a08+='in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20',_0x5d3a08+=_0x41af1c(0xc6a),_0x136db8(_0x5d3a08),_0x14a40a[_0x41af1c(0x565)]();}}}else $gameSwitches['setValue'](_0x4f1722[_0x41af1c(0xbd3)],![]);}_0x4f1722[_0x41af1c(0x7f1)]&&$gameVariables[_0x41af1c(0x7f0)](_0x4f1722[_0x41af1c(0x7f1)],0x0),_0x4f1722['VariableHeal']&&$gameVariables[_0x41af1c(0x7f0)](_0x4f1722[_0x41af1c(0x7e5)],0x0);},Game_Action[_0x397c95(0x6cf)][_0x397c95(0xbc0)]=function(_0xb251e){const _0x596fb4=_0x397c95;if(!SceneManager[_0x596fb4(0x650)]())return;if(!_0xb251e)return;const _0x24d0e2=_0xb251e['result'](),_0x165a03=VisuMZ[_0x596fb4(0x1f3)][_0x596fb4(0x716)][_0x596fb4(0x305)];_0x165a03[_0x596fb4(0xc31)]&&_0x24d0e2[_0x596fb4(0xc97)]&&$gameSwitches['setValue'](_0x165a03[_0x596fb4(0xc31)],!![]);_0x165a03['SwitchMissEvade']&&(_0x24d0e2[_0x596fb4(0xa86)]||_0x24d0e2[_0x596fb4(0xb83)])&&$gameSwitches[_0x596fb4(0x7f0)](_0x165a03['SwitchMissEvade'],!![]);if(_0x165a03[_0x596fb4(0x7f1)]){let _0x5722df=$gameVariables['value'](_0x165a03[_0x596fb4(0x7f1)]);_0x24d0e2[_0x596fb4(0xc06)]>0x0&&(_0x5722df+=Math[_0x596fb4(0x3b1)](_0x24d0e2['hpDamage'])),$gameVariables[_0x596fb4(0x7f0)](_0x165a03[_0x596fb4(0x7f1)],_0x5722df);}if(_0x165a03[_0x596fb4(0x7e5)]){let _0x44e8b6=$gameVariables[_0x596fb4(0x515)](_0x165a03['VariableHeal']);if(_0x24d0e2[_0x596fb4(0xc06)]<0x0){if(_0x596fb4(0x4a1)!==_0x596fb4(0x4a1))return!![];else _0x44e8b6+=Math[_0x596fb4(0x3b1)](_0x24d0e2[_0x596fb4(0xc06)]);}$gameVariables['setValue'](_0x165a03[_0x596fb4(0x7e5)],_0x44e8b6);}},VisuMZ[_0x397c95(0x1f3)]['Game_BattlerBase_initMembers']=Game_BattlerBase['prototype']['initMembers'],Game_BattlerBase[_0x397c95(0x6cf)]['initMembers']=function(){const _0x49dca4=_0x397c95;VisuMZ[_0x49dca4(0x1f3)][_0x49dca4(0x2a0)][_0x49dca4(0x6a3)](this),this[_0x49dca4(0x883)]();},Game_BattlerBase['prototype'][_0x397c95(0x883)]=function(){const _0xfb83dc=_0x397c95;this[_0xfb83dc(0x2b5)]=![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xcc2)]=Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x2ed)],Game_BattlerBase['prototype'][_0x397c95(0x2ed)]=function(){const _0x2d8d17=_0x397c95;this[_0x2d8d17(0xcfe)]={},VisuMZ[_0x2d8d17(0x1f3)][_0x2d8d17(0xcc2)][_0x2d8d17(0x6a3)](this);},Game_BattlerBase['prototype'][_0x397c95(0x2d0)]=function(_0xe86fd3){const _0xaf5b74=_0x397c95;return this[_0xaf5b74(0xcfe)]=this[_0xaf5b74(0xcfe)]||{},this[_0xaf5b74(0xcfe)][_0xe86fd3]!==undefined;},Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x410)]=function(){const _0x49d837=_0x397c95;if(this['_cache'][_0x49d837(0x410)]!==undefined)return this[_0x49d837(0xcfe)]['hardDamageCap'];const _0x24ece2=/<DAMAGE CAP:[ ](\d+)>/i,_0x393896=this[_0x49d837(0xa9d)]()['map'](_0x20b74f=>_0x20b74f&&_0x20b74f['note']['match'](_0x24ece2)?Number(RegExp['$1']):0x0);let _0x5e38b7=_0x393896[_0x49d837(0x187)]>0x0?Math[_0x49d837(0x483)](..._0x393896):0x0;if(_0x5e38b7<=0x0)_0x5e38b7=VisuMZ['BattleCore'][_0x49d837(0x716)][_0x49d837(0x7a6)][_0x49d837(0x6ae)];return this[_0x49d837(0xcfe)]['hardDamageCap']=_0x5e38b7,this['_cache']['hardDamageCap'];},Game_BattlerBase[_0x397c95(0x6cf)]['softDamageCapRate']=function(){const _0x2f3661=_0x397c95;if(this[_0x2f3661(0xcfe)][_0x2f3661(0x134)]!==undefined)return this[_0x2f3661(0xcfe)]['softDamageCap'];let _0x5662bb=VisuMZ[_0x2f3661(0x1f3)][_0x2f3661(0x716)]['Damage'][_0x2f3661(0x8f9)];const _0x1cf191=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x39b2ec=this[_0x2f3661(0xa9d)]()[_0x2f3661(0xb9a)](_0x5e0918=>_0x5e0918&&_0x5e0918[_0x2f3661(0x6cc)][_0x2f3661(0xb38)](_0x1cf191)?Number(RegExp['$1'])/0x64:0x0);return _0x5662bb=_0x39b2ec[_0x2f3661(0x2b9)]((_0x463657,_0x1c5a5f)=>_0x463657+_0x1c5a5f,_0x5662bb),this['_cache']['softDamageCap']=_0x5662bb,this['_cache'][_0x2f3661(0x134)][_0x2f3661(0x8ca)](0.01,0x1);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x571)]=Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x648)],Game_BattlerBase['prototype']['die']=function(){const _0x1dcbc1=_0x397c95;VisuMZ[_0x1dcbc1(0x1f3)][_0x1dcbc1(0x571)][_0x1dcbc1(0x6a3)](this),SceneManager[_0x1dcbc1(0x650)]()&&this[_0x1dcbc1(0x93a)]('dead');},Game_BattlerBase['prototype'][_0x397c95(0x7eb)]=function(){const _0x1caa6c=_0x397c95;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x1caa6c(0x6fe)][_0x1caa6c(0x69b)])return null;return SceneManager['_scene'][_0x1caa6c(0x69b)][_0x1caa6c(0x5d2)](this);},Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x678)]=function(){const _0x48ec92=_0x397c95;return VisuMZ[_0x48ec92(0x1f3)][_0x48ec92(0x716)][_0x48ec92(0xc24)][_0x48ec92(0x8ce)];},Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x4f5)]=function(){const _0x14f4a1=_0x397c95;return VisuMZ['BattleCore'][_0x14f4a1(0x716)]['Actor']['AnchorY'];},Game_BattlerBase[_0x397c95(0x6cf)]['svBattlerShadowVisible']=function(){const _0x4db0cd=_0x397c95;if(this[_0x4db0cd(0x850)]&&this[_0x4db0cd(0x850)]())return VisuMZ['BattleCore']['Settings'][_0x4db0cd(0xc24)]['Shadow'];else{if(_0x4db0cd(0x78f)!==_0x4db0cd(0x78f))_0xd2fa3['endAnimation']();else return VisuMZ[_0x4db0cd(0x1f3)][_0x4db0cd(0x716)][_0x4db0cd(0x7de)]['Shadow'];}},Game_BattlerBase[_0x397c95(0x6cf)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x397c95(0x6cf)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x397c95(0xc4d)]=function(){return 0x0;},Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0xbe4)]=function(_0x28e4b8){const _0x503389=_0x397c95;if(!_0x28e4b8)return 0x0;let _0x588281=0x0;const _0x38cd0a=_0x28e4b8[_0x503389(0x6cc)];return _0x38cd0a[_0x503389(0xb38)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x588281+=Number(RegExp['$1'])),_0x38cd0a[_0x503389(0xb38)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x588281+=Number(RegExp['$1'])),_0x588281;},Game_BattlerBase['prototype']['createBattleUIOffsetY']=function(_0xd85ce7){const _0x5998cc=_0x397c95;if(!_0xd85ce7)return 0x0;let _0x43df62=0x0;const _0x57dfa6=_0xd85ce7[_0x5998cc(0x6cc)];return _0x57dfa6[_0x5998cc(0xb38)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x5998cc(0xb6d)===_0x5998cc(0xb6d)?_0x43df62+=Number(RegExp['$1']):_0x135acd=_0x306034[_0x5998cc(0x2b9)]((_0x262e17,_0x2041b5)=>_0x262e17*(0x1-_0x2041b5),_0x774ff)),_0x57dfa6[_0x5998cc(0xb38)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x5998cc(0x572)!==_0x5998cc(0x59a)?_0x43df62+=Number(RegExp['$2']):this['showHelpWindow']()),_0x43df62;},VisuMZ['BattleCore'][_0x397c95(0xc10)]=Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x256)],Game_BattlerBase[_0x397c95(0x6cf)]['isStateResist']=function(_0x16497c){const _0xdff211=_0x397c95;if(_0x16497c===this[_0xdff211(0x207)]()&&this['isImmortal']())return!![];return VisuMZ[_0xdff211(0x1f3)][_0xdff211(0xc10)][_0xdff211(0x6a3)](this,_0x16497c);},Game_BattlerBase[_0x397c95(0x6cf)]['isImmortal']=function(){const _0xbd1d49=_0x397c95;return this[_0xbd1d49(0x2b5)];},Game_BattlerBase[_0x397c95(0x6cf)]['setImmortal']=function(_0x356009){const _0x4c2e25=_0x397c95;_0x356009?this[_0x4c2e25(0x3d6)]():this['removeImmortal']();},Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x3d6)]=function(){const _0x8e686=_0x397c95;if(this[_0x8e686(0x88a)]())return;this[_0x8e686(0x2b5)]=!![],this['_deathStateApplied']=![];},Game_BattlerBase[_0x397c95(0x6cf)]['removeImmortal']=function(){const _0x4773dc=_0x397c95,_0x3945af=this[_0x4773dc(0xa0e)]();this['_immortal']=![];_0x3945af&&this[_0x4773dc(0x5db)]&&this['die']();this[_0x4773dc(0x5db)]=![],this[_0x4773dc(0x2ed)]();if(this[_0x4773dc(0x88a)]()&&_0x3945af){if('oZEjH'===_0x4773dc(0xafd))return _0x44eba0['BattleCore'][_0x4773dc(0x716)][_0x4773dc(0x7c8)]['AutoBattleOK'];else this[_0x4773dc(0x362)](),this['requestMotionRefresh']();}},VisuMZ[_0x397c95(0x1f3)]['Game_Action_numRepeats']=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x8c8)],Game_Action['prototype'][_0x397c95(0x8c8)]=function(){const _0x21be5b=_0x397c95;if(this[_0x21be5b(0x398)]())return VisuMZ[_0x21be5b(0x1f3)]['Game_Action_numRepeats'][_0x21be5b(0x6a3)](this);else{if('uhkeI'===_0x21be5b(0x145))return 0x0;else{if(_0x242a0a['_spriteset']['isAnyoneInjectAnimating']())return!![];this[_0x21be5b(0x13c)]='';}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xb1e)]=Game_Action[_0x397c95(0x6cf)][_0x397c95(0x651)],Game_Action[_0x397c95(0x6cf)][_0x397c95(0x651)]=function(){const _0x5b0a48=_0x397c95;this[_0x5b0a48(0x339)]()&&this[_0x5b0a48(0x339)]()['canAttack']()?VisuMZ[_0x5b0a48(0x1f3)][_0x5b0a48(0xb1e)]['call'](this):_0x5b0a48(0xb4b)===_0x5b0a48(0xb4b)?this['clear']():(_0x328447=_0x135c8e[_0x5b0a48(0x742)]((_0x2651f5,_0x285d42,_0x20a93f)=>_0x20a93f[_0x5b0a48(0xb70)](_0x2651f5)===_0x285d42),_0x131273[_0x5b0a48(0x650)]()&&_0x4f13c8[_0x5b0a48(0xcc4)]()&&(_0x46b296=!_0x4566a1),_0x53aa81[_0x5b0a48(0x1f3)]['Game_Temp_requestAnimation'][_0x5b0a48(0x6a3)](this,_0x32dddc,_0x5c80a2,_0x1d7031),_0x1cbbe2[_0x5b0a48(0x650)]()&&_0xfd0d8d[_0x5b0a48(0x69b)][_0x5b0a48(0x2c3)]());},VisuMZ['BattleCore']['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x1a6)],Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x1a6)]=function(){const _0x4c8a8d=_0x397c95;if(!this[_0x4c8a8d(0xa5b)]())return![];return VisuMZ[_0x4c8a8d(0x1f3)][_0x4c8a8d(0x38b)][_0x4c8a8d(0x6a3)](this);},Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0xa5b)]=function(){const _0x1a0c89=_0x397c95;for(const _0x186be5 of this[_0x1a0c89(0xa9d)]()){if(!_0x186be5)continue;if(_0x186be5[_0x1a0c89(0x6cc)][_0x1a0c89(0xb38)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x91b)]=Game_Action[_0x397c95(0x6cf)]['setGuard'],Game_Action[_0x397c95(0x6cf)][_0x397c95(0xbe7)]=function(){const _0x1a9e65=_0x397c95;this['subject']()[_0x1a9e65(0x687)]()&&VisuMZ[_0x1a9e65(0x1f3)][_0x1a9e65(0x91b)][_0x1a9e65(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x1d3)]=Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x687)],Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x687)]=function(){const _0x502a1c=_0x397c95;if(!this[_0x502a1c(0x6c9)]())return![];return VisuMZ[_0x502a1c(0x1f3)][_0x502a1c(0x1d3)]['call'](this);},Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0x6c9)]=function(){const _0x4c5894=_0x397c95;for(const _0x9d87e of this[_0x4c5894(0xa9d)]()){if(!_0x9d87e)continue;if(_0x9d87e['note'][_0x4c5894(0xb38)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x397c95(0xb2b)]=function(){const _0x4f2ee7=_0x397c95;for(const _0x516aa1 of this[_0x4f2ee7(0xa9d)]()){if(!_0x516aa1)continue;if(_0x516aa1[_0x4f2ee7(0x6cc)][_0x4f2ee7(0xb38)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x397c95(0x6cf)]['allowRandomSpeed']=function(){const _0x8f9006=_0x397c95;return VisuMZ['BattleCore']['Settings'][_0x8f9006(0x305)]['AllowRandomSpeed'];},VisuMZ['BattleCore'][_0x397c95(0x50a)]=Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x76d)],Game_Battler[_0x397c95(0x6cf)]['regenerateAll']=function(){const _0x4e158a=_0x397c95;if(SceneManager[_0x4e158a(0x650)]()){if(BattleManager['isTpb']()){if(this[_0x4e158a(0xacf)]()<=0x0)return;}else{if($gameTroop[_0x4e158a(0xacf)]()<=0x0)return;}}if(SceneManager[_0x4e158a(0x650)]()&&BattleManager[_0x4e158a(0x939)]()&&this['_lastRegenFrameCount']===Graphics[_0x4e158a(0xae8)]){if(_0x4e158a(0x570)===_0x4e158a(0x673)){_0x4b91fa[_0x4e158a(0x1f3)][_0x4e158a(0x375)][_0x4e158a(0x6a3)](this);if(this[_0x4e158a(0x9fb)]&&!_0x59206f[_0x4e158a(0x127)])this[_0x4e158a(0x809)]();}else return;}this[_0x4e158a(0x965)]=Graphics['frameCount'];if(SceneManager[_0x4e158a(0x650)]()){if(_0x4e158a(0x4e2)!==_0x4e158a(0x5d7))this[_0x4e158a(0xb97)]('PreRegenerateJS');else{_0x406377[_0x4e158a(0x6cf)][_0x4e158a(0x2ed)][_0x4e158a(0x6a3)](this),this['contents']['clear']();if(!this[_0x4e158a(0x9ec)]())return;this[_0x4e158a(0x3c0)]();}}VisuMZ[_0x4e158a(0x1f3)]['Game_Battler_regenerateAll'][_0x4e158a(0x6a3)](this),SceneManager['isSceneBattle']()&&(this[_0x4e158a(0x43a)](),this['processBattleCoreJS'](_0x4e158a(0x1ae)));},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x43a)]=function(){const _0x1c7319=_0x397c95;if(SceneManager[_0x1c7319(0x650)]()){if(_0x1c7319(0xace)!==_0x1c7319(0x6d2))for(const _0xb6ce35 of this['traitObjects']()){if(!_0xb6ce35)continue;this['onRegeneratePlayStateAnimation'](_0xb6ce35);}else _0x219f4d[_0x1c7319(0x1f3)][_0x1c7319(0x5b8)][_0x1c7319(0x6a3)](this),this[_0x1c7319(0x5e0)]();}},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x13d)]=function(_0x193fa9){const _0x15e836=_0x397c95;if(!Imported[_0x15e836(0x301)])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x15e836(0x88a)]())return;if(this['isHidden']())return;if(_0x193fa9['note'][_0x15e836(0xb38)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x15e836(0x4b4)!==_0x15e836(0x4b4))_0x3701bd=_0x15e836(0x971);else{const _0x1f94c2=Number(RegExp['$1']);$gameTemp[_0x15e836(0x92c)]([this],_0x1f94c2,![],![]);}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x7c0)]=Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x153)],Game_Battler[_0x397c95(0x6cf)]['startTpbTurn']=function(){const _0x53fa87=_0x397c95;this[_0x53fa87(0xb97)](_0x53fa87(0x3db)),VisuMZ[_0x53fa87(0x1f3)][_0x53fa87(0x7c0)][_0x53fa87(0x6a3)](this),this[_0x53fa87(0xb97)](_0x53fa87(0x7ea));},VisuMZ[_0x397c95(0x1f3)]['Game_Battler_onTurnEnd']=Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xc9c)],Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xc9c)]=function(){const _0x51b9e8=_0x397c95;this[_0x51b9e8(0xb97)](_0x51b9e8(0x7e3)),VisuMZ['BattleCore'][_0x51b9e8(0x19e)][_0x51b9e8(0x6a3)](this),this['processBattleCoreJS'](_0x51b9e8(0x29b));},Game_Battler[_0x397c95(0x6cf)]['processBattleCoreJS']=function(_0x6fb01a){const _0x4a4a23=_0x397c95;if(this[_0x4a4a23(0x12d)]||this[_0x4a4a23(0xc9f)])return;const _0x8341dd=VisuMZ[_0x4a4a23(0x1f3)][_0x4a4a23(0x716)][_0x4a4a23(0x305)];if(_0x8341dd[_0x6fb01a])_0x8341dd[_0x6fb01a]['call'](this);for(const _0x2f8d8b of this['traitObjects']()){if(!_0x2f8d8b)continue;key=VisuMZ[_0x4a4a23(0x1f3)]['createKeyJS'](_0x2f8d8b,_0x6fb01a);if(VisuMZ[_0x4a4a23(0x1f3)]['JS'][key]){if(_0x4a4a23(0xab6)!==_0x4a4a23(0xab6)){const _0x57ad81=_0x252cbe[_0x1fff00];if(_0x57ad81)this[_0x4a4a23(0x97a)](_0x57ad81);}else VisuMZ[_0x4a4a23(0x1f3)]['JS'][key][_0x4a4a23(0x6a3)](this,this,this,_0x2f8d8b,0x0);}}},Game_Battler[_0x397c95(0x6cf)]['chantStyle']=function(){const _0x4f591c=_0x397c95;return VisuMZ[_0x4f591c(0x1f3)][_0x4f591c(0x716)][_0x4f591c(0xc24)][_0x4f591c(0x492)]||![];},Game_Battler['prototype'][_0x397c95(0xadc)]=function(){const _0x396afe=_0x397c95;if(this[_0x396afe(0x505)]()){if(_0x396afe(0xb6c)===_0x396afe(0xb6c)){if(this['chantStyle']()){if(this[_0x396afe(0x31c)]['some'](_0x19efd6=>_0x19efd6['item']()&&_0x19efd6[_0x396afe(0x254)]()))return!![];}else{if(this[_0x396afe(0x31c)][_0x396afe(0x4f0)](_0x2b6e51=>_0x2b6e51['item']()&&_0x2b6e51[_0x396afe(0x4de)]())){if(_0x396afe(0x958)!==_0x396afe(0x958))this['addSingleSkillCommands']();else return!![];}}}else{_0x4faed0[_0x396afe(0x8d9)](_0x2ee5e3);if(_0x31257e)_0x441a8d['atbInterrupt']();}}if(BattleManager['isTpb']()&&this[_0x396afe(0x2d9)]==='casting')return this['chantStyle']()?this['currentAction']()&&this[_0x396afe(0xc76)]()[_0x396afe(0x398)]()&&this[_0x396afe(0xc76)]()[_0x396afe(0x254)]():this[_0x396afe(0xc76)]()&&this['currentAction']()[_0x396afe(0x398)]()&&this[_0x396afe(0xc76)]()[_0x396afe(0x4de)]();return![];},Game_Battler[_0x397c95(0x6cf)]['isCharging']=function(){const _0x5cddf6=_0x397c95;if(BattleManager[_0x5cddf6(0x939)]()&&this[_0x5cddf6(0x2d9)]===_0x5cddf6(0xafe))return this[_0x5cddf6(0x97f)]()?this[_0x5cddf6(0xc76)]()&&this[_0x5cddf6(0xc76)]()['item']()&&!this[_0x5cddf6(0xc76)]()[_0x5cddf6(0x254)]():'pDuuH'!==_0x5cddf6(0x73d)?this[_0x5cddf6(0xc76)]()&&this[_0x5cddf6(0xc76)]()[_0x5cddf6(0x398)]()&&!this[_0x5cddf6(0xc76)]()[_0x5cddf6(0x4de)]():_0x24b169['BattleCore'][_0x5cddf6(0x716)]['BattleLayout'][_0x5cddf6(0xc4e)];return![];},VisuMZ[_0x397c95(0x1f3)]['Game_Battler_clearDamagePopup']=Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xb6a)],Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xb6a)]=function(){const _0x237611=_0x397c95;VisuMZ[_0x237611(0x1f3)][_0x237611(0x24e)][_0x237611(0x6a3)](this),this['_damagePopupArray']=[];},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x853)]=function(){const _0x53dd26=_0x397c95;if(!this[_0x53dd26(0xaec)])this[_0x53dd26(0xb6a)]();return this['_damagePopupArray']['length']>0x0;},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x25e)]=function(){const _0x1d0b7c=_0x397c95;if(!SceneManager[_0x1d0b7c(0x650)]())return;if(BattleManager[_0x1d0b7c(0x4e7)]())return;if(!this['_damagePopupArray'])this[_0x1d0b7c(0xb6a)]();this[_0x1d0b7c(0x646)]();const _0x5b1fbd=this[_0x1d0b7c(0x7eb)]();if(_0x5b1fbd)_0x5b1fbd['setupDamagePopup']();},Game_Battler[_0x397c95(0x6cf)]['createSeparateDamagePopups']=function(){const _0x524951=_0x397c95,_0x382b39=this['result']();if(_0x382b39[_0x524951(0xa86)]||_0x382b39[_0x524951(0xb83)]){const _0x368275=JsonEx[_0x524951(0x49d)](_0x382b39);_0x368275[_0x524951(0x913)]=![],_0x368275[_0x524951(0x193)]=0x0,this[_0x524951(0xaec)][_0x524951(0x4da)](_0x368275);}if(_0x382b39[_0x524951(0x913)]){const _0x3b563a=JsonEx[_0x524951(0x49d)](_0x382b39);_0x3b563a['missed']=![],_0x3b563a[_0x524951(0xb83)]=![],_0x3b563a[_0x524951(0x193)]=0x0,this['_damagePopupArray'][_0x524951(0x4da)](_0x3b563a);}if(_0x382b39[_0x524951(0x193)]!==0x0){if('YhWxj'===_0x524951(0x974)){const _0x1bc08a=JsonEx[_0x524951(0x49d)](_0x382b39);_0x1bc08a[_0x524951(0xa86)]=![],_0x1bc08a[_0x524951(0xb83)]=![],_0x1bc08a[_0x524951(0x913)]=![],this[_0x524951(0xaec)][_0x524951(0x4da)](_0x1bc08a);}else{if(!_0x59da26['_scene'])return null;if(!_0x5f1e4e['_scene'][_0x524951(0x1e8)])return null;if(!_0x49ecab[_0x524951(0x6fe)][_0x524951(0x1e8)]['_effectsContainer'])return null;return _0x443da8[_0x524951(0x6fe)][_0x524951(0x1e8)][_0x524951(0x6f5)];}}},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x477)]=function(){const _0x1b8fdd=_0x397c95;if(!this[_0x1b8fdd(0xaec)])this['clearDamagePopup']();return VisuMZ[_0x1b8fdd(0x1f3)][_0x1b8fdd(0x716)][_0x1b8fdd(0x7a6)][_0x1b8fdd(0x56d)]?this[_0x1b8fdd(0xaec)]['shift']():this[_0x1b8fdd(0xaec)]['pop']();},Game_Battler['prototype'][_0x397c95(0x5c2)]=function(_0x46d81e,_0x2b6c45){const _0x410d39=_0x397c95;if(!SceneManager[_0x410d39(0x650)]())return;if(BattleManager[_0x410d39(0x4e7)]())return;if(!this[_0x410d39(0x7eb)]())return;if(_0x46d81e[_0x410d39(0x187)]<=0x0)return;_0x2b6c45=_0x2b6c45||{},_0x2b6c45[_0x410d39(0x7ab)]=_0x2b6c45[_0x410d39(0x7ab)]||_0x410d39(0x960),_0x2b6c45[_0x410d39(0x8a2)]=_0x2b6c45['flashColor']||[0x0,0x0,0x0,0x0],_0x2b6c45['flashDuration']=_0x2b6c45['flashDuration']||0x0,this[_0x410d39(0x7eb)]()['setupTextPopup'](_0x46d81e,_0x2b6c45);},Game_Battler['prototype']['setupIconTextPopup']=function(_0x2b3cd0,_0x155d53,_0x207354){const _0x3307fe=_0x397c95;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x3307fe(0x7eb)]())return;if(_0x155d53[_0x3307fe(0x187)]<=0x0)return;_0x207354=_0x207354||{},_0x207354[_0x3307fe(0x7ab)]=_0x207354[_0x3307fe(0x7ab)]||'#ffffff',_0x207354[_0x3307fe(0x8a2)]=_0x207354[_0x3307fe(0x8a2)]||[0x0,0x0,0x0,0x0],_0x207354['flashDuration']=_0x207354[_0x3307fe(0x814)]||0x0,this[_0x3307fe(0x7eb)]()[_0x3307fe(0x643)](_0x2b3cd0,_0x155d53,_0x207354);},Game_Battler['prototype']['notFocusValid']=function(){const _0x113c7c=_0x397c95;if(this['isHidden']())return![];if(this[_0x113c7c(0xa0e)]()&&this[_0x113c7c(0x6f2)]())return!![];if(this[_0x113c7c(0x407)]()&&this[_0x113c7c(0x4a3)]()){if(this[_0x113c7c(0x88a)]()&&this[_0x113c7c(0x674)]())return![];}else{if(this[_0x113c7c(0x88a)]())return![];}return!![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x475)]=Game_Battler['prototype'][_0x397c95(0xc94)],Game_Battler['prototype']['clearMotion']=function(){const _0xbbca47=_0x397c95;VisuMZ[_0xbbca47(0x1f3)][_0xbbca47(0x475)][_0xbbca47(0x6a3)](this),this[_0xbbca47(0xa40)]();},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xc4a)]=function(){return!![];},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xac5)]=function(){return![];},VisuMZ[_0x397c95(0x1f3)]['Game_Battler_onBattleStart']=Game_Battler[_0x397c95(0x6cf)]['onBattleStart'],Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x829)]=function(_0x534cac){const _0x141cc7=_0x397c95;VisuMZ[_0x141cc7(0x1f3)][_0x141cc7(0x6e1)][_0x141cc7(0x6a3)](this,_0x534cac),this[_0x141cc7(0x4c8)](_0x534cac),this[_0x141cc7(0xb6a)]();},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x4c8)]=function(_0xc98a8f){const _0x241aaf=_0x397c95;this[_0x241aaf(0x8d2)](![]),this['_forcedHomeX']=undefined,this[_0x241aaf(0x1e2)]=undefined;},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x5b8)]=Game_Battler['prototype'][_0x397c95(0x551)],Game_Battler[_0x397c95(0x6cf)]['onBattleEnd']=function(){const _0x1ae474=_0x397c95;VisuMZ['BattleCore'][_0x1ae474(0x5b8)]['call'](this),this['onBattleEndBattleCore']();},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x5e0)]=function(){const _0x5ac6c8=_0x397c95;this[_0x5ac6c8(0x9a8)]=undefined,this[_0x5ac6c8(0x1e2)]=undefined;},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x3fd)]=Game_Battler['prototype']['performActionStart'],Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x8a9)]=function(_0x8e45e0){const _0x5107e7=_0x397c95;VisuMZ['BattleCore'][_0x5107e7(0x3fd)]['call'](this,_0x8e45e0);if(!_0x8e45e0[_0x5107e7(0x9a3)]()){if('uIrtN'!==_0x5107e7(0x945)){const _0x23051c=this[_0x5107e7(0x7eb)]();_0x23051c&&(_0x5107e7(0xccd)===_0x5107e7(0xccd)?_0x23051c['stepForward']():_0x3726ad[_0x5107e7(0x222)]=_0x1e940c[_0x5107e7(0x9cb)](_0x2e59d1['$1']));}else return[_0x2c5887];}this[_0x5107e7(0x8d2)](![]);},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xa56)]=function(){const _0x527c2b=_0x397c95,_0x4b3700=this[_0x527c2b(0xb5c)];this[_0x527c2b(0xb5c)]=![];if(BattleManager[_0x527c2b(0x3b5)]()&&this[_0x527c2b(0xadb)]()){const _0x13f5ce=this['battler']();if(_0x13f5ce&&_0x4b3700)_0x13f5ce[_0x527c2b(0x620)]();return;}const _0x179fbb=this[_0x527c2b(0x7eb)]();if(_0x179fbb)_0x179fbb[_0x527c2b(0x65e)]();this['setBattlerFlip'](![]),this[_0x527c2b(0xc5a)]();},Game_Battler[_0x397c95(0x6cf)]['performActionMotions']=function(_0x2d20e3){const _0x29f0fb=_0x397c95;if(_0x2d20e3[_0x29f0fb(0x5d0)]()){if(_0x29f0fb(0x3a7)!==_0x29f0fb(0x3a7)){if(!_0x5b2342['isSceneBattle']())return;_0x4fe979[_0x29f0fb(0x5ff)](_0x44549d,_0x119902);const _0x13dccf=_0x4a4357['getLastPluginCommandInterpreter'](),_0x3cc8d4=_0x413ba7['CreateActionSequenceTargets'](_0x426e11[_0x29f0fb(0x3b9)]),_0x581ad2=_0x297db5[_0x29f0fb(0x7a3)],_0xb8f5f2=_0x10049b[_0x29f0fb(0x972)];if(!_0x13dccf)return;_0x1e992b[_0x29f0fb(0xad9)](_0x3cc8d4,_0x581ad2,_0xb8f5f2);if(_0x14556a[_0x29f0fb(0x1f1)])_0x13dccf[_0x29f0fb(0x2b3)](_0x29f0fb(0x5ca));}else this[_0x29f0fb(0x444)]();}else{if(_0x2d20e3[_0x29f0fb(0x9a3)]())this[_0x29f0fb(0x93a)]('guard');else{if(_0x2d20e3['isMagical']())this[_0x29f0fb(0x93a)](_0x29f0fb(0x87f));else{if(_0x2d20e3[_0x29f0fb(0xcd0)]()){if('lnPXD'!=='lnPXD')_0x20ed86['result']()[_0x29f0fb(0x699)]?this[_0x29f0fb(0x4da)](_0x29f0fb(0x9fc),_0x4818c7):this['push'](_0x29f0fb(0x18a),_0x4f75ed);else{if([0x1,0x2,0x5,0x6]['includes'](_0x2d20e3[_0x29f0fb(0x398)]()['damage'][_0x29f0fb(0xbaa)]))_0x29f0fb(0x330)!==_0x29f0fb(0x53d)?this[_0x29f0fb(0x444)]():(this[_0x29f0fb(0x928)]=new _0x2f6240(),this[_0x29f0fb(0x5ab)](this['_damageContainer']));else{if('dWnpO'!==_0x29f0fb(0x4a8)){if(!_0x2f14b8[_0x29f0fb(0x650)]())return;const _0x39e877=_0x16017c[_0x29f0fb(0xaeb)]();if(!_0x39e877)return;_0x39e877[_0x29f0fb(0x2b3)](_0x29f0fb(0x759));}else this['requestMotion'](_0x29f0fb(0x54d));}}}else _0x2d20e3[_0x29f0fb(0xc57)]()&&this['requestMotion'](_0x29f0fb(0x398));}}}},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xcea)]=function(){const _0x49ea20=_0x397c95;return $dataSystem[_0x49ea20(0x77a)][0x0];},Game_Battler['prototype'][_0x397c95(0x224)]=function(){const _0x279467=_0x397c95,_0x1fbcd2=this[_0x279467(0xcea)]();return _0x1fbcd2?_0x1fbcd2[_0x279467(0xa98)]:0x0;},Game_Battler['prototype']['performSubstitute']=function(_0x34b8e1){const _0x173325=_0x397c95;if(!$gameSystem[_0x173325(0x221)]())return;const _0x53848b=this[_0x173325(0x7eb)](),_0x3e8012=_0x34b8e1[_0x173325(0x7eb)]();if(!_0x53848b||!_0x3e8012)return;const _0x51a863=_0x3e8012['_baseX'],_0x4781ef=_0x3e8012['_baseY'];this['moveBattlerToPoint'](_0x51a863,_0x4781ef,0x0,![],_0x173325(0xa76),-0x1),_0x53848b[_0x173325(0x209)]();const _0x2cb0cd=VisuMZ[_0x173325(0x1f3)][_0x173325(0x716)][_0x173325(0x44c)];let _0x3917d5=(_0x3e8012[_0x173325(0x76b)]+_0x53848b[_0x173325(0x76b)])/0x2;_0x3917d5*=this['isActor']()?0x1:-0x1;let _0x5c6b94=_0x2cb0cd[_0x173325(0x147)]*(this[_0x173325(0x850)]()?0x1:-0x1);_0x34b8e1[_0x173325(0xcd4)](_0x3917d5,_0x5c6b94,0x0,![],_0x173325(0xa76)),_0x3e8012['updatePosition']();},Game_Battler['prototype'][_0x397c95(0x93a)]=function(_0x26bb25){const _0x58225f=_0x397c95;if(SceneManager[_0x58225f(0x650)]()){if(_0x58225f(0x453)!==_0x58225f(0x453)){if(this[_0x58225f(0x88d)])_0xbebbf6=_0x1b20b8['max'](0x0,this[_0x58225f(0x88d)]['height']-0x4);}else{const _0x4c4a09=this[_0x58225f(0x7eb)]();_0x4c4a09&&(_0x4c4a09[_0x58225f(0x57c)](_0x26bb25),[_0x58225f(0x75b),_0x58225f(0x59f),'missile']['includes'](_0x26bb25)&&this[_0x58225f(0x6c7)]());}}this[_0x58225f(0xa40)]();},Game_Battler['prototype'][_0x397c95(0x6c7)]=function(){},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x7b2)]=function(_0x14ca5d){const _0x26a551=_0x397c95;if(SceneManager[_0x26a551(0x650)]()){if(_0x26a551(0x469)===_0x26a551(0x469)){const _0x35a00a=this[_0x26a551(0x7eb)]();if(_0x35a00a)_0x35a00a[_0x26a551(0x6b4)](_0x14ca5d);}else _0x27cfb8['BattleCore'][_0x26a551(0xd0a)][_0x26a551(0x6a3)](this,_0x29d37f),this[_0x26a551(0x312)](),this[_0x26a551(0xac4)]();}},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x5ef)]=function(){const _0x12e843=_0x397c95;if(SceneManager[_0x12e843(0x650)]()){const _0x4b15f4=this[_0x12e843(0x224)]();this['startWeaponAnimation'](_0x4b15f4);}},Game_Battler[_0x397c95(0x6cf)]['performCastAnimation']=function(_0x42455f,_0x1e4b5b){const _0x436d11=_0x397c95;if(!_0x42455f)return;if(!_0x42455f[_0x436d11(0x398)]())return;if(_0x42455f[_0x436d11(0x5d0)]())return;if(_0x42455f[_0x436d11(0x9a3)]())return;if(_0x42455f['isItem']())return;let _0x37c500=0x0;const _0x15dad7=VisuMZ[_0x436d11(0x1f3)]['Settings']['ActionSequence'],_0x36662e=_0x42455f['item']()[_0x436d11(0x6cc)];if(_0x36662e[_0x436d11(0xb38)](/<CAST ANIMATION: (\d+)>/i))_0x37c500=Number(RegExp['$1']);else{if(_0x36662e[_0x436d11(0xb38)](/<NO CAST ANIMATION>/i)){if(_0x436d11(0x72b)!==_0x436d11(0x72b))return _0x2b5985(_0xe2c10e['$1']);else return;}else{if(_0x42455f['isCertainHit']()){if(_0x436d11(0x4ca)===_0x436d11(0x8cd))return!![];else _0x37c500=_0x15dad7[_0x436d11(0x74b)];}else{if(_0x42455f['isPhysical']())_0x37c500=_0x15dad7['CastPhysical'];else _0x42455f[_0x436d11(0x254)]()&&(_0x436d11(0xa8c)!=='kUoEe'?(this[_0x436d11(0x4fd)]=0x0,this['_baseY']=0x0,this['_floatHeight']=0x0,this[_0x436d11(0x533)]=0x0,this[_0x436d11(0x174)]=0x0,this[_0x436d11(0xc14)]=0x0,this['_floatEasing']=_0x436d11(0xa76),this[_0x436d11(0x88c)]=0x0,this[_0x436d11(0xa34)]=0x0,this[_0x436d11(0x179)]=0x0,this[_0x436d11(0x9dc)]=0x0,this[_0x436d11(0x1fb)]=0xff,this[_0x436d11(0xade)]=0x0,this[_0x436d11(0xb48)]=0x0,this['_opacityEasing']=_0x436d11(0xa76),this[_0x436d11(0x522)]=0x0,this['_targetAngle']=0x0,this[_0x436d11(0x717)]=0x0,this[_0x436d11(0x606)]=0x0,this[_0x436d11(0x6ac)]='Linear',this['_angleRevertOnFinish']=!![],this[_0x436d11(0xcef)]=0x0,this['_skewY']=0x0,this[_0x436d11(0x99f)]=0x0,this[_0x436d11(0x3f8)]=0x0,this['_skewDuration']=0x0,this[_0x436d11(0x320)]=0x0,this['_skewEasing']=_0x436d11(0xa76),this['_growX']=0x1,this[_0x436d11(0x4ff)]=0x1,this[_0x436d11(0x530)]=0x1,this[_0x436d11(0x7ed)]=0x1,this[_0x436d11(0x9dd)]=0x0,this[_0x436d11(0xb45)]=0x0,this['_growEasing']=_0x436d11(0xa76),this[_0x436d11(0x180)]=0x1,this[_0x436d11(0x7ce)]=0x0,this[_0x436d11(0xa3f)]=0x0,this[_0x436d11(0x204)]=0x0,this['_homeWholeDuration']=0x0,this['_homeEasing']='Linear',this[_0x436d11(0x8c0)]=0x0,this[_0x436d11(0x9b7)]=0x0):_0x37c500=_0x15dad7[_0x436d11(0x5f3)]);}}}_0x37c500>0x0&&$gameTemp['requestAnimation']([this],_0x37c500,!!_0x1e4b5b);},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xb2a)]=function(){const _0x4d8c55=_0x397c95;SoundManager[_0x4d8c55(0x36b)]();let _0x85688=VisuMZ[_0x4d8c55(0x1f3)][_0x4d8c55(0x716)]['ActionSequence'][_0x4d8c55(0x9d0)];_0x85688>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp['requestFauxAnimation']([this],_0x85688):$gameTemp[_0x4d8c55(0xad9)]([this],_0x85688));},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x359)]=Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x488)],Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x488)]=function(){const _0x5d2921=_0x397c95;VisuMZ[_0x5d2921(0x1f3)][_0x5d2921(0x359)][_0x5d2921(0x6a3)](this),this[_0x5d2921(0x8d1)](),this[_0x5d2921(0x5c5)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xb6b)]=Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x8c6)],Game_Battler['prototype']['performMiss']=function(){const _0x5b7519=_0x397c95;VisuMZ['BattleCore']['Game_Battler_performMiss'][_0x5b7519(0x6a3)](this),this['performFlinch']();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x2b0)]=Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x9fc)],Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x9fc)]=function(){const _0x17a881=_0x397c95;VisuMZ[_0x17a881(0x1f3)][_0x17a881(0x2b0)][_0x17a881(0x6a3)](this),this[_0x17a881(0x8d1)]();},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x8d1)]=function(){const _0x5004cd=_0x397c95;if(!$gameSystem[_0x5004cd(0x221)]())return;if(this[_0x5004cd(0xb5c)])return;this['_flinched']=!![];const _0x589492=this[_0x5004cd(0x7eb)]();if(_0x589492)_0x589492[_0x5004cd(0x768)]();},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x5c5)]=function(){const _0x126758=_0x397c95;if(!this[_0x126758(0xc4a)]())return;const _0x535ad6=VisuMZ[_0x126758(0x1f3)][_0x126758(0x716)][_0x126758(0xc24)];if(!(_0x535ad6[_0x126758(0x223)]??![]))return;if(this[_0x126758(0x303)]<=0x0)return;const _0x678bec=this[_0x126758(0x7eb)]();if(_0x678bec){const _0x2e745a=this[_0x126758(0x303)],_0x5f5a9a=(_0x2e745a/this[_0x126758(0x387)])[_0x126758(0x8ca)](0.8,0x1),_0x247b3e=_0x535ad6[_0x126758(0x3fb)]??0x30,_0x2509d6=_0x5f5a9a*_0x247b3e;_0x678bec[_0x126758(0xb7a)](_0x2509d6,_0x5f5a9a);}},Game_Battler[_0x397c95(0x6cf)]['requestMotionRefresh']=function(){const _0x5dbca2=_0x397c95;if(this[_0x5dbca2(0x88a)]()&&this[_0x5dbca2(0x4f6)]!=='dead'){this['requestMotion'](_0x5dbca2(0xb3e));return;}if(this[_0x5dbca2(0x88a)]()&&this[_0x5dbca2(0x4f6)]===_0x5dbca2(0xb3e))return;if(!!this[_0x5dbca2(0xc30)])return;if(this[_0x5dbca2(0x407)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x5dbca2(0x127)]){if(_0x5dbca2(0xa79)!==_0x5dbca2(0x37e)){if(this[_0x5dbca2(0x7eb)]())this['battler']()[_0x5dbca2(0x840)]();}else _0x4bdcc3=_0x2262a2['battler']()[_0x5dbca2(0x169)],_0x2400a0=_0x4f888c['battler']()['_homeY'];}this['clearFreezeMotion']();return;}if(this[_0x5dbca2(0x4f6)]===_0x5dbca2(0x6d6))return;if(this['_motionType']===_0x5dbca2(0x95b)&&!BattleManager[_0x5dbca2(0xadb)]())return;if(this[_0x5dbca2(0x4f6)]===_0x5dbca2(0x50e)&&!BattleManager[_0x5dbca2(0xadb)]())return;this['clearMotion']();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x5dbca2(0x127)])return;if(this['battler']()&&BattleManager[_0x5dbca2(0xadb)]()){this[_0x5dbca2(0x7eb)]()[_0x5dbca2(0x840)](),this['clearFreezeMotion']();return;}},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x2fe)]=function(){const _0x457c74=_0x397c95;if(!this[_0x457c74(0x4a3)]())return![];const _0x4c6d77=this[_0x457c74(0x7eb)]();if(!_0x4c6d77)return![];const _0x4ee33=_0x4c6d77[_0x457c74(0x64f)];if(!_0x4ee33)return![];const _0x4c8dc6=_0x4ee33[_0x457c74(0xb0e)];return _0x4c8dc6&&!_0x4c8dc6[_0x457c74(0x601)];},Game_Battler[_0x397c95(0x6cf)]['isBattlerFlipped']=function(){const _0x344d89=_0x397c95;return this[_0x344d89(0x991)];},Game_Battler[_0x397c95(0x6cf)]['setBattlerFlip']=function(_0x5531ee){const _0x526df4=_0x397c95;if(!$gameSystem[_0x526df4(0x221)]())return;this[_0x526df4(0x991)]=_0x5531ee;const _0x597a2c=this['battler']();if(_0x597a2c)_0x597a2c[_0x526df4(0x6b2)]();},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x448)]=function(_0x23596f,_0x117897,_0xd38d6e){const _0x1f95ed=_0x397c95;if(!$gameSystem[_0x1f95ed(0x221)]())return;const _0x3217e2=this[_0x1f95ed(0x7eb)]();if(!_0x3217e2)return;if(_0x23596f===_0x3217e2[_0x1f95ed(0x4fd)])return;let _0x387c86=![];if(this['isActor']()){if('iMQAn'!==_0x1f95ed(0x6f8)){if(_0x23596f>_0x3217e2[_0x1f95ed(0x4fd)])_0x387c86=!![];if(_0x23596f<_0x3217e2[_0x1f95ed(0x4fd)])_0x387c86=![];}else for(const _0x312539 of _0x3998c7){const _0x558000=_0x49f594[0x0]['format'](_0x312539[0x0],_0x339a05[0x0]),_0x1a27bf=_0x38fb70[0x1][_0x1f95ed(0xadd)](_0x312539[0x1],_0x1f1ddb[0x1])[_0x1f95ed(0xb34)](),_0x4c8a00=new _0x87fef1(_0xfde2db['format'](_0x1a27bf),'i');_0x3d2b5f[_0x558000]=_0x4c8a00;}}else{if(this[_0x1f95ed(0x407)]()){if(_0x1f95ed(0xa90)===_0x1f95ed(0x6e6)){if(!_0x59624b[_0x1f95ed(0x650)]())return;if(_0x1588a0[_0x1f95ed(0x4e7)]())return;if(!this[_0x1f95ed(0x7eb)]())return;if(_0x4cb904[_0x1f95ed(0x187)]<=0x0)return;_0x25d162=_0x5920b6||{},_0xd2d249[_0x1f95ed(0x7ab)]=_0x25587f[_0x1f95ed(0x7ab)]||'#ffffff',_0x592b1f['flashColor']=_0x4b8ea1[_0x1f95ed(0x8a2)]||[0x0,0x0,0x0,0x0],_0x3fe50e[_0x1f95ed(0x814)]=_0x5536b4['flashDuration']||0x0,this['battler']()[_0x1f95ed(0x643)](_0x360cb8,_0x3c8e66,_0x6adb75);}else{if(_0x23596f>_0x3217e2[_0x1f95ed(0x4fd)])_0x387c86=![];if(_0x23596f<_0x3217e2['_baseX'])_0x387c86=!![];}}};this[_0x1f95ed(0x8d2)](_0xd38d6e?!_0x387c86:_0x387c86),_0x3217e2['updateFlip']();},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xcd4)]=function(_0x607366,_0xa7fc5a,_0x3fb36e,_0x4ccd1f,_0x15b136){const _0x47311=_0x397c95;if(!$gameSystem[_0x47311(0x221)]())return;const _0x5841ca=this['battler']();if(!_0x5841ca)return;if(_0x4ccd1f)this[_0x47311(0x448)](_0x607366+_0x5841ca[_0x47311(0x4fd)],_0xa7fc5a+_0x5841ca['_baseY'],![]);_0x607366+=_0x5841ca['_baseX']-_0x5841ca[_0x47311(0x169)],_0xa7fc5a+=_0x5841ca[_0x47311(0x39a)]-_0x5841ca[_0x47311(0x887)],_0x5841ca[_0x47311(0xc5f)](_0x607366,_0xa7fc5a,_0x3fb36e);if(Imported[_0x47311(0x301)])_0x5841ca[_0x47311(0x481)](_0x15b136||'Linear');},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x27d)]=function(_0x3f8974,_0x17f63a,_0x42ad1e,_0x3366d9,_0x36ae29,_0x170fbb){const _0x5569c3=_0x397c95;if(!$gameSystem[_0x5569c3(0x221)]())return;const _0xf0a730=this[_0x5569c3(0x7eb)]();if(!_0xf0a730)return;if(_0x3f8974===Infinity||_0x17f63a===Infinity)return;if(isNaN(_0x3f8974)||isNaN(_0x17f63a))return;_0x170fbb=_0x170fbb||0x0;if(_0x170fbb>0x0){if(_0xf0a730[_0x5569c3(0x4fd)]>_0x3f8974)_0x3f8974+=_0xf0a730[_0x5569c3(0x76b)]/0x2+_0x170fbb;if(_0xf0a730[_0x5569c3(0x4fd)]<_0x3f8974)_0x3f8974-=_0xf0a730[_0x5569c3(0x76b)]/0x2+_0x170fbb;}if(_0x3366d9)this[_0x5569c3(0x448)](_0x3f8974,_0x17f63a,![]);_0x3f8974-=_0xf0a730['_homeX'],_0x17f63a-=_0xf0a730[_0x5569c3(0x887)],_0xf0a730[_0x5569c3(0xc5f)](_0x3f8974,_0x17f63a,_0x42ad1e);if(Imported['VisuMZ_0_CoreEngine'])_0xf0a730[_0x5569c3(0x481)](_0x36ae29||_0x5569c3(0xa76));},Game_Battler['prototype'][_0x397c95(0x4e4)]=function(_0x3b7e6d,_0x1a2f95,_0x34ba58,_0x23f6ef,_0x5e2aa3){const _0x5cedd4=_0x397c95;if(!$gameSystem[_0x5cedd4(0x221)]())return;const _0x378f9c=this[_0x5cedd4(0x7eb)]();if(!_0x378f9c)return;if(_0x23f6ef)this[_0x5cedd4(0x448)](_0x3b7e6d+_0x378f9c[_0x5cedd4(0x4fd)],_0x1a2f95+_0x378f9c[_0x5cedd4(0x39a)],![]);_0x3b7e6d+=_0x378f9c['_homeX'],_0x1a2f95+=_0x378f9c['_homeY'],_0x378f9c[_0x5cedd4(0x32d)](_0x3b7e6d,_0x1a2f95,_0x34ba58,_0x5e2aa3),this[_0x5cedd4(0x9a8)]=_0x3b7e6d,this['_forcedHomeY']=_0x1a2f95;},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x17e)]=function(_0x40e276,_0x8c7965,_0x280340,_0x39324d,_0x593646,_0xc2c943){const _0x410afa=_0x397c95;if(!$gameSystem['isSideView']())return;const _0x19ff3f=this['battler']();if(!_0x19ff3f)return;_0xc2c943=_0xc2c943||0x0;if(_0xc2c943>0x0){if(_0x410afa(0x5a1)===_0x410afa(0x5a1)){if(_0x19ff3f[_0x410afa(0x4fd)]>_0x40e276)_0x40e276+=_0x19ff3f['width']/0x2+_0xc2c943;if(_0x19ff3f[_0x410afa(0x4fd)]<_0x40e276)_0x40e276-=_0x19ff3f[_0x410afa(0x76b)]/0x2+_0xc2c943;}else this[_0x410afa(0x141)][_0x410afa(0xbaa)]=_0x180c1d[_0x410afa(0x75e)](),this[_0x410afa(0x141)][_0x410afa(0x91d)]=_0x18eb1b['weatherPower']();}if(_0x39324d)this[_0x410afa(0x448)](_0x40e276,_0x8c7965,![]);_0x19ff3f['startHomeMove'](_0x40e276,_0x8c7965,_0x280340,_0x593646),this[_0x410afa(0x9a8)]=_0x40e276,this['_forcedHomeY']=_0x8c7965;},Game_Battler[_0x397c95(0x6cf)]['floatBattler']=function(_0x56e0e0,_0x2782ec,_0x351b52){const _0x412305=_0x397c95;if(!$gameSystem[_0x412305(0x221)]())return;const _0x30e83a=this[_0x412305(0x7eb)]();if(!_0x30e83a)return;_0x30e83a[_0x412305(0xc47)](_0x56e0e0,_0x2782ec,_0x351b52);},Game_Battler['prototype']['jumpBattler']=function(_0x42d482,_0x139fdc){const _0x48a431=_0x397c95;if(!$gameSystem['isSideView']())return;const _0x2bc5d0=this[_0x48a431(0x7eb)]();if(!_0x2bc5d0)return;_0x2bc5d0[_0x48a431(0xc09)](_0x42d482,_0x139fdc);},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x229)]=function(_0x41ddc3,_0x27ad2d,_0x8cb4ca,_0xcb2efc){const _0x556a5f=_0x397c95;if(!$gameSystem[_0x556a5f(0x221)]())return;const _0xa4d682=this[_0x556a5f(0x7eb)]();if(!_0xa4d682)return;_0xa4d682[_0x556a5f(0x235)](_0x41ddc3,_0x27ad2d,_0x8cb4ca,_0xcb2efc);},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x9ff)]=function(_0x1b40bd,_0x31bdba,_0xf0a299,_0x43b949){const _0x5d2a16=_0x397c95;if(!$gameSystem[_0x5d2a16(0x221)]())return;const _0x549daa=this[_0x5d2a16(0x7eb)]();if(!_0x549daa)return;this[_0x5d2a16(0x850)]()&&(_0x1b40bd*=-0x1,_0x31bdba*=-0x1),_0x549daa[_0x5d2a16(0xb8b)](_0x1b40bd,_0x31bdba,_0xf0a299,_0x43b949);},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x46b)]=function(_0x182ca9,_0x3d1631,_0x33419a,_0x18243c){const _0x3410de=_0x397c95;if(!$gameSystem['isSideView']())return;const _0x2e80bb=this[_0x3410de(0x7eb)]();if(!_0x2e80bb)return;_0x2e80bb[_0x3410de(0x7bb)](_0x182ca9,_0x3d1631,_0x33419a,_0x18243c);},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x724)]=function(_0x196438,_0x124fa8,_0x5c764f){const _0x14745d=_0x397c95;if(!$gameSystem['isSideView']())return;const _0x14cf8c=this[_0x14745d(0x7eb)]();if(!_0x14cf8c)return;_0x14cf8c[_0x14745d(0x876)](_0x196438,_0x124fa8,_0x5c764f);},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0xa40)]=function(){const _0x21d468=_0x397c95,_0x5363cb=!!this[_0x21d468(0xc30)];this['_freezeMotionData']=undefined,_0x5363cb&&(this[_0x21d468(0xc5a)](),this[_0x21d468(0x376)]());},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x376)]=function(){const _0xeff844=_0x397c95;if(!SceneManager[_0xeff844(0x650)]())return;const _0x468f29=this['battler']();if(!_0x468f29)return;let _0x47dda4=this[_0xeff844(0x850)]()?_0x468f29[_0xeff844(0x796)]:_0x468f29['_svBattlerSprite'][_0xeff844(0x796)];_0x47dda4&&_0x47dda4[_0xeff844(0x74a)](0x0);},Game_Battler['prototype'][_0x397c95(0x2c4)]=function(_0x1445eb,_0x4ce698,_0x158f08){const _0x356e92=_0x397c95;if(this['isEnemy']()&&!this['hasSvBattler']())return;let _0x318e65=0x0,_0x130b0d=0x0;_0x1445eb[_0x356e92(0xb38)](/ATTACK[ ](\d+)/i)&&(_0x130b0d=Number(RegExp['$1']),_0x130b0d--);if(this['isActor']()){const _0x3f46eb=this[_0x356e92(0x51d)]();_0x318e65=_0x3f46eb[_0x130b0d]?_0x3f46eb[_0x130b0d][_0x356e92(0x222)]:0x0;}else this[_0x356e92(0x407)]()&&(_0x318e65=this['svBattlerData']()[_0x356e92(0x222)]||0x0);const _0x1d9a12=$dataSystem['attackMotions'][_0x318e65];_0x1445eb['match'](/attack/i)&&(_0x1445eb=['thrust',_0x356e92(0x75b),_0x356e92(0x36c)][_0x1d9a12[_0x356e92(0xbaa)]]||_0x356e92(0x75b)),this['_freezeMotionData']={'motionType':_0x1445eb,'weaponImageId':_0x4ce698?_0x1d9a12['weaponImageId']:0x0,'pattern':_0x158f08};},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x162)]=function(_0x467555){const _0x2dab90=_0x397c95;if(!_0x467555)return![];return _0x467555['friendsUnit']()===this[_0x2dab90(0x154)]();},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x489)]=function(_0x187c11){const _0x3b8ee6=_0x397c95;if(!_0x187c11)return![];return _0x187c11[_0x3b8ee6(0xb5f)]()===this[_0x3b8ee6(0x154)]();},Game_Battler['prototype'][_0x397c95(0x4e3)]=function(){return![];},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0x4e3)]=function(){const _0x152e65=_0x397c95;return this[_0x152e65(0x9b0)]()['match'](/\$/i);},Game_Enemy['prototype']['hasStaticSvBattler']=function(){const _0x3ee0b8=_0x397c95;return this[_0x3ee0b8(0x4a3)]()&&this[_0x3ee0b8(0x9d9)]()['match'](/\$/i);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xc26)]=Game_Actor[_0x397c95(0x6cf)][_0x397c95(0x74a)],Game_Actor[_0x397c95(0x6cf)]['setup']=function(_0x4173ac){const _0x3ad286=_0x397c95;VisuMZ[_0x3ad286(0x1f3)]['Game_Actor_setup'][_0x3ad286(0x6a3)](this,_0x4173ac),this[_0x3ad286(0xab0)]();},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0xab0)]=function(){const _0x2f3556=_0x397c95;this['_battlePortrait']='',this[_0x2f3556(0x793)]()&&this[_0x2f3556(0x793)]()[_0x2f3556(0x6cc)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(_0x2f3556(0x2ec)===_0x2f3556(0x2ec)?this[_0x2f3556(0xa4d)]=String(RegExp['$1']):(_0x4b3ebb[_0x2f3556(0x793)]()[_0x2f3556(0x361)](),_0x28723a['finishActorInput'](),_0x24ef08[_0x2f3556(0x5bd)](),this[_0x2f3556(0x788)]()));},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0xa3e)]=function(){const _0x317977=_0x397c95;if(this[_0x317977(0x6ef)]()!==''){if(_0x317977(0x374)===_0x317977(0x563))this[_0x317977(0x4fd)]=this['x'],this[_0x317977(0x39a)]=this['y'],this['updateFloat'](),this[_0x317977(0xad1)](),this['x']+=this[_0x317977(0x837)](),this['y']+=this[_0x317977(0x2f6)](),this['y']+=this[_0x317977(0x9e6)](),this['x']=_0x28f658[_0x317977(0xaee)](this['x']),this['y']=_0x3d80ac[_0x317977(0xaee)](this['y']);else return this[_0x317977(0x6ef)]();}else{if(Imported[_0x317977(0x24f)]&&this[_0x317977(0xa20)]()!=='')return this[_0x317977(0xa20)]();}return'';},Game_Actor[_0x397c95(0x6cf)]['getBattlePortrait']=function(){const _0x485f97=_0x397c95;if(this[_0x485f97(0xa4d)]===undefined)this[_0x485f97(0xab0)]();return this[_0x485f97(0xa4d)];},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0x8fd)]=function(_0xe39866){const _0x1bd130=_0x397c95;if(this['_battlePortrait']===undefined)this['initBattlePortrait']();this[_0x1bd130(0xa4d)]=_0xe39866;if(SceneManager[_0x1bd130(0x650)]()&&$gameParty[_0x1bd130(0x7ee)]()[_0x1bd130(0x932)](this)){if(_0x1bd130(0x93d)!==_0x1bd130(0x93d))return _0x56f7e7[_0x1bd130(0xa92)][_0x1bd130(0x716)]['QoL'][_0x1bd130(0x4a6)];else{const _0x5daf00=SceneManager['_scene'][_0x1bd130(0x1e8)];_0x5daf00&&_0x5daf00['refreshActorPortrait'](this);}}},Game_Actor[_0x397c95(0x6cf)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0x3ed)]=function(){const _0x59337e=_0x397c95;if(!this['isConfused']()&&BattleManager[_0x59337e(0x8d5)])return!![];return Game_Battler[_0x59337e(0x6cf)][_0x59337e(0x3ed)][_0x59337e(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x251)]=Game_Actor[_0x397c95(0x6cf)][_0x397c95(0xaf8)],Game_Actor['prototype'][_0x397c95(0xaf8)]=function(){const _0x2dc43a=_0x397c95;if(BattleManager['_autoBattle']&&!ConfigManager[_0x2dc43a(0xa03)]){if(_0x2dc43a(0x783)===_0x2dc43a(0x783))return this[_0x2dc43a(0x5c8)]();else[0x6c,0x198][_0x2dc43a(0x932)](_0x5b0b95[_0x2dc43a(0x665)])&&(_0x2dcf41+='\x0a',_0x3398c8+=_0x4cc5d2[_0x2dc43a(0x554)][0x0]);}else{return VisuMZ['BattleCore'][_0x2dc43a(0x251)][_0x2dc43a(0x6a3)](this);;}},Game_Actor['prototype'][_0x397c95(0x5c8)]=function(){const _0x594cbb=_0x397c95,_0x165193=[],_0x1932e2=new Game_Action(this);return _0x1932e2[_0x594cbb(0x651)](),_0x165193['push'](_0x1932e2),_0x165193;},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0x4ee)]=function(){const _0x1f660c=_0x397c95;if(this[_0x1f660c(0x90a)]()[_0x1f660c(0x6cc)][_0x1f660c(0xb38)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i))return String(RegExp['$1'])['split'](/[\r\n]+/);else{if(_0x1f660c(0x17f)===_0x1f660c(0x17f))return VisuMZ['BattleCore'][_0x1f660c(0x716)][_0x1f660c(0xa32)][_0x1f660c(0x142)];else _0x452082['BattleCore'][_0x1f660c(0x26c)]['call'](this),_0x137965['clearForcedGameTroopSettingsBattleCore']();}},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0x678)]=function(){const _0x3eae53=_0x397c95;if(this[_0x3eae53(0xcfe)][_0x3eae53(0x8ff)]!==undefined)return this[_0x3eae53(0xcfe)][_0x3eae53(0x8ff)];return this[_0x3eae53(0x793)]()['note'][_0x3eae53(0xb38)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x3eae53(0xcfe)]['svAnchorX']=eval(RegExp['$1']),this[_0x3eae53(0xcfe)][_0x3eae53(0x269)]=eval(RegExp['$2'])):this[_0x3eae53(0xcfe)][_0x3eae53(0x8ff)]=Game_Battler[_0x3eae53(0x6cf)]['svBattlerAnchorX'][_0x3eae53(0x6a3)](this),this['_cache'][_0x3eae53(0x8ff)];},Game_Actor['prototype']['svBattlerAnchorY']=function(){const _0x478f53=_0x397c95;if(this[_0x478f53(0xcfe)][_0x478f53(0x269)]!==undefined)return this['_cache'][_0x478f53(0x269)];if(this['actor']()[_0x478f53(0x6cc)][_0x478f53(0xb38)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0x478f53(0xcfe)][_0x478f53(0x8ff)]=eval(RegExp['$1']),this[_0x478f53(0xcfe)][_0x478f53(0x269)]=eval(RegExp['$2']);else{if(_0x478f53(0xb24)!=='VZNen'){if(_0x2e3587[_0x478f53(0x3f1)](_0x56405a))return!![];return![];}else this[_0x478f53(0xcfe)][_0x478f53(0x269)]=Game_Battler['prototype']['svBattlerAnchorY'][_0x478f53(0x6a3)](this);}return this[_0x478f53(0xcfe)][_0x478f53(0x269)];},Game_Actor['prototype'][_0x397c95(0x7e4)]=function(){const _0x1465d7=_0x397c95;if(this[_0x1465d7(0xcfe)][_0x1465d7(0x265)]!==undefined)return this[_0x1465d7(0xcfe)]['svShadow'];if(this['actor']()['note'][_0x1465d7(0xb38)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x1465d7(0xc4f)!==_0x1465d7(0xc4f)){if(!_0xaf65ec[_0x1465d7(0x221)]())return;const _0x2361c2=this[_0x1465d7(0x7eb)]();if(!_0x2361c2)return;_0x2361c2[_0x1465d7(0xc47)](_0x43762c,_0x296663,_0x2cf104);}else this['_cache'][_0x1465d7(0x265)]=!![];}else this[_0x1465d7(0x793)]()[_0x1465d7(0x6cc)]['match'](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x1465d7(0xcfe)][_0x1465d7(0x265)]=![]:this['_cache'][_0x1465d7(0x265)]=Game_Battler[_0x1465d7(0x6cf)][_0x1465d7(0x7e4)]['call'](this);return this[_0x1465d7(0xcfe)][_0x1465d7(0x265)];},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0x802)]=function(){const _0x5278c0=_0x397c95;return VisuMZ[_0x5278c0(0x1f3)][_0x5278c0(0x716)]['Actor'][_0x5278c0(0x94a)];},Game_Actor['prototype'][_0x397c95(0x6c7)]=function(){const _0x3e2b3f=_0x397c95,_0xd66b3a=this[_0x3e2b3f(0x51d)](),_0x328492=_0xd66b3a[0x0]?_0xd66b3a[0x0][_0x3e2b3f(0x222)]:0x0,_0x34d0e2=$dataSystem[_0x3e2b3f(0x77a)][_0x328492];_0x34d0e2&&this[_0x3e2b3f(0x7b2)](_0x34d0e2[_0x3e2b3f(0xa98)]);},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0xbee)]=function(_0x22fa34){const _0x7e744f=_0x397c95;Game_Battler[_0x7e744f(0x6cf)][_0x7e744f(0xbee)][_0x7e744f(0x6a3)](this,_0x22fa34),this[_0x7e744f(0xc79)](_0x22fa34);},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0xcea)]=function(){const _0x11cfa0=_0x397c95,_0x51438c=this[_0x11cfa0(0x51d)](),_0x4903bd=_0x51438c[0x0]?_0x51438c[0x0][_0x11cfa0(0x222)]:0x0;return $dataSystem[_0x11cfa0(0x77a)][_0x4903bd];},Game_Actor[_0x397c95(0x6cf)]['attackAnimationIdSlot']=function(_0x324706){const _0x4ea50c=_0x397c95;_0x324706=_0x324706||0x1,_0x324706--;const _0x4a030c=this[_0x4ea50c(0x51d)]();return _0x4a030c[_0x324706]?_0x4a030c[_0x324706]['animationId']:0x0;},Game_Actor['prototype'][_0x397c95(0x144)]=function(_0x598dea){const _0x3cf699=_0x397c95;_0x598dea=_0x598dea||0x1,_0x598dea--;const _0x5e6991=this[_0x3cf699(0x51d)](),_0x4a12d7=_0x5e6991[_0x598dea]?_0x5e6991[_0x598dea][_0x3cf699(0x222)]:0x0;return $dataSystem[_0x3cf699(0x77a)][_0x4a12d7];},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0x31a)]=function(_0x3b3719){const _0x5918d3=_0x397c95;_0x3b3719=_0x3b3719||0x1,_0x3b3719--;const _0x446442=this['weapons'](),_0x299003=_0x446442[_0x3b3719]?_0x446442[_0x3b3719][_0x5918d3(0x222)]:0x0,_0x44f964=$dataSystem['attackMotions'][_0x299003];if(_0x44f964){if(_0x44f964['type']===0x0)this[_0x5918d3(0x93a)](_0x5918d3(0x59f));else{if(_0x44f964[_0x5918d3(0xbaa)]===0x1){if(_0x5918d3(0x750)===_0x5918d3(0x750))this[_0x5918d3(0x93a)](_0x5918d3(0x75b));else return!![];}else{if(_0x44f964[_0x5918d3(0xbaa)]===0x2){if('AiDul'===_0x5918d3(0xb4e)){const _0x63074b=_0x5370cf[_0x5918d3(0x996)],_0x5115f3=this[_0x5918d3(0x9e5)](0x1,!![]);let _0x4a52a9=_0x4a1186?_0xf0fe1f[_0x5918d3(0xb5d)]-_0x63074b:0x0;_0x4a52a9+=_0x39056a?_0x28f9c1[_0x5918d3(0x88f)]:_0x48d2f3[_0x5918d3(0x906)];const _0x39abd3=[_0x5918d3(0x605)][_0x5918d3(0x932)](this[_0x5918d3(0x1b2)]())?0x0:this[_0x5918d3(0x1e8)]['height'];let _0x340a1a=_0x5e8489[_0x5918d3(0xa9e)]-_0x39abd3-_0x5115f3;return _0x340a1a+=_0x451cb3?_0x2533ad['ACTOR_OFFSET_Y']:_0x44e2f7['ENEMY_OFFSET_Y'],new _0xa866b4(_0x4a52a9,_0x340a1a,_0x63074b,_0x5115f3);}else this[_0x5918d3(0x93a)](_0x5918d3(0x36c));}}}this[_0x5918d3(0x7b2)](_0x44f964[_0x5918d3(0xa98)]);}},Game_Battler[_0x397c95(0x6cf)]['setActiveWeaponSlot']=function(_0x27f853){this['_activeWeaponSlot']=_0x27f853||0x0,this['_cache']={};},Game_Battler[_0x397c95(0x6cf)]['nextActiveWeaponSlot']=function(){const _0x178836=_0x397c95;this['_activeWeaponSlot']=this[_0x178836(0x899)]||0x0,this[_0x178836(0x899)]++,this['_cache']={};},Game_Battler[_0x397c95(0x6cf)][_0x397c95(0x62d)]=function(){const _0xe5dddb=_0x397c95;this[_0xe5dddb(0x899)]=undefined,this[_0xe5dddb(0xcfe)]={};},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x813)]=Game_Actor[_0x397c95(0x6cf)][_0x397c95(0xc36)],Game_Actor[_0x397c95(0x6cf)]['equips']=function(){const _0x6b011b=_0x397c95;let _0x520876=VisuMZ['BattleCore'][_0x6b011b(0x813)][_0x6b011b(0x6a3)](this);if(this[_0x6b011b(0xbf6)])return _0x520876;if(this['_activeWeaponSlot']!==undefined){this['_tempEquipCheck']=!![];const _0x96703c=this[_0x6b011b(0x848)]();for(let _0x3a7afb=0x0;_0x3a7afb<_0x96703c['length'];_0x3a7afb++){if(_0x6b011b(0x2f2)!=='HTTrZ'){if(!_0x57ad53[_0x6b011b(0x650)]())return null;if(!_0x1bd8db[_0x6b011b(0x6fe)]['_spriteset'])return null;return _0x4f3ec8[_0x6b011b(0x6fe)][_0x6b011b(0x69b)][_0x6b011b(0x5d2)](this);}else _0x96703c[_0x3a7afb]===0x1&&this[_0x6b011b(0x899)]!==_0x3a7afb&&(_0x6b011b(0x1cb)!==_0x6b011b(0x1cb)?this[_0x6b011b(0x93a)](_0x6b011b(0x398)):_0x520876[_0x3a7afb]=null);}this[_0x6b011b(0xbf6)]=undefined;}return _0x520876;},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x396)]=function(_0x56431a){const _0x50f2e6=_0x397c95;return _0x56431a[_0x50f2e6(0x850)]()?_0x56431a[_0x50f2e6(0x51d)]()[_0x50f2e6(0x187)]||0x1:0x1;},Window_BattleLog[_0x397c95(0x6cf)]['setActiveWeaponSet']=function(_0x4890b8,_0x13aea2){const _0x45f549=_0x397c95;if(_0x4890b8&&_0x4890b8[_0x45f549(0x850)]()){if(_0x45f549(0x575)!==_0x45f549(0x575)){const _0x492b48=this['_flinched'];this[_0x45f549(0xb5c)]=![];if(_0x46d8ec[_0x45f549(0x3b5)]()&&this[_0x45f549(0xadb)]()){const _0x35400c=this[_0x45f549(0x7eb)]();if(_0x35400c&&_0x492b48)_0x35400c[_0x45f549(0x620)]();return;}const _0x2b735d=this[_0x45f549(0x7eb)]();if(_0x2b735d)_0x2b735d[_0x45f549(0x65e)]();this[_0x45f549(0x8d2)](![]),this[_0x45f549(0xc5a)]();}else _0x4890b8[_0x45f549(0x61c)](_0x13aea2);}this['callNextMethod']();},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x1c5)]=function(_0x3ffa1c){const _0x227dca=_0x397c95;_0x3ffa1c&&_0x3ffa1c['isActor']()&&_0x3ffa1c[_0x227dca(0x62d)](),this['callNextMethod']();},Game_Actor[_0x397c95(0x6cf)]['battleUIOffsetX']=function(){const _0x573406=_0x397c95;let _0x3843a6='battleUIOffsetX';if(this[_0x573406(0x2d0)](_0x3843a6))return this[_0x573406(0xcfe)][_0x3843a6];return this[_0x573406(0xcfe)][_0x3843a6]=this[_0x573406(0xbe4)](this[_0x573406(0x793)]()),this[_0x573406(0xcfe)][_0x3843a6];},Game_Actor[_0x397c95(0x6cf)]['battleUIOffsetY']=function(){const _0xf7924d=_0x397c95;let _0x374ed4=_0xf7924d(0xc4d);if(this[_0xf7924d(0x2d0)](_0x374ed4))return this[_0xf7924d(0xcfe)][_0x374ed4];return this[_0xf7924d(0xcfe)][_0x374ed4]=this['createBattleUIOffsetY'](this[_0xf7924d(0x793)]()),this[_0xf7924d(0xcfe)][_0x374ed4];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x87a)]=Game_Enemy[_0x397c95(0x6cf)]['setup'],Game_Enemy[_0x397c95(0x6cf)]['setup']=function(_0x3cf566,_0x3fc09d,_0x3765ff){const _0x3fdb8b=_0x397c95;_0x3cf566=DataManager[_0x3fdb8b(0x76a)](_0x3cf566),VisuMZ['BattleCore'][_0x3fdb8b(0x87a)][_0x3fdb8b(0x6a3)](this,_0x3cf566,_0x3fc09d,_0x3765ff),Imported[_0x3fdb8b(0x846)]&&this['initElementStatusCore'](),this['clearBattleCoreData'](),this['setupBattleCoreData'](),Imported[_0x3fdb8b(0x846)]&&this[_0x3fdb8b(0xc32)]();},Game_Enemy[_0x397c95(0x6cf)]['clearBattleCoreData']=function(){const _0x5367c4=_0x397c95,_0x20b843=VisuMZ[_0x5367c4(0x1f3)][_0x5367c4(0x716)][_0x5367c4(0x7de)];this[_0x5367c4(0xa6d)]=_0x20b843[_0x5367c4(0x42e)],this[_0x5367c4(0x653)]={};},Game_Enemy['prototype'][_0x397c95(0xb3a)]=function(){const _0x1374e4=_0x397c95,_0x11150a=VisuMZ[_0x1374e4(0x1f3)][_0x1374e4(0x716)][_0x1374e4(0x7de)],_0xe04a1b=this[_0x1374e4(0x9ec)]()[_0x1374e4(0x6cc)];this['_svBattlerData']={'name':'','wtypeId':_0x11150a[_0x1374e4(0xbc9)],'collapse':_0x11150a[_0x1374e4(0xbbc)],'motionIdle':_0x11150a[_0x1374e4(0xb87)],'width':_0x11150a[_0x1374e4(0x7fc)]||0x40,'height':_0x11150a['Height']||0x40,'anchorX':_0x11150a[_0x1374e4(0x8ce)]||0x0,'anchorY':_0x11150a[_0x1374e4(0x15a)]||0x0,'shadow':_0x11150a[_0x1374e4(0x457)]};_0xe04a1b[_0x1374e4(0xb38)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x743e0c=this[_0x1374e4(0x653)];if(_0xe04a1b['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x743e0c[_0x1374e4(0xa29)]=String(RegExp['$1']);else{if(_0xe04a1b[_0x1374e4(0xb38)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x1374e4(0x306)==='enAHm'){_0x57a9a7[_0x1374e4(0xb38)](_0x1cb06c);const _0x355998=_0x11b81b(_0x3ab454['$1'])[_0x1374e4(0x9af)](',')[_0x1374e4(0xb9a)](_0x247447=>_0x58224a(_0x247447)[_0x1374e4(0x27f)]()[_0x1374e4(0xb34)]());_0x5877e7=_0x4392c9[_0x1374e4(0x900)](_0x355998);}else{const _0x44edb2=String(RegExp['$1'])[_0x1374e4(0x9af)](/[\r\n]+/)[_0x1374e4(0x723)]('');_0x743e0c[_0x1374e4(0xa29)]=DataManager[_0x1374e4(0x831)](_0x44edb2);}}}_0xe04a1b[_0x1374e4(0xb38)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x743e0c['anchorX']=eval(RegExp['$1']),_0x743e0c[_0x1374e4(0x1d0)]=eval(RegExp['$2']));if(_0xe04a1b['match'](/<SIDEVIEW COLLAPSE>/i))_0x1374e4(0x64e)!==_0x1374e4(0x64e)?(_0x40705a[_0x1374e4(0x1f3)][_0x1374e4(0x978)][_0x1374e4(0x6a3)](this,_0x4ceb2f,_0x51686a),this[_0x1374e4(0x7aa)]()):_0x743e0c[_0x1374e4(0x429)]=!![];else _0xe04a1b[_0x1374e4(0xb38)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x743e0c['collapse']=![]);if(_0xe04a1b['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x743e0c[_0x1374e4(0xc11)]=!![];else _0xe04a1b['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x743e0c[_0x1374e4(0xc11)]=![]);if(_0xe04a1b['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x743e0c[_0x1374e4(0xa5c)]=String(RegExp['$1'])['toLowerCase']()[_0x1374e4(0xb34)]();else{if(_0xe04a1b[_0x1374e4(0xb38)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if('KmgMI'===_0x1374e4(0xc62)){_0x5b7542['_currentActor'][_0x1374e4(0xd07)](_0x1374e4(0x5a8));const _0x3570ae=_0x4f7cfe[_0x1374e4(0xc1a)][_0x1374e4(0x7eb)]();if(_0x3570ae)_0x3570ae[_0x1374e4(0x65e)]();}else{const _0x3fb58f=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x1374e4(0x723)]('');_0x743e0c[_0x1374e4(0xa5c)]=DataManager['processRandomizedData'](_0x3fb58f);}}}_0xe04a1b[_0x1374e4(0xb38)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x743e0c['width']=Number(RegExp['$1']),_0x743e0c[_0x1374e4(0x9b1)]=Number(RegExp['$2']));if(_0xe04a1b[_0x1374e4(0xb38)](/<SIDEVIEW WEAPON: (.*)>/i)){if('BybFd'!=='wUdDl')_0x743e0c[_0x1374e4(0x222)]=DataManager[_0x1374e4(0x9cb)](RegExp['$1']);else{const _0x42c761=_0x5f23c4[_0x1374e4(0x6fe)][_0x1374e4(0xba1)];this[_0x1374e4(0x9ec)]()[_0x1374e4(0x850)]()?_0x42c761[_0x1374e4(0xb89)](this[_0x1374e4(0x9ec)]()['index']()):_0x42c761[_0x1374e4(0xb3d)]();}}else{if(_0xe04a1b['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0xb12c36=String(RegExp['$1'])[_0x1374e4(0x9af)](/[\r\n]+/)[_0x1374e4(0x723)](''),_0x2623e1=DataManager['processRandomizedData'](_0xb12c36);_0x743e0c[_0x1374e4(0x222)]=DataManager[_0x1374e4(0x9cb)](_0x2623e1);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x34b647=this[_0x1374e4(0x92e)]();for(const _0x3950c9 of _0x34b647){if(_0x1374e4(0x14b)===_0x1374e4(0x757))this['_colorType']=_0x81a23c[_0x1374e4(0xc06)]>=0x0?0x0:0x1,this['createDigits'](_0x5570a6[_0x1374e4(0xc06)]);else{const _0x3ab852=this[_0x1374e4(0xd08)](_0x3950c9)[_0x1374e4(0xc0e)][_0x1374e4(0x27f)]()[_0x1374e4(0xb34)](),_0x53fe7c=_0x3950c9[_0x1374e4(0x27f)]()['trim']();if(_0xe04a1b[_0x1374e4(0xb38)](VisuMZ[_0x1374e4(0xa49)][_0x1374e4(0xaa8)]['SvBattlerSolo-%1-%2'['format'](_0x53fe7c,_0x3ab852)]))_0x1374e4(0x37a)!==_0x1374e4(0xb86)?_0x743e0c[_0x1374e4(0xa29)]=String(RegExp['$1']):this['recoverAll']();else{if(_0xe04a1b['match'](VisuMZ['ElementStatusCore'][_0x1374e4(0xaa8)][_0x1374e4(0x3fe)['format'](_0x53fe7c,_0x3ab852)])){if(_0x1374e4(0x527)!==_0x1374e4(0x527))this['_battlePortrait']='',this['actor']()&&this['actor']()[_0x1374e4(0x6cc)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x1374e4(0xa4d)]=_0x42f381(_0x47593f['$1']));else{const _0x285087=String(RegExp['$1'])[_0x1374e4(0x9af)](/[\r\n]+/)[_0x1374e4(0x723)]('');_0x743e0c['name']=DataManager[_0x1374e4(0x831)](_0x285087);}}}if(_0xe04a1b[_0x1374e4(0xb38)](VisuMZ[_0x1374e4(0xa49)][_0x1374e4(0xaa8)][_0x1374e4(0xb6f)['format'](_0x53fe7c,_0x3ab852)]))_0x1374e4(0x381)!==_0x1374e4(0x381)?this[_0x1374e4(0x5ab)](this[_0x1374e4(0x6f5)]):_0x743e0c['wtypeId']=DataManager[_0x1374e4(0x9cb)](RegExp['$1']);else{if(_0xe04a1b[_0x1374e4(0xb38)](VisuMZ[_0x1374e4(0xa49)]['RegExp']['SvWeaponMass-%1-%2'[_0x1374e4(0xadd)](_0x53fe7c,_0x3ab852)])){const _0x1243fb=String(RegExp['$1'])[_0x1374e4(0x9af)](/[\r\n]+/)[_0x1374e4(0x723)](''),_0xe032e5=DataManager[_0x1374e4(0x831)](_0x1243fb);_0x743e0c[_0x1374e4(0x222)]=DataManager[_0x1374e4(0x9cb)](_0xe032e5);}}if(_0xe04a1b[_0x1374e4(0xb38)](VisuMZ[_0x1374e4(0xa49)][_0x1374e4(0xaa8)]['SvMotionIdleSolo-%1-%2'['format'](_0x53fe7c,_0x3ab852)])){if('uTfjl'===_0x1374e4(0x463))return _0x5a8002(_0x45ecf4['$1'])/0x64;else _0x743e0c[_0x1374e4(0xa5c)]=String(RegExp['$1'])['toLowerCase']()[_0x1374e4(0xb34)]();}else{if(_0xe04a1b['match'](VisuMZ[_0x1374e4(0xa49)][_0x1374e4(0xaa8)][_0x1374e4(0x962)[_0x1374e4(0xadd)](_0x53fe7c,_0x3ab852)])){const _0x40ea4c=String(RegExp['$1'])[_0x1374e4(0x9af)](/[\r\n]+/)[_0x1374e4(0x723)]('');_0x743e0c[_0x1374e4(0xa5c)]=DataManager[_0x1374e4(0x831)](_0x40ea4c);}}}}}},Game_Enemy['prototype'][_0x397c95(0x336)]=function(){const _0x1827de=_0x397c95;return this[_0x1827de(0xa6d)]||0x0;},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x401)]=function(){const _0xc3982a=_0x397c95;return this[_0xc3982a(0x336)]();},Game_Enemy[_0x397c95(0x6cf)]['attackAnimationIdSlot']=function(_0x4ab4a0){const _0x20bced=_0x397c95;return this[_0x20bced(0x336)]();},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0xc4a)]=function(){const _0x1bd373=_0x397c95;if(this[_0x1bd373(0x9ec)]()['note'][_0x1bd373(0xb38)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x1bd373(0x6cf)]['canBattlerMove']['call'](this);},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0xac5)]=function(){const _0x2507d2=_0x397c95;if(this[_0x2507d2(0x9ec)]()[_0x2507d2(0x6cc)][_0x2507d2(0xb38)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x291)]=function(){const _0x120daa=_0x397c95,_0x35f7b8=[];for(const _0x4a38b9 of this['enemy']()[_0x120daa(0x5b9)]){if(_0x120daa(0xc6d)!==_0x120daa(0xc7e)){const _0x33aebf=$dataSkills[_0x4a38b9[_0x120daa(0x20a)]];if(_0x33aebf&&!_0x35f7b8[_0x120daa(0x932)](_0x33aebf))_0x35f7b8['push'](_0x33aebf);}else this[_0x120daa(0xb27)]['visible']=![];}return _0x35f7b8;},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0xd01)]=function(){const _0x33b6a2=_0x397c95;let _0x283f01=_0x33b6a2(0xd01);if(this[_0x33b6a2(0x2d0)](_0x283f01))return this['_cache'][_0x283f01];return this[_0x33b6a2(0xcfe)][_0x283f01]=this['createBattleUIOffsetX'](this[_0x33b6a2(0x9ec)]()),this[_0x33b6a2(0xcfe)][_0x283f01];},Game_Enemy['prototype'][_0x397c95(0xc4d)]=function(){const _0x31a918=_0x397c95;let _0xf8f99a=_0x31a918(0xc4d);if(this[_0x31a918(0x2d0)](_0xf8f99a))return this[_0x31a918(0xcfe)][_0xf8f99a];return this[_0x31a918(0xcfe)][_0xf8f99a]=this[_0x31a918(0x182)](this['enemy']()),this[_0x31a918(0xcfe)][_0xf8f99a];},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x3cf)]=function(){const _0x13ff6e=_0x397c95;if(this['_svBattlerData']!==undefined)return this[_0x13ff6e(0x653)];return this[_0x13ff6e(0xb3a)](),this[_0x13ff6e(0x653)];},Game_Enemy['prototype']['hasSvBattler']=function(){const _0x597008=_0x397c95;return this[_0x597008(0x3cf)]()[_0x597008(0xa29)]!=='';},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x9d9)]=function(){const _0x1f0d19=_0x397c95;return this['svBattlerData']()[_0x1f0d19(0xa29)];},Game_Enemy['prototype']['battlerSmoothImage']=function(){const _0x3171a2=_0x397c95;if(this[_0x3171a2(0x4a3)]())return VisuMZ[_0x3171a2(0x1f3)]['Settings'][_0x3171a2(0xc24)]['SmoothImage'];else{if(_0x3171a2(0xc9a)==='BPADE')this[_0x3171a2(0x263)]=new _0x3dc5a0(),this[_0x3171a2(0x263)][_0x3171a2(0x140)]['x']=0.5,this['_mainSprite'][_0x3171a2(0x140)]['y']=0x1,this['addChild'](this[_0x3171a2(0x263)]),this[_0x3171a2(0x380)]();else return VisuMZ['BattleCore'][_0x3171a2(0x716)]['Enemy']['SmoothImage'];}},Game_Enemy[_0x397c95(0x6cf)]['performAction']=function(_0x1524e9){const _0x5d59c8=_0x397c95;Game_Battler[_0x5d59c8(0x6cf)][_0x5d59c8(0xbee)][_0x5d59c8(0x6a3)](this,_0x1524e9);if(this[_0x5d59c8(0x4a3)]())this[_0x5d59c8(0xc79)](_0x1524e9);},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x444)]=function(){const _0xa72f6f=_0x397c95,_0x17e29a=this[_0xa72f6f(0x3cf)]()['wtypeId']||0x0,_0x5d0019=$dataSystem[_0xa72f6f(0x77a)][_0x17e29a];if(_0x5d0019){if(_0xa72f6f(0xb51)===_0xa72f6f(0xb51)){if(_0x5d0019[_0xa72f6f(0xbaa)]===0x0){if(_0xa72f6f(0xb7b)!==_0xa72f6f(0x59c))this['requestMotion']('thrust');else{if(!this[_0xa72f6f(0xb78)]())return;if(!this[_0xa72f6f(0x763)])return;if(this[_0xa72f6f(0x15e)]===_0x4ae3a9)return;this[_0xa72f6f(0x15e)]=_0x217dab,this['_angleDuration']=_0x52dfa4,this[_0xa72f6f(0x606)]=_0x3b1b15,this[_0xa72f6f(0x6ac)]=_0x5a20ce||_0xa72f6f(0xa76),this[_0xa72f6f(0x502)]=_0x32eb3b,this[_0xa72f6f(0x502)]===_0x273b38&&(this[_0xa72f6f(0x502)]=!![]),_0x54eb4e<=0x0&&(this['_currentAngle']=_0x571653,this[_0xa72f6f(0x502)]&&(this[_0xa72f6f(0x15e)]=0x0,this['_currentAngle']=0x0));}}else{if(_0x5d0019[_0xa72f6f(0xbaa)]===0x1){if(_0xa72f6f(0xce6)!==_0xa72f6f(0x316))this[_0xa72f6f(0x93a)]('swing');else return this[_0xa72f6f(0x6ef)]();}else{if(_0x5d0019[_0xa72f6f(0xbaa)]===0x2){if(_0xa72f6f(0x272)!=='ouBmS'){_0x436679&&_0x35c1b9&&_0x1d6ec3[_0xa72f6f(0x6cc)]&&this[_0xa72f6f(0x891)](_0x4a8d44[_0xa72f6f(0x6cc)]);const _0x49286d=_0x500203[_0x53f512];if(_0x49286d){let _0x218213=_0x22f123['createTroopNote'](_0x49286d['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x218213);}}else this[_0xa72f6f(0x93a)](_0xa72f6f(0x36c));}}}}else return!_0x17fab3[_0xa72f6f(0x695)]()?this[_0xa72f6f(0x1b7)](_0x3f42f7):_0x25a47d['BattleCore']['Game_Interpreter_command301'][_0xa72f6f(0x6a3)](this,_0x221875);}},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x6c7)]=function(){const _0x4afee9=_0x397c95,_0x1e156f=this[_0x4afee9(0x3cf)]()[_0x4afee9(0x222)]||0x0,_0x51cb5e=$dataSystem[_0x4afee9(0x77a)][_0x1e156f];_0x51cb5e&&this[_0x4afee9(0x7b2)](_0x51cb5e['weaponImageId']);},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0xcea)]=function(){const _0x2df91e=_0x397c95,_0x3218b3=this[_0x2df91e(0x3cf)]()[_0x2df91e(0x222)]||0x0;return $dataSystem[_0x2df91e(0x77a)][_0x3218b3];},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x144)]=function(_0x248aa2){const _0x12103a=_0x397c95;return this[_0x12103a(0xcea)]();},Game_Enemy[_0x397c95(0x6cf)]['performDamage']=function(){const _0xa4d9c0=_0x397c95;Game_Battler[_0xa4d9c0(0x6cf)][_0xa4d9c0(0x488)][_0xa4d9c0(0x6a3)](this),this[_0xa4d9c0(0x68d)]()&&this[_0xa4d9c0(0x4a3)]()&&this[_0xa4d9c0(0x93a)](_0xa4d9c0(0x649)),SoundManager[_0xa4d9c0(0x326)]();},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x9fc)]=function(){const _0x147199=_0x397c95;Game_Battler[_0x147199(0x6cf)]['performEvasion'][_0x147199(0x6a3)](this),this[_0x147199(0x93a)]('evade');},Game_Enemy[_0x397c95(0x6cf)]['performMagicEvasion']=function(){const _0x4dac61=_0x397c95;Game_Battler[_0x4dac61(0x6cf)]['performMagicEvasion'][_0x4dac61(0x6a3)](this),this[_0x4dac61(0x93a)](_0x4dac61(0xc98));},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x2be)]=function(){const _0x535897=_0x397c95;Game_Battler[_0x535897(0x6cf)][_0x535897(0x2be)][_0x535897(0x6a3)](this),this[_0x535897(0x444)]();},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x674)]=function(){const _0x164c1c=_0x397c95;if(this[_0x164c1c(0x4a3)]()){if(_0x164c1c(0x41d)!==_0x164c1c(0x41d))return this['partyCommandWindowRect']();else{if(this[_0x164c1c(0x349)]()>=0x1)return!![];return this['svBattlerData']()[_0x164c1c(0x429)];}}else return!![];},Game_Enemy[_0x397c95(0x6cf)]['svBattlerAnchorX']=function(){const _0xda02a7=_0x397c95;return this[_0xda02a7(0x3cf)]()['anchorX'];},Game_Enemy[_0x397c95(0x6cf)]['svBattlerAnchorY']=function(){return this['svBattlerData']()['anchorY'];},Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x7e4)]=function(){const _0x2cc87f=_0x397c95;return this['svBattlerData']()[_0x2cc87f(0xc11)];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x1bb)]=Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x41c)],Game_Enemy[_0x397c95(0x6cf)][_0x397c95(0x41c)]=function(_0x1d32c2){const _0x32ea64=_0x397c95;VisuMZ[_0x32ea64(0x1f3)][_0x32ea64(0x1bb)]['call'](this,_0x1d32c2),this['clearBattleCoreData'](),this['setupBattleCoreData']();const _0x39e9bf=this[_0x32ea64(0x7eb)]();if(_0x39e9bf){if('uQmej'!==_0x32ea64(0x1b8)){this['updateScale'](),this[_0x32ea64(0xb9b)](),this[_0x32ea64(0xa21)](),this['updateFlip'](),_0x251b31['BattleCore'][_0x32ea64(0xcf6)]['call'](this),this['updateHpGaugePosition'](),this[_0x32ea64(0x9e7)]();if(this['constructor']===_0x54c1c6)this[_0x32ea64(0x1eb)]();}else _0x39e9bf[_0x32ea64(0x59d)]=undefined,_0x39e9bf['setBattler'](this);}},Game_Unit[_0x397c95(0x6cf)][_0x397c95(0xb97)]=function(_0x2118bf){const _0x1974c1=_0x397c95;for(const _0x272b7c of this[_0x1974c1(0x2e0)]()){if(_0x272b7c)_0x272b7c['processBattleCoreJS'](_0x2118bf);}},Game_Unit[_0x397c95(0x6cf)][_0x397c95(0x99b)]=function(){const _0x2a107e=_0x397c95,_0x57e5f7=this[_0x2a107e(0x4c3)]();return _0x57e5f7[Math[_0x2a107e(0x541)](_0x57e5f7[_0x2a107e(0x187)])];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x4c7)]=Game_Party[_0x397c95(0x6cf)][_0x397c95(0xb18)],Game_Party['prototype'][_0x397c95(0xb18)]=function(_0x17b81e){const _0x318a6e=_0x397c95;VisuMZ[_0x318a6e(0x1f3)]['Game_Party_addActor'][_0x318a6e(0x6a3)](this,_0x17b81e),BattleManager[_0x318a6e(0x5f7)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x95d)]=Game_Party[_0x397c95(0x6cf)][_0x397c95(0xc08)],Game_Party[_0x397c95(0x6cf)]['removeActor']=function(_0x49aaeb){const _0x31d46a=_0x397c95;VisuMZ['BattleCore'][_0x31d46a(0x95d)][_0x31d46a(0x6a3)](this,_0x49aaeb),BattleManager['refreshStatusWindow']();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x21b)]=Game_Troop[_0x397c95(0x6cf)][_0x397c95(0x74a)],Game_Troop[_0x397c95(0x6cf)]['setup']=function(_0x5b4721){const _0x941ed6=_0x397c95;$gameTemp[_0x941ed6(0x4f3)](),$gameTemp[_0x941ed6(0x19d)](_0x5b4721),VisuMZ[_0x941ed6(0x1f3)][_0x941ed6(0x21b)][_0x941ed6(0x6a3)](this,_0x5b4721),this[_0x941ed6(0x3da)]();},VisuMZ[_0x397c95(0x1f3)]['Game_Troop_expTotal']=Game_Troop['prototype']['expTotal'],Game_Troop['prototype']['expTotal']=function(){const _0x17576f=_0x397c95;let _0x5f437f=VisuMZ['BattleCore']['Game_Troop_expTotal']['call'](this);return this[_0x17576f(0x9cc)]&&(_0x5f437f*=this[_0x17576f(0x9cc)]()),Math[_0x17576f(0xcad)](_0x5f437f);},Game_Troop[_0x397c95(0x6cf)][_0x397c95(0x9cc)]=function(){return 0x1;},Game_Troop[_0x397c95(0x6cf)][_0x397c95(0x3da)]=function(){const _0x223487=_0x397c95,_0x59d4db=DataManager['createTroopNote'](this['troop']()['id']);if(_0x59d4db[_0x223487(0xb38)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){if(_0x223487(0xc48)===_0x223487(0xc48)){const _0xff7740=RegExp['$1'][_0x223487(0x9af)](',')[_0x223487(0xb9a)](_0x576ca6=>Number(_0x576ca6));this[_0x223487(0x8f1)](),this[_0x223487(0x36a)](_0xff7740);}else{if(!this['_battler'][_0x223487(0x68d)]())return;if(_0x4dfe74['shouldHideBattleEndPopups']())return;const _0x3a36fc=_0x3175dc['BattleCore']['Settings'][_0x223487(0x7a6)],_0x21c7c1=new _0xa89b69();_0x21c7c1[_0x223487(0xa6e)]=_0x3a36fc[_0x223487(0x719)],this['sortDamageSprites'](_0x21c7c1),_0x21c7c1[_0x223487(0x643)](_0x2bdc30,_0x380104,_0x2a3086),this[_0x223487(0xaea)](_0x21c7c1);}}},Game_Troop['prototype']['checkExtendTroopCompatibility']=function(){const _0x31c4d5=_0x397c95;let _0x5dd81f=_0x31c4d5(0x9db)+'\x0a';_0x5dd81f+='version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.',Imported['VisuMZ_2_BattleSystemBTB']&&(VisuMZ[_0x31c4d5(0x48a)][_0x31c4d5(0x708)]<1.11&&(alert(_0x5dd81f[_0x31c4d5(0xadd)]('BTB')),SceneManager[_0x31c4d5(0x565)]())),Imported[_0x31c4d5(0x8b1)]&&(_0x31c4d5(0x82d)===_0x31c4d5(0xa83)?this[_0x31c4d5(0x647)]=0x0:VisuMZ[_0x31c4d5(0x4d8)][_0x31c4d5(0x708)]<1.19&&(alert(_0x5dd81f[_0x31c4d5(0xadd)]('CTB')),SceneManager[_0x31c4d5(0x565)]())),Imported[_0x31c4d5(0x7be)]&&(VisuMZ[_0x31c4d5(0x36e)][_0x31c4d5(0x708)]<1.15&&(alert(_0x5dd81f[_0x31c4d5(0xadd)](_0x31c4d5(0xa02))),SceneManager['exit']()));},Game_Troop[_0x397c95(0x6cf)][_0x397c95(0x36a)]=function(_0x335ea8){const _0x5bbaca=_0x397c95;this[_0x5bbaca(0x792)]={};for(const _0x35028b of this['members']()){if(!_0x35028b)continue;_0x35028b[_0x5bbaca(0x984)]('');}for(const _0x42a8be of _0x335ea8){const _0x5a4c8e=$dataTroops[_0x42a8be];if(_0x5a4c8e)this[_0x5bbaca(0x97a)](_0x5a4c8e);}this[_0x5bbaca(0x1a5)]();},Game_Troop[_0x397c95(0x6cf)][_0x397c95(0x97a)]=function(_0x15c730){const _0x1d02b1=_0x397c95;for(const _0x36718a of _0x15c730[_0x1d02b1(0x2e0)]){if($dataEnemies[_0x36718a['enemyId']]){const _0x3b8b72=_0x36718a['enemyId'],_0x392519=_0x36718a['x'],_0x43e5e7=_0x36718a['y'],_0x59ff05=new Game_Enemy(_0x3b8b72,_0x392519,_0x43e5e7);_0x36718a[_0x1d02b1(0x5b6)]&&_0x59ff05['hide'](),this[_0x1d02b1(0x634)][_0x1d02b1(0x4da)](_0x59ff05);}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x89c)]=Game_Map[_0x397c95(0x6cf)][_0x397c95(0x2d6)],Game_Map[_0x397c95(0x6cf)][_0x397c95(0x2d6)]=function(){const _0x580b9f=_0x397c95;VisuMZ[_0x580b9f(0x1f3)][_0x580b9f(0x89c)][_0x580b9f(0x6a3)](this),this[_0x580b9f(0x2e7)]();},Game_Map[_0x397c95(0x6cf)][_0x397c95(0x2e7)]=function(){const _0x337e71=_0x397c95;this['_regionBattleback1']={},this[_0x337e71(0x400)]={};if(!$dataMap)return;const _0x2eb78c=$dataMap[_0x337e71(0x6cc)];if(!_0x2eb78c)return;const _0x385906=_0x2eb78c[_0x337e71(0xb38)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x385906){if(_0x337e71(0x656)===_0x337e71(0x656))for(const _0x64bde1 of _0x385906){if(_0x337e71(0x730)===_0x337e71(0x2f8)){let _0x154b1d=_0x2be5d5(_0x434811['$1']);while(_0x154b1d--){_0x297387[_0x337e71(0x4da)](this['opponentsUnit']()[_0x337e71(0x99b)]());}return this[_0x337e71(0x54f)](_0x4f7012);}else{_0x64bde1[_0x337e71(0xb38)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x4e55b3=Number(RegExp['$1']),_0x525d7b=Number(RegExp['$2']),_0x4257eb=_0x525d7b===0x1?this['_regionBattleback1']:this['_regionBattleback2'],_0x35a56b=String(RegExp['$3']);_0x4257eb[_0x4e55b3]=_0x35a56b;}}else{if(this[_0x337e71(0x4bf)])this[_0x337e71(0x4bf)][_0x337e71(0xc5f)](_0xf63d48,_0x34895e,_0x441677);}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x7ca)]=Game_Map['prototype'][_0x397c95(0x963)],Game_Map[_0x397c95(0x6cf)]['battleback1Name']=function(){const _0x5e8b99=_0x397c95;if(!BattleManager[_0x5e8b99(0x2b1)]()){if(_0x5e8b99(0x9c7)!==_0x5e8b99(0x321)){const _0x2a385a=$gamePlayer[_0x5e8b99(0x666)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x5e8b99(0x5a3)]&&this[_0x5e8b99(0x5a3)][_0x2a385a])return this[_0x5e8b99(0x5a3)][_0x2a385a];}else _0x57e2f0[_0x5e8b99(0x36e)]['version']<1.15&&(_0x1c144c(_0xc1f8d5[_0x5e8b99(0xadd)]('STB')),_0x3ef97b[_0x5e8b99(0x565)]());}return VisuMZ['BattleCore'][_0x5e8b99(0x7ca)][_0x5e8b99(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x822)]=Game_Map[_0x397c95(0x6cf)][_0x397c95(0xce0)],Game_Map['prototype']['battleback2Name']=function(){const _0x3b76c6=_0x397c95;if(!BattleManager[_0x3b76c6(0x2b1)]()){const _0x502650=$gamePlayer[_0x3b76c6(0x666)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3b76c6(0x5a3)]&&this[_0x3b76c6(0x400)][_0x502650])return _0x3b76c6(0x4ac)==='XUNOw'?(this[_0x3b76c6(0x6d5)](_0x313edd[0x0],_0x27b60f[0x1],_0x2828bd=>{const _0x2d4d3a=_0x3b76c6;!_0x2828bd[_0x2d4d3a(0x923)]()&&(_0x2828bd[_0x2d4d3a(0xae1)](_0x4857a3[0x2],_0x24d57f[0x3]),_0x1342da['forceAction'](_0x2828bd));}),!![]):this['_regionBattleback2'][_0x502650];}return VisuMZ[_0x3b76c6(0x1f3)]['Game_Map_battleback2Name'][_0x3b76c6(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x1a3)]=Game_Map['prototype'][_0x397c95(0xc90)],Game_Map[_0x397c95(0x6cf)][_0x397c95(0xc90)]=function(){const _0x1eac44=_0x397c95;let _0x405b34=JsonEx[_0x1eac44(0x49d)](VisuMZ[_0x1eac44(0x1f3)][_0x1eac44(0x1a3)]['call'](this));return VisuMZ[_0x1eac44(0x1f3)][_0x1eac44(0xb1b)](_0x405b34);},VisuMZ[_0x397c95(0x1f3)]['ShuffleArray']=function(_0x284a95){const _0x3d3474=_0x397c95;var _0x4b985a,_0x1516ed,_0x45ff97;for(_0x45ff97=_0x284a95['length']-0x1;_0x45ff97>0x0;_0x45ff97--){_0x4b985a=Math[_0x3d3474(0xaee)](Math['random']()*(_0x45ff97+0x1)),_0x1516ed=_0x284a95[_0x45ff97],_0x284a95[_0x45ff97]=_0x284a95[_0x4b985a],_0x284a95[_0x4b985a]=_0x1516ed;}return _0x284a95;},VisuMZ[_0x397c95(0x1f3)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x535)],Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x535)]=function(_0xa31826){const _0x1b06f6=_0x397c95;return $gameTemp[_0x1b06f6(0x94b)](this),VisuMZ['BattleCore']['Game_Interpreter_PluginCommand'][_0x1b06f6(0x6a3)](this,_0xa31826);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x9bd)]=Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x49e)],Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x49e)]=function(){const _0x521c9d=_0x397c95;if(SceneManager[_0x521c9d(0x650)]()){if(_0x521c9d(0x9f9)===_0x521c9d(0x9f9))switch(this[_0x521c9d(0x13c)]){case _0x521c9d(0xb84):if(Imported[_0x521c9d(0x35e)]){if($gameScreen[_0x521c9d(0x74c)]()[_0x521c9d(0x737)]>0x0)return!![];this[_0x521c9d(0x13c)]='';}break;case'battleAnimation':if(BattleManager[_0x521c9d(0x69b)]['isAnimationPlaying']())return!![];this['_waitMode']='';break;case _0x521c9d(0x907):if(Imported[_0x521c9d(0x35e)]){if($gameScreen[_0x521c9d(0x74c)]()['cameraDuration']>0x0)return!![];if($gameScreen[_0x521c9d(0x74c)]()[_0x521c9d(0x422)]>0x0)return!![];this[_0x521c9d(0x13c)]='';}break;case _0x521c9d(0x7fb):if(BattleManager[_0x521c9d(0x69b)][_0x521c9d(0x343)]())return!![];this[_0x521c9d(0x13c)]='';break;case _0x521c9d(0x7f6):if(BattleManager[_0x521c9d(0x69b)][_0x521c9d(0xa2b)]())return!![];this[_0x521c9d(0x13c)]='';break;case _0x521c9d(0x990):if(BattleManager[_0x521c9d(0x69b)]['isAnyoneJumping']())return!![];this[_0x521c9d(0x13c)]='';break;case _0x521c9d(0x2a5):if(BattleManager[_0x521c9d(0x598)][_0x521c9d(0xc5e)]())return!![];this[_0x521c9d(0x13c)]='';break;case _0x521c9d(0x29e):if(BattleManager[_0x521c9d(0x69b)]['isAnyoneMoving']())return!![];this['_waitMode']='';break;case _0x521c9d(0x531):if(BattleManager[_0x521c9d(0x69b)]['isAnyoneChangingOpacity']())return!![];this['_waitMode']='';break;case _0x521c9d(0x236):if(BattleManager[_0x521c9d(0x69b)][_0x521c9d(0x2de)]())return!![];this['_waitMode']='';break;case _0x521c9d(0x759):if(BattleManager[_0x521c9d(0x69b)][_0x521c9d(0x232)]())return!![];this[_0x521c9d(0x13c)]='';break;case _0x521c9d(0x733):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager['_spriteset'][_0x521c9d(0x63e)]())return!![];this[_0x521c9d(0x13c)]='';}break;case'battleSkew':if(Imported[_0x521c9d(0x35e)]){if(_0x521c9d(0x69f)!==_0x521c9d(0x69f))_0x3c46c5=_0x2f574d>=_0x2f95cb?_0x23ab7b:_0x4c1779;else{if($gameScreen['battleCameraData']()[_0x521c9d(0x7b9)]>0x0)return!![];this[_0x521c9d(0x13c)]='';}}break;case _0x521c9d(0xd0b):if(BattleManager[_0x521c9d(0x69b)][_0x521c9d(0xd0d)]())return!![];this['_waitMode']='';break;case _0x521c9d(0x82b):if(Imported[_0x521c9d(0x35e)]){if('uhQGl'===_0x521c9d(0xc21)){if(_0x49bd9e[_0x521c9d(0xb38)](/(.*):[ ](\d+)/i)){const _0x3a2f6d=_0x77a089(_0x3cb171['$1'])[_0x521c9d(0xb34)](),_0x397343=_0xd0def5(_0x1f06a8['$2']);_0x36a63a[_0x3a2f6d]=_0x397343,_0x4498bc+=_0x397343;}else{if(_0x47066d[_0x521c9d(0xb38)](/(.*):[ ](\d+\.?\d+)/i)){const _0x1b9c36=_0x994055(_0x24032f['$1'])['trim'](),_0x1be457=_0x5f0199(_0x39bff5['$2']);_0x169d86[_0x1b9c36]=_0x1be457,_0x544581+=_0x1be457;}else _0x45e16a!==''&&(_0x256bb3[_0x2aefc3]=0x1,_0x3eb9ae++);}}else{if($gameScreen['battleCameraData']()[_0x521c9d(0x542)]>0x0)return!![];this[_0x521c9d(0x13c)]='';}}break;case'battleInjectPrep':if(Imported['VisuMZ_3_ActSeqImpact']){if(_0x521c9d(0x4bc)==='HZsTY'){if(BattleManager[_0x521c9d(0x69b)][_0x521c9d(0x75f)]){if(_0x521c9d(0x847)!==_0x521c9d(0x847))_0xe0cafa[_0x521c9d(0x919)]()?_0x1c7344[_0x521c9d(0x6cf)][_0x521c9d(0x8d7)][_0x521c9d(0x6a3)](this):_0x12a899[_0x521c9d(0x1f3)]['Scene_Battle_terminate'][_0x521c9d(0x6a3)](this),this[_0x521c9d(0x2c0)]();else{if(BattleManager[_0x521c9d(0x69b)]['isAnyoneInjectAniPrepping']())return!![];this[_0x521c9d(0x13c)]=_0x521c9d(0xc53);}}else this['_waitMode']='';break;}else{const _0x2dda1d=_0x43643c[_0x521c9d(0x2e0)]()[_0x541cae],_0x5a3b5a=_0x4d8f1f[_0x521c9d(0x634)][_0x521c9d(0xb70)](_0x2dda1d);_0x5a3b5a>=0x0&&(_0x2f4250[_0x521c9d(0xb89)](_0x5a3b5a),_0x58f7ac[_0x521c9d(0x173)]());}}break;case _0x521c9d(0xc53):if(Imported[_0x521c9d(0xd0e)]){if(BattleManager[_0x521c9d(0x69b)][_0x521c9d(0x7a5)]())return!![];this['_waitMode']='';}break;}else{const _0x125b98=this[_0x521c9d(0x398)]()[_0x521c9d(0x220)];if(_0x125b98[_0x521c9d(0xb38)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}}return VisuMZ['BattleCore'][_0x521c9d(0x9bd)][_0x521c9d(0x6a3)](this);},VisuMZ['BattleCore']['Game_Interpreter_command301']=Game_Interpreter['prototype'][_0x397c95(0x6ca)],Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x6ca)]=function(_0x121c7a){const _0x4bd7cf=_0x397c95;if(!$gameParty[_0x4bd7cf(0x695)]()){if('EmJxI'!==_0x4bd7cf(0x38c))return this[_0x4bd7cf(0x1b7)](_0x121c7a);else{if(!this['_damageContainer'])return;if(!this[_0x4bd7cf(0x625)])return;const _0x2b3bdc=_0x71a9d3[_0x4bd7cf(0x805)]?this[_0x4bd7cf(0x928)]['x']:0x0,_0xe34f37=_0x1059fb[_0x4bd7cf(0x805)]?this[_0x4bd7cf(0x928)]['y']:0x0,_0x94d4f4=_0xfe0e1a[_0x4bd7cf(0x35e)]?this[_0x4bd7cf(0x713)]['x']:0x0,_0x1ab2d1=_0x5cbf53[_0x4bd7cf(0x35e)]?this[_0x4bd7cf(0x713)]['y']:0x0;this['_uiContainer']['x']=_0x2b3bdc+_0x94d4f4,this['_uiContainer']['y']=_0xe34f37+_0x1ab2d1;}}else return VisuMZ[_0x4bd7cf(0x1f3)]['Game_Interpreter_command301'][_0x4bd7cf(0x6a3)](this,_0x121c7a);},Game_Interpreter[_0x397c95(0x6cf)]['command3011']=function(_0x5a4747){const _0x57f95a=_0x397c95;return VisuMZ[_0x57f95a(0x1f3)][_0x57f95a(0x460)][_0x57f95a(0x6a3)](this,_0x5a4747),BattleManager[_0x57f95a(0x6d0)](_0xf71b51=>{const _0x11de21=_0x57f95a;this[_0x11de21(0x68a)][this[_0x11de21(0xa12)]]=_0xf71b51;}),!![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xcee)]=function(_0x2b36c8){const _0x614aba=_0x397c95,_0x3e02d3=$dataCommonEvents[_0x2b36c8];if(!_0x3e02d3)return![];if(_0x3e02d3['list'][_0x614aba(0x187)]<=0x1)return![];return!![];},Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x1b7)]=function(_0x5a3ea0){const _0x40df80=_0x397c95,_0xf89029=VisuMZ[_0x40df80(0x1f3)][_0x40df80(0x716)]['Mechanics'],_0x605e7c=_0xf89029[_0x40df80(0xcb1)],_0x22af37=$dataCommonEvents[_0x605e7c];if(_0x22af37&&VisuMZ['BattleCore'][_0x40df80(0xcee)](_0x605e7c)){if(_0x40df80(0x4e5)===_0x40df80(0x292)){this['push'](_0x40df80(0x2be),_0x150d63);_0x20586e['BattleCore'][_0x40df80(0x716)][_0x40df80(0x44c)][_0x40df80(0xbcb)]&&this[_0x40df80(0x4da)](_0x40df80(0xc7d),_0x1d7484,[_0x3f3dab['_subject']],-0x1);if(!_0x37f9e3[_0x40df80(0x1f3)]['Settings'][_0x40df80(0xa1f)][_0x40df80(0x90c)])return;this[_0x40df80(0x4da)]('addText',_0x1c3fd1['counterAttack']['format'](_0x4756ea[_0x40df80(0xa29)]()));}else{const _0xa12cb7=this[_0x40df80(0x617)]()?this[_0x40df80(0x338)]:0x0,_0x4e2e07=_0x22af37[_0x40df80(0x7e1)];this['setupChild'](_0x4e2e07,_0xa12cb7),this['_list']=JsonEx['makeDeepCopy'](this[_0x40df80(0x77d)]);const _0x346ae6={'code':0xbc3,'indent':this[_0x40df80(0xa12)],'parameters':JsonEx[_0x40df80(0x49d)](_0x5a3ea0)};return this['_list'][_0x40df80(0xab3)](this['_index']+0x1,0x0,_0x346ae6),!![];}}else{if(_0x40df80(0x2eb)===_0x40df80(0x2eb))return VisuMZ[_0x40df80(0x1f3)][_0x40df80(0x460)]['call'](this,_0x5a3ea0);else _0x5e38db[_0x40df80(0x1f3)][_0x40df80(0xb3b)][_0x40df80(0x6a3)](this,_0x4c5e63);}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x825)]=BattleManager[_0x397c95(0x9c4)],BattleManager['onEncounter']=function(){const _0x472b18=_0x397c95;VisuMZ[_0x472b18(0x1f3)][_0x472b18(0x825)][_0x472b18(0x6a3)](this),this[_0x472b18(0x753)]();},BattleManager[_0x397c95(0x753)]=function(){const _0x566285=_0x397c95,_0x2d4f0f=VisuMZ[_0x566285(0x1f3)]['Settings'][_0x566285(0x305)],_0x52054f=_0x2d4f0f[_0x566285(0xcb1)];if(_0x52054f&&VisuMZ[_0x566285(0x1f3)][_0x566285(0xcee)](_0x52054f)){if(_0x566285(0x96e)!==_0x566285(0x96e))return this['statusTextAutoBattleStyle']();else this[_0x566285(0xb49)]=!![],$gameTemp[_0x566285(0x280)](_0x2d4f0f[_0x566285(0xcb1)]),$gameMap['updateInterpreter'](),$gameMap[_0x566285(0x74d)][_0x566285(0x961)]=!![];}_0x2d4f0f[_0x566285(0x2ae)]>0x0&&(this[_0x566285(0x786)]=!![]);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xbdd)]=Scene_Map[_0x397c95(0x6cf)][_0x397c95(0x8e9)],Scene_Map['prototype'][_0x397c95(0x8e9)]=function(){const _0x256480=_0x397c95;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ['BattleCore'][_0x256480(0xbdd)]['call'](this);},VisuMZ[_0x397c95(0x1f3)]['Scene_Map_launchBattle']=Scene_Map['prototype']['launchBattle'],Scene_Map['prototype'][_0x397c95(0x62a)]=function(){const _0x487d3d=_0x397c95;BattleManager['_battleCoreBattleStartEvent']?'RYaSk'!=='RYaSk'?_0x1c1330=_0x1b8b3b:this[_0x487d3d(0x4b1)]():'MdbMg'===_0x487d3d(0x1f8)?_0xb68ee6[_0x487d3d(0x4da)](_0x487d3d(0x1c5),_0x1c9840):VisuMZ['BattleCore']['Scene_Map_launchBattle'][_0x487d3d(0x6a3)](this);},Scene_Map[_0x397c95(0x6cf)][_0x397c95(0x4b1)]=function(){const _0x16d2b0=_0x397c95;this[_0x16d2b0(0x78b)]=!![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x720)]=SceneManager['isSceneChanging'],SceneManager[_0x397c95(0xa4c)]=function(){const _0x472cb2=_0x397c95;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x472cb2(0x1f3)][_0x472cb2(0x720)]['call'](this);},VisuMZ['BattleCore'][_0x397c95(0xce7)]=Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x8d7)],Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x8d7)]=function(){const _0x5927c4=_0x397c95;VisuMZ[_0x5927c4(0x1f3)][_0x5927c4(0xce7)][_0x5927c4(0x6a3)](this),this[_0x5927c4(0x961)]&&(this['_preBattleCommonEvent']=undefined,SceneManager['_scene'][_0x5927c4(0x5a0)]());},Scene_Map[_0x397c95(0x6cf)]['battleCoreResumeLaunchBattle']=function(){const _0x3ab98c=_0x397c95;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x3ab98c(0x192)]=!![],this[_0x3ab98c(0x14d)]();},VisuMZ['BattleCore']['Scene_Map_initializeAfter']=Scene_Map[_0x397c95(0x6cf)][_0x397c95(0x918)],Scene_Map[_0x397c95(0x6cf)]['initialize']=function(){const _0x2e1da5=_0x397c95;VisuMZ['BattleCore'][_0x2e1da5(0xcd8)][_0x2e1da5(0x6a3)](this),BattleManager[_0x2e1da5(0x192)]&&('YrFxi'!==_0x2e1da5(0xb07)?_0x4ef0de['BattleCore']['ParseItemNotetags'][_0x2e1da5(0x6a3)](this,_0x4ad28b):(this[_0x2e1da5(0x78b)]=!![],BattleManager[_0x2e1da5(0x192)]=undefined));},VisuMZ[_0x397c95(0x1f3)]['Scene_Map_initialize']=Scene_Map[_0x397c95(0x6cf)][_0x397c95(0x918)],Scene_Map[_0x397c95(0x6cf)][_0x397c95(0x918)]=function(){const _0xeef622=_0x397c95;VisuMZ['BattleCore'][_0xeef622(0x26c)][_0xeef622(0x6a3)](this),$gameTemp[_0xeef622(0x4f3)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x68f)]=Scene_ItemBase['prototype']['applyItem'],Scene_ItemBase[_0x397c95(0x6cf)][_0x397c95(0x8dc)]=function(){const _0x13d7f9=_0x397c95;VisuMZ['BattleCore'][_0x13d7f9(0x68f)][_0x13d7f9(0x6a3)](this);if(this['item']()[_0x13d7f9(0x6cc)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x13d7f9(0x6cc)][_0x13d7f9(0xb38)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x13d7f9(0x715)===_0x13d7f9(0x56f)?(this[_0x13d7f9(0x239)]['x']=this[_0x13d7f9(0x6f5)]['x'],this[_0x13d7f9(0x239)]['y']=this[_0x13d7f9(0x6f5)]['y']):$gameTemp[_0x13d7f9(0x44b)]=[]);if(DataManager[_0x13d7f9(0xb4c)](this[_0x13d7f9(0x398)]())){if('JfBDQ'===_0x13d7f9(0x3c2)){const _0x164ea1=this['aliveMembers']();return _0x164ea1[_0x3df490[_0x13d7f9(0x541)](_0x164ea1[_0x13d7f9(0x187)])];}else $gameTemp[_0x13d7f9(0x44b)]=[];}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x849)]=Scene_Options[_0x397c95(0x6cf)][_0x397c95(0x53a)],Scene_Options[_0x397c95(0x6cf)][_0x397c95(0x53a)]=function(){const _0x1e16d1=_0x397c95;let _0x4319f4=VisuMZ['BattleCore'][_0x1e16d1(0x849)][_0x1e16d1(0x6a3)](this);const _0x5c2784=VisuMZ[_0x1e16d1(0x1f3)]['Settings'];if(_0x5c2784['AutoBattle'][_0x1e16d1(0x2a9)]&&_0x5c2784['AutoBattle']['AdjustRect'])_0x4319f4+=0x2;if(_0x5c2784[_0x1e16d1(0xaef)][_0x1e16d1(0x2a9)]&&_0x5c2784[_0x1e16d1(0xaef)][_0x1e16d1(0x6f1)])_0x4319f4+=0x1;return _0x4319f4;},VisuMZ[_0x397c95(0x1f3)]['Scene_Battle_initialize']=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x918)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x918)]=function(){const _0x31236c=_0x397c95;VisuMZ['BattleCore'][_0x31236c(0x96f)][_0x31236c(0x6a3)](this),this[_0x31236c(0x2c0)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x360)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x1cc)],Scene_Battle[_0x397c95(0x6cf)]['start']=function(){const _0x23418b=_0x397c95;if(SceneManager[_0x23418b(0xb64)]()){Scene_Message[_0x23418b(0x6cf)]['start'][_0x23418b(0x6a3)](this);this[_0x23418b(0x69b)]&&this[_0x23418b(0x69b)]['update']();if(BattleManager[_0x23418b(0x8fa)]){if(_0x23418b(0x165)!=='lqshN')BattleManager['revertTpbCachedActor']();else return _0x424a6e[_0x23418b(0x1f3)][_0x23418b(0x716)][_0x23418b(0xa1f)][_0x23418b(0x48e)];}}else VisuMZ[_0x23418b(0x1f3)][_0x23418b(0x360)][_0x23418b(0x6a3)](this),$gameTroop[_0x23418b(0x6b6)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x2e6)]=Scene_Battle['prototype']['stop'],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x14d)]=function(){const _0x3cd946=_0x397c95;SceneManager[_0x3cd946(0x919)]()?Scene_Message[_0x3cd946(0x6cf)][_0x3cd946(0x14d)][_0x3cd946(0x6a3)](this):_0x3cd946(0xb9f)!==_0x3cd946(0xb9f)?_0x560e5d=_0x5ccfac(_0x5aa206['$1']):VisuMZ['BattleCore']['Scene_Battle_stop'][_0x3cd946(0x6a3)](this);},VisuMZ['BattleCore'][_0x397c95(0x79b)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x8d7)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x8d7)]=function(){const _0x5f5468=_0x397c95;SceneManager[_0x5f5468(0x919)]()?Scene_Message[_0x5f5468(0x6cf)][_0x5f5468(0x8d7)][_0x5f5468(0x6a3)](this):VisuMZ['BattleCore']['Scene_Battle_terminate']['call'](this),this[_0x5f5468(0x2c0)]();},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x80a)]=function(){const _0x18b6d8=_0x397c95;if(ConfigManager[_0x18b6d8(0x486)]&&ConfigManager[_0x18b6d8(0x826)]!==undefined)return ConfigManager[_0x18b6d8(0x826)];else{if(this[_0x18b6d8(0x1b2)]()==='border')return![];else{if('idthG'!==_0x18b6d8(0x884))_0x340e03['select'](this['enemy']()['index']());else{return Scene_Message[_0x18b6d8(0x6cf)]['isRightInputMode'][_0x18b6d8(0x6a3)](this);;}}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x909)]=Scene_Battle[_0x397c95(0x6cf)]['createAllWindows'],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x7d8)]=function(){const _0x3b1032=_0x397c95;this[_0x3b1032(0x89e)](),VisuMZ[_0x3b1032(0x1f3)][_0x3b1032(0x909)][_0x3b1032(0x6a3)](this),this[_0x3b1032(0x3ae)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x9fa)]=Scene_Battle[_0x397c95(0x6cf)]['createEnemyWindow'],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xb26)]=function(){const _0x388595=_0x397c95;VisuMZ[_0x388595(0x1f3)][_0x388595(0x9fa)][_0x388595(0x6a3)](this),this['createMultiTargetWindows']();},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x2e8)]=function(){const _0xf5924b=_0x397c95;this[_0xf5924b(0x72f)](!![]),this[_0xf5924b(0x72f)](![]);},Scene_Battle[_0x397c95(0x6cf)]['multiTargetWindowRect']=function(_0x7b09a2){const _0x1c2244=_0x397c95,_0x4fc2e9=Window_BattleMultiTarget[_0x1c2244(0x996)],_0x3f9558=this[_0x1c2244(0x9e5)](0x1,!![]);let _0xb75c1e=_0x7b09a2?Graphics[_0x1c2244(0xb5d)]-_0x4fc2e9:0x0;_0xb75c1e+=_0x7b09a2?Window_BattleMultiTarget[_0x1c2244(0x88f)]:Window_BattleMultiTarget[_0x1c2244(0x906)];const _0xd0df13=[_0x1c2244(0x605)][_0x1c2244(0x932)](this[_0x1c2244(0x1b2)]())?0x0:this['_statusWindow']['height'];let _0x2d74be=Graphics[_0x1c2244(0xa9e)]-_0xd0df13-_0x3f9558;return _0x2d74be+=_0x7b09a2?Window_BattleMultiTarget['ACTOR_OFFSET_Y']:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0xb75c1e,_0x2d74be,_0x4fc2e9,_0x3f9558);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x72f)]=function(_0x43a894){const _0x518ec6=_0x397c95,_0x146534=this[_0x518ec6(0x5f4)](_0x43a894),_0x394661=new Window_BattleMultiTarget(_0x146534,_0x43a894);this['addWindow'](_0x394661);if(_0x43a894)this[_0x518ec6(0x2d2)]=_0x394661;else{if(_0x518ec6(0xc12)!==_0x518ec6(0xc12)){this[_0x518ec6(0x60e)]['clear']();const _0x2c5795=this[_0x518ec6(0x33d)]();!_0x35ec4d(_0x2c5795)&&this[_0x518ec6(0x7c5)]();}else this[_0x518ec6(0x34d)]=_0x394661;}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x461)]=Scene_Battle['prototype'][_0x397c95(0x90b)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x90b)]=function(){const _0x5b6c86=_0x397c95;VisuMZ[_0x5b6c86(0x1f3)]['Scene_Battle_createCancelButton']['call'](this),this[_0x5b6c86(0x1b2)]()===_0x5b6c86(0x8fe)&&this[_0x5b6c86(0x30a)]();},Scene_Battle[_0x397c95(0x6cf)]['setVisibleUI']=function(_0x488670){const _0x57ab1e=_0x397c95;if(_0x488670)_0x57ab1e(0x994)===_0x57ab1e(0x58e)?(this[_0x57ab1e(0x598)][_0x57ab1e(0x4da)](_0x57ab1e(0xbf0)),this[_0x57ab1e(0x598)][_0x57ab1e(0x4da)](_0x57ab1e(0x15f))):(this['_windowLayer']['x']=(Graphics[_0x57ab1e(0x76b)]-Graphics[_0x57ab1e(0xb5d)])/0x2,this[_0x57ab1e(0xacc)]['y']=(Graphics[_0x57ab1e(0x9b1)]-Graphics['boxHeight'])/0x2);else{if(_0x57ab1e(0x8ef)!==_0x57ab1e(0x703))this[_0x57ab1e(0xacc)]['x']=Graphics['width']*0xa,this['_windowLayer']['y']=Graphics[_0x57ab1e(0x9b1)]*0xa;else return _0x330290[_0x57ab1e(0x301)]?_0x58c904['getInputButtonString']('ok'):_0x31e3c5[_0x57ab1e(0x1f3)][_0x57ab1e(0x716)][_0x57ab1e(0x7c8)]['AutoBattleOK'];}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x20b)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x2e3)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x2e3)]=function(){const _0x158ff9=_0x397c95,_0x115ab6=BattleManager[_0x158ff9(0x793)]();VisuMZ[_0x158ff9(0x1f3)][_0x158ff9(0x20b)][_0x158ff9(0x6a3)](this);if(_0x115ab6){if(_0x158ff9(0x8da)===_0x158ff9(0x8da)){if(_0x115ab6===BattleManager[_0x158ff9(0x793)]())return;if(_0x115ab6===BattleManager[_0x158ff9(0x127)])return;if(_0x115ab6[_0x158ff9(0x7eb)]())_0x115ab6[_0x158ff9(0x7eb)]()[_0x158ff9(0x65e)]();}else{if(!_0x1c0f96[_0x158ff9(0x650)]())return;const _0x5b3386=_0x1dac65[_0x158ff9(0xaeb)](),_0x507db3=_0x305d60['_logWindow'];_0x507db3[_0x158ff9(0x988)](),_0x5b3386[_0x158ff9(0x2b3)](_0x158ff9(0x2a5));}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xbb8)]=Scene_Battle[_0x397c95(0x6cf)]['selectPreviousCommand'],Scene_Battle['prototype'][_0x397c95(0x1b3)]=function(){const _0x54c68e=_0x397c95,_0x217308=BattleManager[_0x54c68e(0x793)]();if(_0x217308&&_0x217308[_0x54c68e(0x7eb)])_0x217308[_0x54c68e(0x7eb)]()['stepBack']();VisuMZ[_0x54c68e(0x1f3)][_0x54c68e(0xbb8)]['call'](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x917)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x9bf)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x9bf)]=function(){const _0xdb8a64=_0x397c95;if(VisuMZ['BattleCore'][_0xdb8a64(0x716)][_0xdb8a64(0xa1f)][_0xdb8a64(0xa48)])return VisuMZ[_0xdb8a64(0x1f3)][_0xdb8a64(0x716)][_0xdb8a64(0xa1f)]['BattleLogRectJS']['call'](this);return VisuMZ['BattleCore']['Scene_Battle_logWindowRect'][_0xdb8a64(0x6a3)](this);},VisuMZ['BattleCore']['Scene_Battle_createPartyCommandWindow']=Scene_Battle['prototype'][_0x397c95(0x150)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x150)]=function(){const _0x186aeb=_0x397c95;VisuMZ[_0x186aeb(0x1f3)][_0x186aeb(0x76e)][_0x186aeb(0x6a3)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x694)]=function(){const _0x178424=_0x397c95,_0x392f92=this[_0x178424(0x273)];_0x392f92[_0x178424(0x7d0)](_0x178424(0xbea),this[_0x178424(0x4cd)][_0x178424(0x16e)](this)),_0x392f92[_0x178424(0x7d0)](_0x178424(0x3bf),this[_0x178424(0x596)][_0x178424(0x16e)](this));const _0x4a31ce=this['battleLayoutStyle']();switch(_0x4a31ce){case'xp':case _0x178424(0xab1):return this[_0x178424(0x273)][_0x178424(0xbf1)](0x1);break;}},Scene_Battle['prototype'][_0x397c95(0x4cd)]=function(){const _0x4e9d0f=_0x397c95;BattleManager[_0x4e9d0f(0x8d5)]=!![],$gameParty[_0x4e9d0f(0x9b4)](),this[_0x4e9d0f(0x2e3)](),BattleManager['isTpb']()&&(BattleManager['_inputting']=![]);},Scene_Battle['prototype']['commandOptions']=function(){const _0x317bfb=_0x397c95;if(this[_0x317bfb(0xcf4)]()){if('STdLG'!=='STdLG')return 0x0;else this['_callSceneOptions']=!![],this[_0x317bfb(0x598)][_0x317bfb(0x4da)]('addText',VisuMZ['BattleCore'][_0x317bfb(0x716)][_0x317bfb(0x982)][_0x317bfb(0x73a)]);}else{if(_0x317bfb(0x494)===_0x317bfb(0xbf8)){if(!this[_0x317bfb(0xc4a)]())return;const _0x5eb8f5=_0x540068[_0x317bfb(0x1f3)][_0x317bfb(0x716)][_0x317bfb(0xc24)];if(!(_0x5eb8f5['ShakeFlinch']??![]))return;if(this['_lastHpDamage']<=0x0)return;const _0x20ebf2=this[_0x317bfb(0x7eb)]();if(_0x20ebf2){const _0x46d5be=this[_0x317bfb(0x303)],_0x11c214=(_0x46d5be/this[_0x317bfb(0x387)])[_0x317bfb(0x8ca)](0.8,0x1),_0x3d9ba6=_0x5eb8f5[_0x317bfb(0x3fb)]??0x30,_0xe14fde=_0x11c214*_0x3d9ba6;_0x20ebf2[_0x317bfb(0xb7a)](_0xe14fde,_0x11c214);}}else this['callOptions']();}},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xcf4)]=function(){const _0x7a89ca=_0x397c95;return BattleManager[_0x7a89ca(0x3b5)]();},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x809)]=function(){const _0x7f2756=_0x397c95;this[_0x7f2756(0x9fb)]=![],this[_0x7f2756(0x69b)][_0x7f2756(0x76c)](),this[_0x7f2756(0xacc)]['visible']=![];if(BattleManager['isBattleTest']())_0x7f2756(0x893)!=='pKZfz'?(this[_0x7f2756(0x356)]=!![],this[_0x7f2756(0xb97)]('BattleVictoryJS'),_0x31f068[_0x7f2756(0x1f3)][_0x7f2756(0x7a1)][_0x7f2756(0x6a3)](this),this['processPostBattleCommonEvents'](_0x7f2756(0x2ba))):($dataSystem[_0x7f2756(0x963)]||$dataSystem[_0x7f2756(0xce0)])&&(_0x7f2756(0x18d)!==_0x7f2756(0x18d)?_0x1e0182['BattleCore'][_0x7f2756(0x4d9)][_0x7f2756(0x6a3)](this,_0xf9875f):SceneManager[_0x7f2756(0xc91)]());else($gameMap[_0x7f2756(0x963)]()||$gameMap['battleback2Name']())&&SceneManager[_0x7f2756(0xc91)]();SceneManager['push'](Scene_Options);if(BattleManager[_0x7f2756(0x939)]()){if(_0x7f2756(0x51a)==='bNUom')BattleManager[_0x7f2756(0x8fa)]=BattleManager[_0x7f2756(0x793)]();else{const _0x25eacd=this[_0x7f2756(0x60d)];if(_0x25eacd[_0x449604])return _0x25eacd[_0x49deac];else{const _0x3e9fe8=new _0x26e8d1();return _0x25eacd[_0x848006]=_0x3e9fe8,this[_0x7f2756(0x8a5)](_0x3e9fe8),this['addChildToBack'](this[_0x7f2756(0xb27)]),_0x3e9fe8;}}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x375)]=Scene_Battle['prototype'][_0x397c95(0x385)],Scene_Battle['prototype'][_0x397c95(0x385)]=function(){const _0x201491=_0x397c95;VisuMZ[_0x201491(0x1f3)][_0x201491(0x375)][_0x201491(0x6a3)](this);if(this[_0x201491(0x9fb)]&&!BattleManager[_0x201491(0x127)])this[_0x201491(0x809)]();},VisuMZ['BattleCore'][_0x397c95(0xa41)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x76c)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x76c)]=function(){const _0x49359a=_0x397c95;VisuMZ[_0x49359a(0x1f3)][_0x49359a(0xa41)][_0x49359a(0x6a3)](this),this[_0x49359a(0x999)]();},Scene_Battle[_0x397c95(0x6cf)]['createAutoBattleWindow']=function(){const _0x12ed6d=_0x397c95,_0x472adf=this[_0x12ed6d(0x949)]();this[_0x12ed6d(0xb2c)]=new Window_AutoBattleCancel(_0x472adf),this[_0x12ed6d(0xb2c)][_0x12ed6d(0x16a)](),this[_0x12ed6d(0x5ab)](this[_0x12ed6d(0xb2c)]);},Scene_Battle[_0x397c95(0x6cf)]['autoBattleWindowRect']=function(){const _0x438ba6=_0x397c95;return VisuMZ[_0x438ba6(0x1f3)]['Settings']['AutoBattle'][_0x438ba6(0x471)]['call'](this);},Scene_Battle['prototype'][_0x397c95(0x2c0)]=function(){const _0x36e526=_0x397c95;this[_0x36e526(0x1ad)]=[];},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x999)]=function(){const _0x2273c0=_0x397c95;if(!this[_0x2273c0(0x1ad)])return;for(const _0x5bfd37 of this[_0x2273c0(0x1ad)]){if(_0x2273c0(0xa0f)!==_0x2273c0(0xa0f))this[_0x2273c0(0x634)]=this[_0x2273c0(0x4c4)](),this[_0x2273c0(0x350)](),_0x5f179b[_0x2273c0(0x6cf)]['refresh'][_0x2273c0(0x6a3)](this);else{if(_0x5bfd37){if(_0x2273c0(0xa27)===_0x2273c0(0xa27))_0x5bfd37[_0x2273c0(0x76c)]();else{this['_tempEquipCheck']=!![];const _0x56f4c3=this[_0x2273c0(0x848)]();for(let _0x1880b7=0x0;_0x1880b7<_0x56f4c3[_0x2273c0(0x187)];_0x1880b7++){_0x56f4c3[_0x1880b7]===0x1&&this[_0x2273c0(0x899)]!==_0x1880b7&&(_0x5cd99e[_0x1880b7]=null);}this[_0x2273c0(0xbf6)]=_0x473ce0;}}}}},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x898)]=function(_0x5589bd){const _0x34ae28=_0x397c95,_0x338520=$dataCommonEvents[_0x5589bd];if(!_0x338520)return;const _0x3f4582=new Game_BattleOnceParallelInterpreter();this[_0x34ae28(0xc20)](_0x3f4582),_0x3f4582['setCommonEvent'](_0x5589bd);},Scene_Battle[_0x397c95(0x6cf)]['addOnceParallelInterpreter']=function(_0x544566){const _0x345354=_0x397c95;this[_0x345354(0x1ad)]=this[_0x345354(0x1ad)]||[],this[_0x345354(0x1ad)][_0x345354(0x4da)](_0x544566);},Scene_Battle['prototype']['removeOnceParallelInterpreter']=function(_0x1c96a1){const _0x6868a8=_0x397c95;this[_0x6868a8(0x1ad)]=this['_onceParallelInterpreters']||[],this[_0x6868a8(0x1ad)][_0x6868a8(0x723)](_0x1c96a1);},Game_Troop[_0x397c95(0x6cf)][_0x397c95(0x6b6)]=function(){const _0xc92ea7=_0x397c95;for(const _0x589ec3 of this[_0xc92ea7(0xceb)]()[_0xc92ea7(0xc33)]){if(!this[_0xc92ea7(0x3c1)](_0x589ec3))continue;SceneManager['_scene'][_0xc92ea7(0x8b6)](_0x589ec3);}},Game_Troop[_0x397c95(0x6cf)][_0x397c95(0x3c1)]=function(_0x24d2e8){const _0x4ac676=_0x397c95;if(!_0x24d2e8)return;for(const _0x270b81 of _0x24d2e8[_0x4ac676(0x7e1)]){if([0x6c,0x198][_0x4ac676(0x932)](_0x270b81['code'])){if(_0x4ac676(0xa2c)===_0x4ac676(0x8df))return this[_0x4ac676(0xd04)];else{const _0x145e93=_0x270b81[_0x4ac676(0x554)][0x0];if(_0x145e93[_0x4ac676(0xb38)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x397c95(0x6cf)]['playOnceParallelTroopPage']=function(_0x4bf026){const _0x48efe6=_0x397c95;if(!_0x4bf026)return;const _0x1619cd=new Game_BattleOnceParallelInterpreter();this[_0x48efe6(0xc20)](_0x1619cd),_0x1619cd['setTroopPage'](_0x4bf026);};function Game_BattleOnceParallelInterpreter(){const _0x45fd75=_0x397c95;this[_0x45fd75(0x918)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x397c95(0x285)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x397c95(0x6cf)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x397c95(0x6cf)]['setCommonEvent']=function(_0x15bdf5){const _0x28aa9e=_0x397c95,_0x368f61=$dataCommonEvents[_0x15bdf5];_0x368f61?this[_0x28aa9e(0x74a)](_0x368f61[_0x28aa9e(0x7e1)],0x0):'QHZwz'===_0x28aa9e(0x851)?_0x23a59e[_0x28aa9e(0x919)]()?_0x50f238[_0x28aa9e(0x6cf)][_0x28aa9e(0x14d)][_0x28aa9e(0x6a3)](this):_0x473088['BattleCore'][_0x28aa9e(0x2e6)]['call'](this):this['terminate']();},Game_BattleOnceParallelInterpreter['prototype']['terminate']=function(){const _0xda15b7=_0x397c95;if(!SceneManager[_0xda15b7(0x650)]())return;SceneManager[_0xda15b7(0x6fe)][_0xda15b7(0x8a0)](this),Game_Interpreter[_0xda15b7(0x6cf)][_0xda15b7(0x8d7)][_0xda15b7(0x6a3)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x397c95(0x722)]=function(_0x4b1ea0){const _0xb30e61=_0x397c95;if(_0x4b1ea0)_0xb30e61(0x989)===_0xb30e61(0x989)?this[_0xb30e61(0x74a)](_0x4b1ea0[_0xb30e61(0x7e1)],0x0):this[_0xb30e61(0x95c)](_0x5c6b9f['svBattlerData']()['motionIdle']||_0xb30e61(0x77c));else{if(_0xb30e61(0x942)===_0xb30e61(0x942))this[_0xb30e61(0x8d7)]();else{if(!_0x4b30bd)return![];return _0x483bef[_0xb30e61(0xca2)]===0x0||_0x5b2c79[_0xb30e61(0xca2)]===0x1;}}},Scene_Battle['prototype'][_0x397c95(0x19f)]=function(){const _0x388749=_0x397c95;return VisuMZ[_0x388749(0x1f3)][_0x388749(0x716)][_0x388749(0x982)][_0x388749(0xad7)];},VisuMZ[_0x397c95(0x1f3)]['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x194)],Scene_Battle[_0x397c95(0x6cf)]['startPartyCommandSelection']=function(){const _0x518c85=_0x397c95;this['isPartyCommandWindowDisabled']()?this[_0x518c85(0x1f6)]():VisuMZ[_0x518c85(0x1f3)][_0x518c85(0xbb2)][_0x518c85(0x6a3)](this);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x1f6)]=function(){const _0x3c2971=_0x397c95;if(BattleManager[_0x3c2971(0x267)]())this[_0x3c2971(0x2e3)]();else BattleManager[_0x3c2971(0x939)]()&&('gaSxq'!==_0x3c2971(0xaf5)?VisuMZ[_0x3c2971(0x1f3)][_0x3c2971(0xbb2)][_0x3c2971(0x6a3)](this):_0x51f7d3+=(_0x587cb2['width']-_0xee58d9)/0x2);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xc2f)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xa25)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xa25)]=function(){const _0x31ec5e=_0x397c95;BattleManager[_0x31ec5e(0x939)]()?(this['tpbCommandFight'](),this[_0x31ec5e(0x5c3)]()):VisuMZ[_0x31ec5e(0x1f3)][_0x31ec5e(0xc2f)][_0x31ec5e(0x6a3)](this);},Scene_Battle['prototype']['tpbCommandFight']=function(){const _0x47c70b=_0x397c95;if(!VisuMZ[_0x47c70b(0x1f3)][_0x47c70b(0x3cb)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x47c70b(0xac0)]())return;const _0x388ccd=$gameParty[_0x47c70b(0x4c3)]()['filter'](_0x1ff156=>_0x1ff156[_0x47c70b(0x784)]()&&_0x1ff156['canInput']());BattleManager[_0x47c70b(0xc1a)]=_0x388ccd[0x0]||null,BattleManager[_0x47c70b(0xc1a)]&&(_0x47c70b(0x28a)!=='ezfVC'?BattleManager[_0x47c70b(0xc1a)][_0x47c70b(0xd07)](_0x47c70b(0x3be)):_0x53a60f+=_0x3ad3d7(_0xfc0363['$2']));},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x709)]=Scene_Battle[_0x397c95(0x6cf)]['createActorCommandWindow'],Scene_Battle['prototype'][_0x397c95(0x431)]=function(){const _0x2031c7=_0x397c95;VisuMZ[_0x2031c7(0x1f3)][_0x2031c7(0x709)][_0x2031c7(0x6a3)](this),this[_0x2031c7(0x7b6)]();},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x7b6)]=function(){const _0x3dbde1=_0x397c95,_0x437331=this['_actorCommandWindow'];_0x437331['setHandler']('escape',this[_0x3dbde1(0x6e8)]['bind'](this)),_0x437331[_0x3dbde1(0x7d0)](_0x3dbde1(0xbea),this[_0x3dbde1(0x830)]['bind'](this)),_0x437331[_0x3dbde1(0x7d0)](_0x3dbde1(0x6ad),this[_0x3dbde1(0x58d)]['bind'](this));if(BattleManager[_0x3dbde1(0x939)]()){if(_0x3dbde1(0xc88)!=='Gehym')this[_0x3dbde1(0x19f)]()?delete _0x437331['_handlers'][_0x3dbde1(0x5e9)]:'BbKHT'===_0x3dbde1(0x895)?this[_0x3dbde1(0xcb6)]():_0x437331[_0x3dbde1(0x7d0)](_0x3dbde1(0x5e9),this['actorCommandCancelTPB']['bind'](this));else{const _0x335a85=this[_0x3dbde1(0xa0e)]();this[_0x3dbde1(0x2b5)]=![],_0x335a85&&this[_0x3dbde1(0x5db)]&&this[_0x3dbde1(0x648)](),this[_0x3dbde1(0x5db)]=![],this[_0x3dbde1(0x2ed)](),this[_0x3dbde1(0x88a)]()&&_0x335a85&&(this['performCollapse'](),this[_0x3dbde1(0xc5a)]());}}},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x6e8)]=function(){const _0x45b84f=_0x397c95;this[_0x45b84f(0x53c)]();},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x830)]=function(){const _0xaaf109=_0x397c95;BattleManager['actor']()['makeAutoBattleActions'](),BattleManager[_0xaaf109(0x79a)](),BattleManager[_0xaaf109(0x5bd)](),this[_0xaaf109(0x788)]();},Scene_Battle['prototype']['actorCommandSingleSkill']=function(){const _0xe66873=_0x397c95,_0x1bb163=BattleManager[_0xe66873(0x772)](),_0xc4e3b7=this[_0xe66873(0x1a1)][_0xe66873(0x432)]();_0x1bb163[_0xe66873(0x8aa)](_0xc4e3b7),BattleManager[_0xe66873(0x793)]()[_0xe66873(0x5ad)]($dataSkills[_0xc4e3b7]),this[_0xe66873(0x8f7)]();},Scene_Battle[_0x397c95(0x6cf)]['actorCommandCancelTPB']=function(){const _0x34a3d2=_0x397c95;if(this[_0x34a3d2(0x8c4)]()){if('mHZpF'!=='mHZpF'){if(!_0x59170e[_0x34a3d2(0x650)]())return;_0x576432[_0x34a3d2(0x5ff)](_0x41d477,_0x612073);const _0x1650e4=_0x5c5695[_0x34a3d2(0xaeb)](),_0x4727cd=_0x1d024c[_0x34a3d2(0x183)],_0x2c3d6a=_0x5c05f9[_0x34a3d2(0x127)],_0x549cc6=_0x36d031[_0x34a3d2(0xc3d)]?_0x4e8628['_allTargets']['slice'](0x0):[],_0xf5707a=_0x531287[_0x34a3d2(0x598)];if(!_0x1650e4||!_0x4727cd||!_0x2c3d6a)return;if(!_0x4727cd[_0x34a3d2(0x398)]())return;if(_0x4e248e['DisplayAction'])_0xf5707a[_0x34a3d2(0x3eb)](_0x2c3d6a,_0x4727cd[_0x34a3d2(0x398)]());_0xe0bc93['ApplyImmortal']&&_0xf5707a[_0x34a3d2(0x4da)](_0x34a3d2(0xbba),_0x2c3d6a,_0x549cc6,!![]);if(_0x2e34a7[_0x34a3d2(0x83c)])_0xf5707a[_0x34a3d2(0x4da)]('performActionStart',_0x2c3d6a,_0x4727cd);if(_0x9e53e7['WaitForMovement'])_0xf5707a[_0x34a3d2(0x4da)]('waitForMovement');if(_0x263c87[_0x34a3d2(0x39b)])_0xf5707a[_0x34a3d2(0x4da)](_0x34a3d2(0xbcc),_0x2c3d6a,_0x4727cd);if(_0x598997['WaitForAnimation'])_0xf5707a[_0x34a3d2(0x4da)]('waitForAnimation');_0x1650e4[_0x34a3d2(0x2b3)](_0x34a3d2(0x2a5));}else this['performTpbActiveCheckSwitch']();}else{if(_0x34a3d2(0x9eb)!==_0x34a3d2(0xc2d))this['processActorCommandCancelTPB']();else{const _0x164b85=_0x34a3d2(0x379)[_0x34a3d2(0xadd)](_0x1cc417);_0x2dd5b1['BattleCore']['JS'][_0x4ed16c]=new _0x3cae4b(_0x164b85);}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x3cb)]=![],Scene_Battle['prototype'][_0x397c95(0x8c4)]=function(){const _0x57c7a9=_0x397c95;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x57c7a9(0xac0)]())return![];else{if(!VisuMZ[_0x57c7a9(0x1f3)][_0x57c7a9(0x3cb)])return![];const _0x2b02da=$gameParty[_0x57c7a9(0x4c3)]()['filter'](_0xeb4ec9=>_0xeb4ec9[_0x57c7a9(0x784)]()&&_0xeb4ec9['canInput']());return _0x2b02da[_0x57c7a9(0x187)]>0x0&&BattleManager['actor']()!==_0x2b02da[_0x2b02da[_0x57c7a9(0x187)]-0x1];}},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x828)]=function(){const _0x1f7cc1=_0x397c95,_0x576f68=BattleManager[_0x1f7cc1(0x793)](),_0x4264c4=_0x576f68[_0x1f7cc1(0x7eb)]();if(_0x4264c4)_0x4264c4[_0x1f7cc1(0x65e)]();const _0x2f460f=$gameParty[_0x1f7cc1(0x4c3)]()[_0x1f7cc1(0x742)](_0x18191c=>_0x18191c[_0x1f7cc1(0x784)]()&&_0x18191c[_0x1f7cc1(0x3a6)]()),_0x350135=_0x2f460f['indexOf'](_0x576f68),_0x11071e=_0x2f460f[_0x350135+0x1];BattleManager[_0x1f7cc1(0xc1a)]=_0x11071e||null;if(_0x11071e)_0x11071e[_0x1f7cc1(0xd07)](_0x1f7cc1(0x3be));_0x576f68[_0x1f7cc1(0xd07)](_0x1f7cc1(0x5a8)),this[_0x1f7cc1(0x788)]();},Scene_Battle[_0x397c95(0x6cf)]['processActorCommandCancelTPB']=function(){const _0x41e263=_0x397c95;this['_partyCommandWindow']['setup'](),this[_0x41e263(0x1a1)][_0x41e263(0x664)]();if(!VisuMZ[_0x41e263(0x1f3)]['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x41e263(0xac0)]())return;if(BattleManager[_0x41e263(0xc1a)]){BattleManager['_currentActor'][_0x41e263(0xd07)]('undecided');const _0x1ca23f=BattleManager[_0x41e263(0xc1a)][_0x41e263(0x7eb)]();if(_0x1ca23f)_0x1ca23f[_0x41e263(0x65e)]();}BattleManager[_0x41e263(0xc1a)]=null;},VisuMZ['BattleCore'][_0x397c95(0x6af)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x604)],Scene_Battle['prototype']['createHelpWindow']=function(){const _0x46a1d4=_0x397c95;VisuMZ[_0x46a1d4(0x1f3)][_0x46a1d4(0x6af)][_0x46a1d4(0x6a3)](this),this[_0x46a1d4(0x245)]();},Scene_Battle[_0x397c95(0x6cf)]['createHelpWindowBattleCore']=function(){const _0x58de2d=_0x397c95;this[_0x58de2d(0x1a1)][_0x58de2d(0x311)](this[_0x58de2d(0x2fa)]),this[_0x58de2d(0x273)]['setHelpWindow'](this[_0x58de2d(0x2fa)]);},Scene_Battle[_0x397c95(0x6cf)]['battleLayoutStyle']=function(){const _0x5796d7=_0x397c95;if($gameTemp[_0x5796d7(0x6c3)]!==undefined)return $gameTemp[_0x5796d7(0x6c3)];if(this[_0x5796d7(0x7a0)])return this[_0x5796d7(0x7a0)];return this[_0x5796d7(0x7a0)]=VisuMZ[_0x5796d7(0x1f3)]['Settings'][_0x5796d7(0x595)][_0x5796d7(0x5bf)][_0x5796d7(0x9a2)]()['trim'](),this['_battleLayoutStyle']==='sideview_ui'&&!Imported[_0x5796d7(0x667)]&&(this[_0x5796d7(0x7a0)]='default'),this[_0x5796d7(0x7a0)]===_0x5796d7(0x605)&&!Imported[_0x5796d7(0xa6a)]&&(this[_0x5796d7(0x7a0)]='default'),this[_0x5796d7(0x7a0)];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x607)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x18b)],Scene_Battle['prototype'][_0x397c95(0x18b)]=function(){const _0x1c0967=_0x397c95,_0x46852e=this['battleLayoutStyle']();switch(_0x46852e){case _0x1c0967(0x7e1):return this[_0x1c0967(0x9e5)](Math['max'](0x1,$gameParty[_0x1c0967(0xb05)]()),!![]);break;default:return VisuMZ['BattleCore'][_0x1c0967(0x607)]['call'](this);break;}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x684)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x75d)],Scene_Battle[_0x397c95(0x6cf)]['helpWindowRect']=function(){const _0x3a2521=_0x397c95,_0x2dbacf=this[_0x3a2521(0x1b2)]();switch(_0x2dbacf){case _0x3a2521(0x8fe):return this[_0x3a2521(0x255)]();break;case _0x3a2521(0xac1):case'list':case'xp':case _0x3a2521(0xab1):default:return VisuMZ['BattleCore'][_0x3a2521(0x684)][_0x3a2521(0x6a3)](this);break;}},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xa58)]=function(){const _0x41ef3c=_0x397c95,_0x4b4a64=this[_0x41ef3c(0x1b2)]();switch(_0x4b4a64){case'xp':case _0x41ef3c(0xab1):return this['statusWindowRectXPStyle']();break;case _0x41ef3c(0x8fe):return this[_0x41ef3c(0x896)]();break;case'default':case _0x41ef3c(0x7e1):default:return this[_0x41ef3c(0x4f8)]();break;}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x672)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x43d)],Scene_Battle[_0x397c95(0x6cf)]['partyCommandWindowRect']=function(){const _0x46fb37=_0x397c95,_0xb2fcc3=this[_0x46fb37(0x1b2)]();switch(_0xb2fcc3){case'xp':case'portrait':return this[_0x46fb37(0x331)]();break;case _0x46fb37(0x8fe):return this[_0x46fb37(0x6d7)]();case'default':case _0x46fb37(0x7e1):default:return this[_0x46fb37(0x9f4)]();break;}},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x9f4)]=function(){const _0x396ee4=_0x397c95,_0x2d501f=VisuMZ[_0x396ee4(0x1f3)][_0x396ee4(0x716)][_0x396ee4(0x595)],_0x3e9509=_0x2d501f[_0x396ee4(0xbf5)]||0xc0,_0x31fd88=this[_0x396ee4(0x18b)](),_0x48c9f4=this[_0x396ee4(0x80a)]()?Graphics[_0x396ee4(0xb5d)]-_0x3e9509:0x0,_0x20f979=Graphics[_0x396ee4(0xa9e)]-_0x31fd88;return new Rectangle(_0x48c9f4,_0x20f979,_0x3e9509,_0x31fd88);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x3e9)]=function(){const _0x564421=_0x397c95;return this[_0x564421(0x43d)]();},VisuMZ[_0x397c95(0x1f3)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x414)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x414)]=function(){const _0x2e888b=_0x397c95,_0x11543d=this[_0x2e888b(0x1b2)]();switch(_0x11543d){case'xp':case _0x2e888b(0xab1):case _0x2e888b(0x8fe):break;case'default':case _0x2e888b(0x7e1):default:VisuMZ[_0x2e888b(0x1f3)][_0x2e888b(0x977)][_0x2e888b(0x6a3)](this);break;}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x632)]=Scene_Battle[_0x397c95(0x6cf)]['startActorSelection'],Scene_Battle[_0x397c95(0x6cf)]['startActorSelection']=function(){const _0x44fc96=_0x397c95;VisuMZ['BattleCore'][_0x44fc96(0x632)]['call'](this),this[_0x44fc96(0x421)]();},VisuMZ['BattleCore'][_0x397c95(0xa42)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xcaf)],Scene_Battle[_0x397c95(0x6cf)]['startEnemySelection']=function(){const _0x10291f=_0x397c95;VisuMZ['BattleCore'][_0x10291f(0xa42)][_0x10291f(0x6a3)](this),this[_0x10291f(0x346)][_0x10291f(0x5e4)](),this[_0x10291f(0x421)]();},Scene_Battle['prototype'][_0x397c95(0x421)]=function(){const _0x452f19=_0x397c95,_0x2d01cf=this[_0x452f19(0x1b2)]();['xp','portrait',_0x452f19(0x8fe)]['includes'](_0x2d01cf)&&(_0x452f19(0x378)===_0x452f19(0x378)?this['_actorCommandWindow'][_0x452f19(0x664)]():this[_0x452f19(0x152)]()?_0x28047d[_0x452f19(0x6fe)][_0x452f19(0x1e8)][_0x452f19(0x2fb)](_0xcc13d0):(this[_0x452f19(0xb1f)]()[_0x452f19(0xa8a)](_0x4ac0d9),this['_damages'][_0x452f19(0x723)](_0x4a76b4),_0x343330[_0x452f19(0x576)]())),(_0x2d01cf===_0x452f19(0x8fe)||this[_0x452f19(0x816)]())&&(this[_0x452f19(0xce1)]['close'](),this['_itemWindow'][_0x452f19(0x664)]());},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x266)]=Scene_Battle[_0x397c95(0x6cf)]['onActorOk'],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x824)]=function(){const _0x5d49b6=_0x397c95;VisuMZ['BattleCore'][_0x5d49b6(0x266)][_0x5d49b6(0x6a3)](this),this[_0x5d49b6(0x6e2)]();},Scene_Battle['prototype'][_0x397c95(0x297)]=function(){const _0x53562=_0x397c95;return['attack',_0x53562(0x50e),_0x53562(0x6ad)][_0x53562(0x932)](this[_0x53562(0x1a1)]['currentSymbol']());},VisuMZ['BattleCore'][_0x397c95(0xbb5)]=Scene_Battle[_0x397c95(0x6cf)]['onActorCancel'],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xb1c)]=function(){const _0x327867=_0x397c95;this[_0x327867(0x297)]()?(this['_statusWindow']['show'](),this['_actorWindow'][_0x327867(0x16a)](),this[_0x327867(0x1a1)]['activate']()):VisuMZ[_0x327867(0x1f3)][_0x327867(0xbb5)][_0x327867(0x6a3)](this),this['cancelTargetSelectionVisibility']();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x54a)]=Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xcd1)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xcd1)]=function(){const _0x47d8ca=_0x397c95,_0x2dfd76=BattleManager[_0x47d8ca(0x772)]();_0x2dfd76['setTargetBattlerKey'](this[_0x47d8ca(0x346)]['enemy']()),this['_enemyWindow'][_0x47d8ca(0x48c)](),VisuMZ[_0x47d8ca(0x1f3)]['Scene_Battle_onEnemyOk'][_0x47d8ca(0x6a3)](this),this[_0x47d8ca(0x6e2)]();},VisuMZ['BattleCore'][_0x397c95(0x70d)]=Scene_Battle['prototype'][_0x397c95(0xb93)],Scene_Battle['prototype'][_0x397c95(0xb93)]=function(){const _0x25ee8f=_0x397c95;if(this[_0x25ee8f(0x297)]()){if('oFwyv'!==_0x25ee8f(0x428)){const _0x15f38d=_0x42c4f9[_0x25ee8f(0x398)]();this[_0x25ee8f(0x4da)]('applyImmortal',_0x54044c,_0x5bca36,![]),this[_0x25ee8f(0x4da)]('waitForNewLine'),this['push']('waitForEffect'),this['push']('clear'),this[_0x25ee8f(0x4da)]('performActionEnd',_0x26bac9),this[_0x25ee8f(0x4da)](_0x25ee8f(0xb09));}else this[_0x25ee8f(0x1e8)]['show'](),this[_0x25ee8f(0x346)][_0x25ee8f(0x16a)](),this[_0x25ee8f(0x1a1)][_0x25ee8f(0x67c)]();}else VisuMZ[_0x25ee8f(0x1f3)][_0x25ee8f(0x70d)][_0x25ee8f(0x6a3)](this);this[_0x25ee8f(0x9f3)](),this['_enemyWindow']['closeBattleActorWindow']();},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x6e2)]=function(){const _0x417b20=_0x397c95,_0x1280c9=this[_0x417b20(0x1b2)]();(_0x1280c9==='border'||this[_0x417b20(0x816)]())&&(_0x417b20(0xcdd)===_0x417b20(0x52c)?(this[_0x417b20(0x1e8)][_0x417b20(0x71a)](),this[_0x417b20(0x346)][_0x417b20(0x16a)](),this['_actorCommandWindow'][_0x417b20(0x67c)]()):(this[_0x417b20(0xce1)][_0x417b20(0x230)](),this[_0x417b20(0xce1)][_0x417b20(0x7e6)]&&('PvICL'===_0x417b20(0xc27)?this[_0x417b20(0xce1)][_0x417b20(0x71a)]():(this[_0x417b20(0x15e)]=0x0,this[_0x417b20(0x522)]=0x0)),this[_0x417b20(0x268)][_0x417b20(0x230)](),this[_0x417b20(0x268)][_0x417b20(0x7e6)]&&this['_itemWindow'][_0x417b20(0x71a)]()));},Scene_Battle['prototype'][_0x397c95(0x9f3)]=function(){const _0x5d5cc9=_0x397c95,_0x569917=this[_0x5d5cc9(0x1b2)]();['xp',_0x5d5cc9(0xab1),'border']['includes'](_0x569917)&&this[_0x5d5cc9(0x1a1)][_0x5d5cc9(0x230)](),this[_0x5d5cc9(0x6e2)]();},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x4f8)]=function(){const _0x4783c5=_0x397c95,_0x38a3fe=VisuMZ[_0x4783c5(0x1f3)][_0x4783c5(0x716)]['BattleLayout'],_0x9b6d83=Window_BattleStatus[_0x4783c5(0x6cf)]['extraHeight'](),_0x277894=Graphics[_0x4783c5(0xb5d)]-(_0x38a3fe['CommandWidth']||0xc0),_0x356c4c=this[_0x4783c5(0x18b)]()+_0x9b6d83,_0x4fa312=this[_0x4783c5(0x80a)]()?0x0:Graphics[_0x4783c5(0xb5d)]-_0x277894,_0x524298=Graphics[_0x4783c5(0xa9e)]-_0x356c4c+_0x9b6d83;return new Rectangle(_0x4fa312,_0x524298,_0x277894,_0x356c4c);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x7bf)]=function(){const _0x148cc1=_0x397c95,_0x4e28bd=Window_BattleStatus[_0x148cc1(0x6cf)][_0x148cc1(0x264)](),_0x1e2e40=Graphics[_0x148cc1(0xb5d)],_0x101a3c=this['windowAreaHeight']()+_0x4e28bd,_0x181e7c=0x0,_0xac7315=Graphics['boxHeight']-_0x101a3c+_0x4e28bd;return new Rectangle(_0x181e7c,_0xac7315,_0x1e2e40,_0x101a3c);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x331)]=function(){const _0x45e6fd=_0x397c95,_0x36b0c7=Graphics[_0x45e6fd(0xb5d)]/0x2,_0x350711=this['calcWindowHeight'](VisuMZ[_0x45e6fd(0x1f3)][_0x45e6fd(0x716)][_0x45e6fd(0x595)][_0x45e6fd(0xa0d)],!![]),_0x4634e2=Math[_0x45e6fd(0x403)]((Graphics[_0x45e6fd(0xb5d)]-_0x36b0c7)/0x2),_0x425993=Graphics[_0x45e6fd(0xa9e)]-_0x350711-this['statusWindowRectXPStyle']()[_0x45e6fd(0x9b1)];return new Rectangle(_0x4634e2,_0x425993,_0x36b0c7,_0x350711);},Scene_Battle['prototype'][_0x397c95(0x255)]=function(){const _0x325a88=_0x397c95,_0x4e0712=Graphics[_0x325a88(0x76b)],_0x3356fd=Math['round']((Graphics[_0x325a88(0xb5d)]-_0x4e0712)/0x2),_0x2d8c34=this['helpAreaHeight'](),_0x231c45=(Graphics[_0x325a88(0x9b1)]-Graphics[_0x325a88(0xa9e)])/-0x2;return new Rectangle(_0x3356fd,_0x231c45,_0x4e0712,_0x2d8c34);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x896)]=function(){const _0x549049=_0x397c95,_0x450c6f=Graphics[_0x549049(0x76b)],_0x286fc9=Math[_0x549049(0x403)]((Graphics[_0x549049(0xb5d)]-_0x450c6f)/0x2),_0x2c31d8=this[_0x549049(0x9e5)](0x4,!![]),_0x29fd01=Graphics[_0x549049(0xa9e)]-_0x2c31d8+(Graphics[_0x549049(0x9b1)]-Graphics[_0x549049(0xa9e)])/0x2;return new Rectangle(_0x286fc9,_0x29fd01,_0x450c6f,_0x2c31d8);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x6d7)]=function(){const _0x21574e=_0x397c95,_0x586da3=Math['floor'](Graphics[_0x21574e(0x76b)]/0x3),_0xa6d73=this[_0x21574e(0x80a)]()?(Graphics[_0x21574e(0x76b)]+Graphics[_0x21574e(0xb5d)])/0x2-_0x586da3:(Graphics[_0x21574e(0x76b)]-Graphics['boxWidth'])/-0x2,_0x32731a=this[_0x21574e(0x255)](),_0x4d9e79=_0x32731a['y']+_0x32731a[_0x21574e(0x9b1)],_0x121dd3=this['statusWindowRectBorderStyle'](),_0x7da8d2=_0x121dd3['y']-_0x4d9e79;return new Rectangle(_0xa6d73,_0x4d9e79,_0x586da3,_0x7da8d2);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x238)]=function(){const _0x417610=_0x397c95,_0x2ab74f=Math['ceil'](Graphics[_0x417610(0x76b)]/0x3),_0x405716=Math[_0x417610(0x403)]((Graphics['boxWidth']-_0x2ab74f)/0x2),_0x476ded=this['partyCommandWindowRectBorderStyle'](),_0xfbad9d=_0x476ded['y'],_0x4e97c5=_0x476ded[_0x417610(0x9b1)];return new Rectangle(_0x405716,_0xfbad9d,_0x2ab74f,_0x4e97c5);},Scene_Battle['prototype'][_0x397c95(0x30a)]=function(){const _0x241891=_0x397c95;this[_0x241891(0xd02)]['y']=this[_0x241891(0x2fa)]['y']+this['_helpWindow'][_0x241891(0x9b1)];if(this[_0x241891(0x80a)]()){if('EiemB'!==_0x241891(0x925)){if(this['battleLayoutStyle']()===_0x241891(0x8fe)){if('ftcIK'!==_0x241891(0xbdf))return _0x412d96=_0x342737[_0x241891(0x27f)]()['trim'](),this[_0x241891(0x466)]()===_0xb6b759;else this[_0x241891(0xd02)]['x']=0x8;}else{if(_0x241891(0x23f)!==_0x241891(0x5ba))this[_0x241891(0xd02)]['x']=-this['_cancelButton'][_0x241891(0x76b)]-0x4;else{if(this[_0x241891(0x717)]<=0x0)return;const _0x5255d6=this[_0x241891(0x717)],_0x15badc=this[_0x241891(0x606)],_0x46314e=this[_0x241891(0x6ac)];_0x578c93[_0x241891(0x301)]?this[_0x241891(0x522)]=this['applyEasing'](this[_0x241891(0x522)],this[_0x241891(0x15e)],_0x5255d6,_0x15badc,_0x46314e):this['_currentAngle']=(this[_0x241891(0x522)]*(_0x5255d6-0x1)+this[_0x241891(0x15e)])/_0x5255d6;this[_0x241891(0x717)]--;if(this[_0x241891(0x717)]<=0x0)this[_0x241891(0x9da)]();}}}else this[_0x241891(0x169)]=this[_0x241891(0x7ce)],this[_0x241891(0x887)]=this[_0x241891(0xa3f)];}else{if('OuPvA'===_0x241891(0x2aa))this[_0x241891(0xd02)]['x']=Graphics['width']-(Graphics[_0x241891(0x76b)]-Graphics[_0x241891(0xb5d)])/0x2-this[_0x241891(0xd02)][_0x241891(0x76b)]-0x4;else{const _0x1ff361=_0x163203(_0x1d6430['$1'])[_0x241891(0x9af)](/[\r\n]+/)[_0x241891(0xb9a)](_0x2532c6=>_0x452a5d(_0x2532c6)[_0x241891(0x27f)]()[_0x241891(0xb34)]());_0x445558=_0x44a54a[_0x241891(0x900)](_0x1ff361);!_0x52bf79[_0x241891(0x6cc)][_0x241891(0xb38)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x44e658[_0x241891(0x6cc)]+=_0x241891(0x6a5));;}}},VisuMZ[_0x397c95(0x1f3)]['Scene_Battle_skillWindowRect']=Scene_Battle['prototype'][_0x397c95(0xa9f)],Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0xa9f)]=function(){const _0x65627a=_0x397c95;if(this[_0x65627a(0x1b2)]()===_0x65627a(0x8fe)){if(_0x65627a(0x42b)===_0x65627a(0x42b))return this[_0x65627a(0x238)]();else{const _0x25f185=_0x2073b3[_0x65627a(0xb70)](_0x253957);return _0x25f185>=0x0?[_0x2fe88e[_0x25f185-0x1]||_0x52c05f]:[_0x345c98];}}else{if(this[_0x65627a(0x816)]())return this['skillItemWindowRectMiddle']();else{if(_0x65627a(0x585)!==_0x65627a(0x585))_0x21ec47=_0x3cb378[_0x65627a(0x5f3)];else return VisuMZ[_0x65627a(0x1f3)]['Scene_Battle_skillWindowRect'][_0x65627a(0x6a3)](this);}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x22a)]=Scene_Battle['prototype'][_0x397c95(0x660)],Scene_Battle['prototype']['itemWindowRect']=function(){const _0x1a5b46=_0x397c95;if(this['battleLayoutStyle']()===_0x1a5b46(0x8fe)){if('UFYQz'!==_0x1a5b46(0x8f8))_0x53b5da=(_0x435d46+_0x11f380)/0x2,_0x57f2ea=-0x1;else return this['skillItemWindowRectBorderStyle']();}else return this['isSkillItemWindowsMiddle']()?_0x1a5b46(0x1ee)===_0x1a5b46(0x1ee)?this['skillItemWindowRectMiddle']():_0x3ac222[_0x1a5b46(0x1f3)][_0x1a5b46(0x26d)][_0x1a5b46(0x6a3)](this,_0x2bbca8):VisuMZ[_0x1a5b46(0x1f3)][_0x1a5b46(0x22a)][_0x1a5b46(0x6a3)](this);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x816)]=function(){const _0x4179a6=_0x397c95;return VisuMZ[_0x4179a6(0x1f3)]['Settings'][_0x4179a6(0x595)]['SkillItemMiddleLayout'];},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x97d)]=function(){const _0x1cbc5f=_0x397c95,_0x7cc771=Sprite_Button['prototype']['blockWidth']()*0x2+0x4;let _0x46275d=Graphics[_0x1cbc5f(0xb5d)]-_0x7cc771;Imported[_0x1cbc5f(0x301)]&&SceneManager[_0x1cbc5f(0x688)]()&&('DwKEE'!==_0x1cbc5f(0x62b)?this[_0x1cbc5f(0xa03)]=![]:_0x46275d+=_0x7cc771);const _0x6455a3=this['helpAreaBottom'](),_0x2980ed=Graphics[_0x1cbc5f(0xa9e)]-_0x6455a3-this[_0x1cbc5f(0xa58)]()['height']+Window_BattleStatus[_0x1cbc5f(0x6cf)][_0x1cbc5f(0x264)](),_0x8aa939=0x0;return new Rectangle(_0x8aa939,_0x6455a3,_0x46275d,_0x2980ed);},Scene_Battle[_0x397c95(0x6cf)][_0x397c95(0x89e)]=function(){const _0x3fdb93=_0x397c95;if(!VisuMZ[_0x3fdb93(0x1f3)][_0x3fdb93(0x716)]['Enemy'][_0x3fdb93(0x655)])return;this[_0x3fdb93(0x536)]=new Sprite(),this['_enemyNameContainer']['x']=this[_0x3fdb93(0xacc)]['x'],this[_0x3fdb93(0x536)]['y']=this[_0x3fdb93(0xacc)]['y'];const _0x2aad0b=this['children'][_0x3fdb93(0xb70)](this[_0x3fdb93(0xacc)]);this[_0x3fdb93(0x946)](this[_0x3fdb93(0x536)],_0x2aad0b);for(let _0xb26344=0x0;_0xb26344<0x8;_0xb26344++){if('KMJci'!==_0x3fdb93(0x70f)){const _0x13c8fb=new Window_EnemyName(_0xb26344);this['_enemyNameContainer']['addChild'](_0x13c8fb);}else{this[_0x3fdb93(0x593)]=_0x9bf937;const _0x194126=this[_0x3fdb93(0xa29)](),_0x5a88e2=this['bitmapWidth'](),_0xbf30b7=_0x4d19df[_0x3fdb93(0x6cf)][_0x3fdb93(0x288)]();this[_0x3fdb93(0x289)](),this[_0x3fdb93(0x60e)]['clear'](),this[_0x3fdb93(0x60e)]['drawText'](_0x194126,0x0,0x0,_0x5a88e2,_0xbf30b7,'center');}}},Sprite_Battler[_0x397c95(0xb29)]=VisuMZ['BattleCore'][_0x397c95(0x716)][_0x397c95(0xc24)][_0x397c95(0x511)],VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x391)]=Sprite_Battler[_0x397c95(0x6cf)]['initMembers'],Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x652)]=function(){const _0x2ca81d=_0x397c95;VisuMZ['BattleCore'][_0x2ca81d(0x391)][_0x2ca81d(0x6a3)](this),this[_0x2ca81d(0x883)]();if(this[_0x2ca81d(0x32a)]===Sprite_Enemy)this[_0x2ca81d(0x470)]();this['createDistortionSprite']();},Sprite_Battler['prototype']['initMembersBattleCore']=function(){const _0x538677=_0x397c95;this[_0x538677(0x4fd)]=0x0,this[_0x538677(0x39a)]=0x0,this[_0x538677(0x8d0)]=0x0,this[_0x538677(0x533)]=0x0,this['_floatDuration']=0x0,this[_0x538677(0xc14)]=0x0,this[_0x538677(0x5f1)]=_0x538677(0xa76),this[_0x538677(0x88c)]=0x0,this[_0x538677(0xa34)]=0x0,this[_0x538677(0x179)]=0x0,this[_0x538677(0x9dc)]=0x0,this[_0x538677(0x1fb)]=0xff,this[_0x538677(0xade)]=0x0,this[_0x538677(0xb48)]=0x0,this['_opacityEasing']=_0x538677(0xa76),this['_currentAngle']=0x0,this[_0x538677(0x15e)]=0x0,this['_angleDuration']=0x0,this[_0x538677(0x606)]=0x0,this['_angleEasing']=_0x538677(0xa76),this[_0x538677(0x502)]=!![],this[_0x538677(0xcef)]=0x0,this[_0x538677(0x702)]=0x0,this[_0x538677(0x99f)]=0x0,this[_0x538677(0x3f8)]=0x0,this[_0x538677(0x4fa)]=0x0,this[_0x538677(0x320)]=0x0,this['_skewEasing']=_0x538677(0xa76),this[_0x538677(0x2df)]=0x1,this['_growY']=0x1,this[_0x538677(0x530)]=0x1,this['_targetGrowY']=0x1,this[_0x538677(0x9dd)]=0x0,this[_0x538677(0xb45)]=0x0,this[_0x538677(0xb92)]='Linear',this[_0x538677(0x180)]=0x1,this[_0x538677(0x7ce)]=0x0,this[_0x538677(0xa3f)]=0x0,this['_homeDuration']=0x0,this[_0x538677(0x6b0)]=0x0,this[_0x538677(0xa84)]=_0x538677(0xa76),this[_0x538677(0x8c0)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler['prototype']['createShadowSprite']=function(){const _0x1ec052=_0x397c95;this['_shadowSprite']=new Sprite(),this[_0x1ec052(0x6e4)]['bitmap']=ImageManager[_0x1ec052(0x28b)]('Shadow2'),this[_0x1ec052(0x6e4)][_0x1ec052(0x60e)][_0x1ec052(0x6bc)]=VisuMZ[_0x1ec052(0x1f3)]['Settings'][_0x1ec052(0xc24)][_0x1ec052(0x94a)],this[_0x1ec052(0x6e4)][_0x1ec052(0x140)]['x']=0.5,this[_0x1ec052(0x6e4)][_0x1ec052(0x140)]['y']=0.5,this[_0x1ec052(0x6e4)]['y']=-0x2,this[_0x1ec052(0x6e4)][_0x1ec052(0x3d2)]=![],this[_0x1ec052(0x5ab)](this[_0x1ec052(0x6e4)]);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x920)]=function(){const _0x5ebd42=_0x397c95;this['_distortionSprite']=new Sprite(),this[_0x5ebd42(0x763)][_0x5ebd42(0x140)]['x']=0.5,this[_0x5ebd42(0x763)][_0x5ebd42(0x140)]['y']=0.5,this[_0x5ebd42(0x5ab)](this[_0x5ebd42(0x763)]);},Sprite_Battler['prototype'][_0x397c95(0x380)]=function(){const _0xf8aab0=_0x397c95;if(!this[_0xf8aab0(0x763)])return;if(this[_0xf8aab0(0x6e4)]){if(_0xf8aab0(0xb53)!==_0xf8aab0(0x560)){const _0x887062=this[_0xf8aab0(0xca1)](this['_distortionSprite']);this['addChildAt'](this[_0xf8aab0(0x6e4)],_0x887062),this[_0xf8aab0(0x8cf)]();}else _0x43df4b=!_0x2af075;}this[_0xf8aab0(0x64f)]&&this[_0xf8aab0(0x763)]['addChild'](this[_0xf8aab0(0x64f)]);if(this[_0xf8aab0(0x796)]){if('PLYvG'!==_0xf8aab0(0x675))this['_distortionSprite']['addChild'](this[_0xf8aab0(0x796)]);else{const _0x4b07ac=_0x127d82['x']+_0x254b88[_0xf8aab0(0xaee)]((_0x137adb[_0xf8aab0(0x76b)]-_0xee59e5)/0x2);this[_0xf8aab0(0xa3c)](_0x278459,_0x4b07ac,_0x36777b['y'],_0x43e201);}}this[_0xf8aab0(0x263)]&&this[_0xf8aab0(0x763)][_0xf8aab0(0x5ab)](this['_mainSprite']),this[_0xf8aab0(0xbf2)]&&this[_0xf8aab0(0x763)][_0xf8aab0(0x5ab)](this['_injectAnimationSprite']),this[_0xf8aab0(0x246)]&&this[_0xf8aab0(0x763)][_0xf8aab0(0x5ab)](this[_0xf8aab0(0x246)]);},Sprite_Battler[_0x397c95(0x6cf)]['updateShadowVisibility']=function(){const _0x17fa31=_0x397c95;if(!this[_0x17fa31(0x6e4)])return;if(this[_0x17fa31(0xcfb)]&&this['_battler'][_0x17fa31(0x7e4)]()){const _0x1bed7d=this['_shadowSprite'][_0x17fa31(0x60e)];this[_0x17fa31(0x6e4)][_0x17fa31(0x71f)](0x0,0x0,_0x1bed7d['width'],_0x1bed7d[_0x17fa31(0x9b1)]);}else this[_0x17fa31(0x6e4)][_0x17fa31(0x71f)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x397c95(0xb1f)]=function(){const _0x33a86f=_0x397c95;if(SceneManager['isSceneBattle']())return SceneManager['_scene'][_0x33a86f(0x69b)]['_damageContainer'];else{if(_0x33a86f(0x2fd)!==_0x33a86f(0x2fd)){if(!_0x5b85ba['isSceneBattle']())return;if(!_0xbaeaa1[_0x33a86f(0xa2a)])return;_0x397542[_0x33a86f(0x5ff)](_0x327b29,_0xeeb60e);const _0x26c7a5=_0x3b856b[_0x33a86f(0xaeb)](),_0x1e4f03=_0x5b24cb[_0x33a86f(0x6a6)];if(!_0x26c7a5)return;const _0x10707e=_0x3c6129[_0x33a86f(0x69b)];if(!_0x10707e)return;_0x10707e['createActionSequenceProjectile'](_0x2a5953);if(_0x1e4f03)_0x26c7a5[_0x33a86f(0x2b3)](_0x33a86f(0x733));}else return this['parent'];}},Sprite_Battler[_0x397c95(0x6cf)]['setupTextPopup']=function(_0xf91ea3,_0x51dc0b){const _0x299db1=_0x397c95;if(!this[_0x299db1(0xcfb)][_0x299db1(0x68d)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x5bbd97=VisuMZ[_0x299db1(0x1f3)][_0x299db1(0x716)][_0x299db1(0x7a6)],_0x26edd4=new Sprite_Damage();_0x26edd4['_duration']=_0x5bbd97['PopupDuration'],this['sortDamageSprites'](_0x26edd4),_0x26edd4[_0x299db1(0x5c2)](_0xf91ea3,_0x51dc0b),this['addDamageSprite'](_0x26edd4);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x643)]=function(_0x20636f,_0x2d93da,_0x16923f){const _0x26785e=_0x397c95;if(!this[_0x26785e(0xcfb)][_0x26785e(0x68d)]())return;if(BattleManager[_0x26785e(0x4e7)]())return;const _0x317d3b=VisuMZ[_0x26785e(0x1f3)][_0x26785e(0x716)]['Damage'],_0x5cb017=new Sprite_Damage();_0x5cb017[_0x26785e(0xa6e)]=_0x317d3b[_0x26785e(0x719)],this[_0x26785e(0x7ff)](_0x5cb017),_0x5cb017[_0x26785e(0x643)](_0x20636f,_0x2d93da,_0x16923f),this[_0x26785e(0xaea)](_0x5cb017);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x41e)]=function(){const _0x239d76=_0x397c95;if(!this[_0x239d76(0xcfb)]['isDamagePopupRequested']())return;while(this[_0x239d76(0xcfb)][_0x239d76(0x853)]()){this[_0x239d76(0xcfb)]['isSpriteVisible']()&&this[_0x239d76(0xc80)]();}this[_0x239d76(0xcfb)]['clearDamagePopup'](),this['_battler'][_0x239d76(0x823)]();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xc80)]=function(){const _0x4b6c82=_0x397c95;if(BattleManager[_0x4b6c82(0x4e7)]())return;const _0x500bfb=VisuMZ[_0x4b6c82(0x1f3)][_0x4b6c82(0x716)]['Damage'],_0x3a7a09=new Sprite_Damage();_0x3a7a09['_duration']=_0x500bfb[_0x4b6c82(0x719)],this[_0x4b6c82(0x7ff)](_0x3a7a09),_0x3a7a09[_0x4b6c82(0x74a)](this[_0x4b6c82(0xcfb)]),_0x3a7a09['setupBattleCore'](this[_0x4b6c82(0xcfb)]),this[_0x4b6c82(0xaea)](_0x3a7a09);},Sprite_Battler[_0x397c95(0x6cf)]['addDamageSprite']=function(_0x547235){const _0x3d9ea5=_0x397c95;this[_0x3d9ea5(0x7c2)][_0x3d9ea5(0x4da)](_0x547235);if(this[_0x3d9ea5(0x152)]()){if(_0x3d9ea5(0x78d)!==_0x3d9ea5(0x78d))_0x466727[_0x3d9ea5(0x44b)]=[];else{const _0x10b9e7=SceneManager[_0x3d9ea5(0x6fe)][_0x3d9ea5(0x1e8)];if(_0x10b9e7)_0x10b9e7[_0x3d9ea5(0xaea)](_0x547235,this[_0x3d9ea5(0xcfb)]);}}else{this[_0x3d9ea5(0xb1f)]()[_0x3d9ea5(0x5ab)](_0x547235);if(SceneManager[_0x3d9ea5(0xcc4)]())_0x547235['scale']['x']=-0x1;}},Sprite_Battler[_0x397c95(0x6cf)]['isShownOnBattlePortrait']=function(){const _0x4e6fa9=_0x397c95;return!$gameSystem['isSideView']()&&this[_0x4e6fa9(0xcfb)]&&this[_0x4e6fa9(0xcfb)]['isActor']();return!$gameSystem[_0x4e6fa9(0x221)]()&&this['_battler']&&this[_0x4e6fa9(0xcfb)]['isActor']()&&Window_BattleStatus['prototype'][_0x4e6fa9(0x1b2)]()===_0x4e6fa9(0xab1);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x7ff)]=function(_0x5dc1a3){const _0x2690c2=_0x397c95;this['alignBattleCoreDamageSprite'](_0x5dc1a3,!![]);const _0x2caa04=VisuMZ['BattleCore'][_0x2690c2(0x716)][_0x2690c2(0x7a6)],_0x59fd0f=SceneManager['isBattleFlipped']()?-0x1:0x1;if(_0x2caa04['NewPopupBottom']){if('SdZMi'!==_0x2690c2(0x568))this[_0x2690c2(0x268)][_0x2690c2(0x71a)]();else for(const _0x548cea of this[_0x2690c2(0x7c2)]){_0x548cea['x']+=_0x2caa04[_0x2690c2(0xb7d)]*_0x59fd0f,_0x548cea['y']+=_0x2caa04[_0x2690c2(0x189)];}}else{if(_0x2690c2(0x8bc)!==_0x2690c2(0xc58)){const _0x45131d=this['_damages'][this[_0x2690c2(0x7c2)][_0x2690c2(0x187)]-0x1];_0x45131d&&(_0x5dc1a3['x']=_0x45131d['x']+_0x2caa04[_0x2690c2(0xb7d)]*_0x59fd0f,_0x5dc1a3['y']=_0x45131d['y']+_0x2caa04[_0x2690c2(0x189)]);}else{_0x1a1183[_0x2690c2(0x6cf)][_0x2690c2(0x67c)]['call'](this);const _0x2d1dae=this['battleLayoutStyle']();_0x2d1dae===_0x2690c2(0x8fe)&&this[_0x2690c2(0x4c5)]();}}},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xb54)]=function(_0x3f102b,_0x187a77){const _0x19bd76=_0x397c95,_0x9a36e3=SceneManager[_0x19bd76(0xcc4)]()?-0x1:0x1;let _0x5f2308=this[_0x19bd76(0x4fd)];_0x5f2308+=this[_0x19bd76(0x837)]();let _0x5ae215=this['_baseY'];const _0x43fb3f=this[_0x19bd76(0x763)][_0x19bd76(0x2b2)]['y'];_0x5ae215+=this[_0x19bd76(0x2f6)]();const _0x3b52b6=SceneManager[_0x19bd76(0x6fe)][_0x19bd76(0x1e8)];if(_0x3b52b6&&this[_0x19bd76(0x4bf)]===_0x3b52b6){if(_0x19bd76(0x9b8)!=='rEcaX'){if(!this[_0x19bd76(0x398)]())return _0x1db1ba;const _0x2f0f37=this[_0x19bd76(0x398)]()[_0x19bd76(0x6cc)];return _0x2f0f37['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x257e55[_0x19bd76(0x723)](this[_0x19bd76(0x339)]()),_0x59b9ab;}else{_0x5f2308+=_0x3b52b6['x']-this['damageOffsetX']();const _0x108e6e=_0x3b52b6['lineHeight']()*0x3/0x4;_0x5ae215=_0x3b52b6['y']+_0x108e6e,_0x5ae215=Math[_0x19bd76(0x9d3)](_0x5ae215,_0x3b52b6['y']+this['y']-this['height']+_0x108e6e);}}_0x3f102b['x']=Math['round'](_0x5f2308+this[_0x19bd76(0xa72)]()*_0x9a36e3),_0x3f102b['y']=Math['round'](_0x5ae215+this[_0x19bd76(0x286)]());},VisuMZ[_0x397c95(0x1f3)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xa72)],Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xa72)]=function(){const _0x13b998=_0x397c95;let _0x140ad9=VisuMZ[_0x13b998(0x1f3)][_0x13b998(0x5a7)][_0x13b998(0x6a3)](this),_0x1bbf26=VisuMZ[_0x13b998(0x1f3)][_0x13b998(0x716)]['Damage']['PopupOffsetX']||0x0;return Math['round'](_0x140ad9+_0x1bbf26);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x1b0)]=Sprite_Battler[_0x397c95(0x6cf)]['damageOffsetY'],Sprite_Battler[_0x397c95(0x6cf)]['damageOffsetY']=function(){const _0x25d502=_0x397c95;let _0x3e6315=VisuMZ[_0x25d502(0x1f3)]['Sprite_Battler_damageOffsetY']['call'](this);switch(VisuMZ[_0x25d502(0x1f3)][_0x25d502(0x716)][_0x25d502(0x7a6)]['PopupPosition']){case _0x25d502(0x5c9):_0x3e6315-=this[_0x25d502(0x9b1)]*this[_0x25d502(0x2b2)]['y'];break;case'center':_0x3e6315-=this[_0x25d502(0x9b1)]*this['scale']['y']*0.5;break;}let _0x141a8b=VisuMZ['BattleCore'][_0x25d502(0x716)]['Damage']['PopupOffsetY']||0x0;return Math['round'](_0x3e6315+_0x141a8b);},Sprite_Actor[_0x397c95(0x6cf)]['damageOffsetX']=function(){const _0x262f34=_0x397c95;return Sprite_Battler[_0x262f34(0x6cf)][_0x262f34(0xa72)][_0x262f34(0x6a3)](this);},Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x286)]=function(){const _0x3fe508=_0x397c95;return Sprite_Battler['prototype']['damageOffsetY'][_0x3fe508(0x6a3)](this);},Sprite_Battler[_0x397c95(0x6cf)]['destroyDamageSprite']=function(_0x584e0d){const _0x16019c=_0x397c95;this[_0x16019c(0x152)]()?_0x16019c(0xa93)===_0x16019c(0x88b)?(this[_0x16019c(0x86b)]['x']=this[_0x16019c(0x76b)],this['_borderPortraitTargetX']=this[_0x16019c(0x76b)]*0x3/0x4):SceneManager[_0x16019c(0x6fe)][_0x16019c(0x1e8)]['removeDamageSprite'](_0x584e0d):(this[_0x16019c(0xb1f)]()[_0x16019c(0xa8a)](_0x584e0d),this[_0x16019c(0x7c2)]['remove'](_0x584e0d),_0x584e0d['destroy']());},VisuMZ[_0x397c95(0x1f3)]['Sprite_Battler_setHome']=Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x6ee)],Sprite_Battler['prototype'][_0x397c95(0x6ee)]=function(_0x20f896,_0x1d4841){const _0x16eb29=_0x397c95,_0x2227f9=VisuMZ[_0x16eb29(0x1f3)][_0x16eb29(0x716)];if(this[_0x16eb29(0x32a)]===Sprite_Actor)_0x20f896+=_0x2227f9[_0x16eb29(0xc24)][_0x16eb29(0x5c1)]||0x0,_0x1d4841+=_0x2227f9[_0x16eb29(0xc24)][_0x16eb29(0xd03)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x20f896+=_0x2227f9[_0x16eb29(0x7de)][_0x16eb29(0x5c1)]||0x0,_0x1d4841+=_0x2227f9['Enemy']['OffsetY']||0x0);if(this[_0x16eb29(0xcfb)]){if(_0x16eb29(0xc6e)===_0x16eb29(0xc6e))_0x20f896=this[_0x16eb29(0xcfb)][_0x16eb29(0x9a8)]??_0x20f896,_0x1d4841=this['_battler'][_0x16eb29(0x1e2)]??_0x1d4841;else{if(_0x2fe1af[_0x16eb29(0x6cc)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x3c7baf=_0x13ae32(_0x2a4d75['$1'])[_0x16eb29(0x9af)](/[\r\n]+/)[_0x16eb29(0x723)](''),_0x2bf90f=this[_0x16eb29(0x831)](_0x3c7baf);_0x1b9b68=this[_0x16eb29(0x1b4)](_0x2bf90f)||_0x3146de,_0x5f15a6=_0x58db97[_0x16eb29(0x76a)](_0x507b77);}}}VisuMZ['BattleCore']['Sprite_Battler_setHome'][_0x16eb29(0x6a3)](this,_0x20f896,_0x1d4841),this[_0x16eb29(0x7ce)]=this[_0x16eb29(0x169)],this[_0x16eb29(0xa3f)]=this[_0x16eb29(0x887)],this[_0x16eb29(0x204)]=0x0,this[_0x16eb29(0x6b0)]=0x0,this[_0x16eb29(0xa84)]=_0x16eb29(0xa76);},VisuMZ['BattleCore']['Sprite_Battler_update']=Sprite_Battler['prototype'][_0x397c95(0x76c)],Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x76c)]=function(){const _0x3c89c4=_0x397c95;VisuMZ['BattleCore'][_0x3c89c4(0xbbd)]['call'](this),!this[_0x3c89c4(0xcfb)]&&this[_0x3c89c4(0x1f5)]&&(this[_0x3c89c4(0x1f5)][_0x3c89c4(0x3d2)]=![]);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xcf6)]=Sprite_Battler['prototype']['updateMain'],Sprite_Battler['prototype'][_0x397c95(0x34c)]=function(){const _0x2037d1=_0x397c95;this[_0x2037d1(0xa67)](),this['updateSkew'](),this['updateSpin'](),this[_0x2037d1(0x6b2)](),VisuMZ[_0x2037d1(0x1f3)][_0x2037d1(0xcf6)][_0x2037d1(0x6a3)](this),this[_0x2037d1(0x1fd)](),this['updateShakeFlinch']();if(this[_0x2037d1(0x32a)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x397c95(0x1f3)]['Sprite_Battler_updatePosition']=Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x209)],Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x209)]=function(){const _0xe175af=_0x397c95;this[_0xe175af(0x602)](),VisuMZ['BattleCore']['Sprite_Battler_updatePosition'][_0xe175af(0x6a3)](this),this[_0xe175af(0x341)](),this[_0xe175af(0x211)]();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x1c6)]=function(){const _0x4f310c=_0x397c95,_0x251335=this['mainSprite']();if(this[_0x4f310c(0xcfb)][_0x4f310c(0x46a)]())_0x4f310c(0x6dd)!==_0x4f310c(0xa1c)?(this[_0x4f310c(0xb74)]++,Graphics['frameCount']%0x1e<0xf?_0x251335[_0x4f310c(0x93e)]([0xff,0xff,0xff,0x40]):_0x251335[_0x4f310c(0x93e)]([0x0,0x0,0x0,0x0])):_0x718f4e[_0x4f310c(0x3b7)]([_0x4f5acd]);else this[_0x4f310c(0xb74)]>0x0&&(this[_0x4f310c(0xb74)]=0x0,_0x251335[_0x4f310c(0x93e)]([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype'][_0x397c95(0xce9)]=function(_0x36b865,_0x2f7374){const _0x23b1d6=_0x397c95,_0x2ebeb8=_0x36b865-this[_0x23b1d6(0x169)],_0x2eb6aa=_0x2f7374-this[_0x23b1d6(0x887)];this[_0x23b1d6(0x169)]=_0x36b865,this[_0x23b1d6(0x887)]=_0x2f7374,this['_offsetX']-=_0x2ebeb8,this[_0x23b1d6(0x166)]-=_0x2eb6aa,this[_0x23b1d6(0x9a0)]-=_0x2ebeb8,this[_0x23b1d6(0xbbb)]-=_0x2eb6aa,this['updatePosition']();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x32d)]=function(_0x2b75fd,_0x1b5886,_0x2df9a9,_0x1241ee){const _0x499677=_0x397c95;if(this[_0x499677(0x7ce)]!==_0x2b75fd||this[_0x499677(0xa3f)]!==_0x1b5886){if(_0x499677(0x642)!==_0x499677(0x7fa)){this['_targetHomeX']=_0x2b75fd,this[_0x499677(0xa3f)]=_0x1b5886,this[_0x499677(0x204)]=_0x2df9a9,this['_homeWholeDuration']=_0x2df9a9,this['_homeEasing']=_0x1241ee;if(_0x2df9a9<=0x0){if('UTtkP'!=='bwFEB')this[_0x499677(0x4fe)]();else return _0x34be53(_0x6e4ff7['$1'])[_0x499677(0x9af)](/[\r\n]+/);}}else _0x15e7a3[_0x499677(0x3b7)]([_0x2a3c04]);}},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x602)]=function(){const _0x58aee3=_0x397c95;if(this[_0x58aee3(0x204)]<=0x0)return;const _0x2eda88=this[_0x58aee3(0x204)],_0x4f4f0d=this[_0x58aee3(0x6b0)],_0x2697f3=this[_0x58aee3(0xa84)];Imported['VisuMZ_0_CoreEngine']?_0x58aee3(0x781)==='wrSxu'?_0x49d72e['performAttackSlot'](_0x2e58d6(_0x1f8646['$1'])):(this['_homeX']=this[_0x58aee3(0x3aa)](this[_0x58aee3(0x169)],this['_targetHomeX'],_0x2eda88,_0x4f4f0d,_0x2697f3),this[_0x58aee3(0x887)]=this['applyEasing'](this[_0x58aee3(0x887)],this[_0x58aee3(0xa3f)],_0x2eda88,_0x4f4f0d,_0x2697f3)):(this[_0x58aee3(0x169)]=(this['_homeX']*(_0x2eda88-0x1)+this[_0x58aee3(0x7ce)])/_0x2eda88,this[_0x58aee3(0x887)]=(this[_0x58aee3(0x887)]*(_0x2eda88-0x1)+this[_0x58aee3(0xa3f)])/_0x2eda88);this[_0x58aee3(0x204)]--;if(this[_0x58aee3(0x204)]<=0x0)this['onHomeMoveEnd']();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x4fe)]=function(){const _0x48593b=_0x397c95;this[_0x48593b(0x169)]=this[_0x48593b(0x7ce)],this[_0x48593b(0x887)]=this[_0x48593b(0xa3f)];},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x341)]=function(){const _0x499800=_0x397c95;this[_0x499800(0x4fd)]=this['x'],this[_0x499800(0x39a)]=this['y'],this[_0x499800(0x65c)](),this[_0x499800(0xad1)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x499800(0x2f6)](),this['y']+=this[_0x499800(0x9e6)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x499800(0xaee)](this['y']);},Sprite_Battler['prototype'][_0x397c95(0x837)]=function(){let _0x3a22fe=0x0;return _0x3a22fe;},Sprite_Battler['prototype'][_0x397c95(0x2f6)]=function(){const _0x4a447b=_0x397c95;let _0x10ed56=0x0;return this[_0x4a447b(0xcfb)]&&!this[_0x4a447b(0xcfb)][_0x4a447b(0xac5)]()&&(_0x10ed56-=this[_0x4a447b(0x8d0)],_0x10ed56-=this[_0x4a447b(0x88c)]),_0x10ed56;},Sprite_Battler['prototype']['extraPositionScaledY']=function(){const _0x504b00=_0x397c95;let _0x353f4f=0x0;if(this[_0x504b00(0x763)]&&this[_0x504b00(0x32a)]!==Sprite_SvEnemy){const _0x15a5d1=this[_0x504b00(0x763)][_0x504b00(0x2b2)]['y'];_0x353f4f-=(_0x15a5d1-0x1)*this[_0x504b00(0x9b1)];}return _0x353f4f;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x6b2)]=function(){const _0x5ae44c=_0x397c95,_0x200e6a=this[_0x5ae44c(0xcfb)]&&this[_0x5ae44c(0xcfb)][_0x5ae44c(0x9f0)]();this[_0x5ae44c(0x180)]=(_0x200e6a?-0x1:0x1)*Math[_0x5ae44c(0x3b1)](this['scale']['x']);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xc47)]=function(_0x481c20,_0x577894,_0x3e4dd8){const _0x3f67ce=_0x397c95;if(!this[_0x3f67ce(0xb78)]())return;if(this[_0x3f67ce(0x533)]===_0x481c20)return;this['_targetFloatHeight']=_0x481c20,this[_0x3f67ce(0x174)]=_0x577894,this[_0x3f67ce(0xc14)]=_0x577894,this['_floatEasing']=_0x3e4dd8||_0x3f67ce(0xa76);if(_0x577894<=0x0)this[_0x3f67ce(0x8d0)]=_0x481c20;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x65c)]=function(){const _0x3447e6=_0x397c95;if(this[_0x3447e6(0x174)]<=0x0)return;const _0x4197e2=this[_0x3447e6(0x174)],_0x281ecd=this[_0x3447e6(0xc14)],_0x41c5bc=this[_0x3447e6(0x5f1)];Imported[_0x3447e6(0x301)]?this[_0x3447e6(0x8d0)]=this[_0x3447e6(0x3aa)](this[_0x3447e6(0x8d0)],this['_targetFloatHeight'],_0x4197e2,_0x281ecd,_0x41c5bc):this[_0x3447e6(0x8d0)]=(this[_0x3447e6(0x8d0)]*(_0x4197e2-0x1)+this['_targetFloatHeight'])/_0x4197e2;this[_0x3447e6(0x174)]--;if(this[_0x3447e6(0x174)]<=0x0)this[_0x3447e6(0xa63)]();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xa63)]=function(){const _0xe5b473=_0x397c95;this[_0xe5b473(0x8d0)]=this[_0xe5b473(0x533)];},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x8b3)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler['prototype']['startJump']=function(_0x5ae400,_0x4b440c){const _0xc88833=_0x397c95;if(!this[_0xc88833(0xb78)]())return;if(_0x4b440c<=0x0)return;this[_0xc88833(0xa34)]=_0x5ae400,this[_0xc88833(0x179)]=_0x4b440c,this[_0xc88833(0x9dc)]=_0x4b440c;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xad1)]=function(){const _0x208abc=_0x397c95;if(this[_0x208abc(0x179)]<=0x0)return;const _0x15abff=this[_0x208abc(0x9dc)]-this[_0x208abc(0x179)],_0x1d7314=this[_0x208abc(0x9dc)]/0x2,_0x22ba23=this[_0x208abc(0xa34)],_0x437ca5=-_0x22ba23/Math[_0x208abc(0x3cd)](_0x1d7314,0x2);this['_jumpHeight']=_0x437ca5*Math['pow'](_0x15abff-_0x1d7314,0x2)+_0x22ba23,this[_0x208abc(0x179)]--;if(this['_jumpDuration']<=0x0)return this[_0x208abc(0xcc9)]();},Sprite_Battler[_0x397c95(0x6cf)]['onJumpEnd']=function(){const _0x282bca=_0x397c95;this[_0x282bca(0x88c)]=0x0;},Sprite_Battler[_0x397c95(0x6cf)]['isJumping']=function(){return this['_jumpDuration']>0x0;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x876)]=function(_0x477752,_0x15c2d6,_0x367c8b){const _0x552068=_0x397c95;if(this[_0x552068(0x1fb)]===_0x477752)return;this[_0x552068(0x1fb)]=_0x477752,this[_0x552068(0xade)]=_0x15c2d6,this[_0x552068(0xb48)]=_0x15c2d6,this['_opacityEasing']=_0x367c8b||'Linear';if(_0x15c2d6<=0x0)this['opacity']=_0x477752;},Sprite_Battler['prototype'][_0x397c95(0x211)]=function(){const _0x339baf=_0x397c95;if(this[_0x339baf(0x32a)][_0x339baf(0xa29)]==='Sprite_SvEnemy')return;if(this[_0x339baf(0xade)]<=0x0)return;const _0x4b0043=this[_0x339baf(0xade)],_0x27de2f=this[_0x339baf(0xb48)],_0x2c9e41=this['_opacityEasing'];if(Imported['VisuMZ_0_CoreEngine']){if('pNLvH'===_0x339baf(0x5b1)){if(_0x8e039b===_0xe7d555['deathStateId']()){let _0x44040d=_0x20cd43[_0x339baf(0xb19)];_0x44040d*=_0x3e18c7[_0x339baf(0x926)](_0x217955),_0x44040d*=this['subject']()[_0x339baf(0xba3)](_0x145e2b),_0x44040d*=this[_0x339baf(0x25b)](_0xe4da50),_0x4f1765[_0x339baf(0x4ce)]()<_0x44040d&&(_0x20df50[_0x339baf(0x5db)]=!![],this[_0x339baf(0x126)](_0x32746c));}}else this[_0x339baf(0x2c9)]=this[_0x339baf(0x3aa)](this[_0x339baf(0x2c9)],this[_0x339baf(0x1fb)],_0x4b0043,_0x27de2f,_0x2c9e41);}else this[_0x339baf(0x2c9)]=(this[_0x339baf(0x2c9)]*(_0x4b0043-0x1)+this[_0x339baf(0x1fb)])/_0x4b0043;this[_0x339baf(0xade)]--;if(this['_opacityDuration']<=0x0)this[_0x339baf(0xaf0)]();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xaf0)]=function(){const _0x4ae7eb=_0x397c95;this['opacity']=this[_0x4ae7eb(0x1fb)];},Sprite_Battler[_0x397c95(0x6cf)]['isChangingOpacity']=function(){const _0x372ecb=_0x397c95;return this[_0x372ecb(0xade)]>0x0;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x1eb)]=function(){const _0x458aed=_0x397c95;this[_0x458aed(0x6e4)][_0x458aed(0x3d2)]=this[_0x458aed(0xcfb)][_0x458aed(0x4a3)](),this[_0x458aed(0x45a)]();},Sprite_Battler['prototype'][_0x397c95(0x45a)]=function(){const _0x244bf0=_0x397c95;if(!this[_0x244bf0(0x6e4)])return;this['_shadowSprite']['y']=this[_0x244bf0(0x39a)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x397c95(0x8ee)]=function(){const _0x54cd09=_0x397c95;if(!this['_battler'])return;this[_0x54cd09(0x937)]=this[_0x54cd09(0xcfb)][_0x54cd09(0xbbe)](),this['_shadowScaleY']=this[_0x54cd09(0xcfb)][_0x54cd09(0x3e7)]();},Game_BattlerBase[_0x397c95(0x6cf)][_0x397c95(0xbbe)]=function(){const _0x2ad2d5=_0x397c95,_0x2fe792=this[_0x2ad2d5(0x850)]()?this['actor']():this[_0x2ad2d5(0x9ec)]();if(_0x2fe792){if(_0x2ad2d5(0x2dd)===_0x2ad2d5(0x2dd)){const _0x2e4855=_0x2fe792['note'];if(_0x2e4855[_0x2ad2d5(0xb38)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2e4855['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}else{if(_0x1681f2[_0x2ad2d5(0x939)]()){if(this[_0x2ad2d5(0xacf)]()<=0x0)return;}else{if(_0x579aab[_0x2ad2d5(0xacf)]()<=0x0)return;}}}return 0x1;},Game_BattlerBase['prototype'][_0x397c95(0x3e7)]=function(){const _0x5ad01d=_0x397c95,_0x3b2870=this[_0x5ad01d(0x850)]()?this[_0x5ad01d(0x793)]():this[_0x5ad01d(0x9ec)]();if(_0x3b2870){const _0x332c49=_0x3b2870[_0x5ad01d(0x6cc)];if(_0x332c49[_0x5ad01d(0xb38)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x332c49[_0x5ad01d(0xb38)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xa67)]=function(){const _0x228b41=_0x397c95;if(this[_0x228b41(0x32a)]===Sprite_SvEnemy)return;this[_0x228b41(0x6ff)](),this[_0x228b41(0xce2)]();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xce2)]=function(){const _0x265065=_0x397c95,_0x338a51=this[_0x265065(0x763)];_0x338a51&&('cDaKl'!==_0x265065(0x24a)?this[_0x265065(0x4da)](_0x265065(0x18a),_0x34a79b):(_0x338a51[_0x265065(0x2b2)]['x']=this[_0x265065(0x685)](),_0x338a51['scale']['y']=this[_0x265065(0x954)]()));},Sprite_Battler['prototype'][_0x397c95(0x685)]=function(){const _0x343f18=_0x397c95;let _0x21e620=0x1;return _0x21e620*=this['_flipScaleX'],_0x21e620*=this[_0x343f18(0x2df)],_0x21e620;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x954)]=function(){const _0x1e7897=_0x397c95;return 0x1*this[_0x1e7897(0x4ff)];},Sprite_Battler[_0x397c95(0x6cf)]['mainSpriteWidth']=function(){return this['width']*this['mainSpriteScaleX']();},Sprite_Battler['prototype']['mainSpriteHeight']=function(){const _0x3e65db=_0x397c95;return this['height']*this[_0x3e65db(0x954)]();},Sprite_Battler['prototype']['startGrow']=function(_0x500683,_0x1b62d4,_0x3c52d6,_0x272d3d){const _0x33a769=_0x397c95;if(!this[_0x33a769(0xb78)]())return;if(!this[_0x33a769(0x763)])return;if(this['_targetGrowX']===_0x500683&&this[_0x33a769(0x7ed)]===_0x1b62d4)return;this[_0x33a769(0x530)]=_0x500683,this[_0x33a769(0x7ed)]=_0x1b62d4,this[_0x33a769(0x9dd)]=_0x3c52d6,this[_0x33a769(0xb45)]=_0x3c52d6,this[_0x33a769(0xb92)]=_0x272d3d||_0x33a769(0xa76);if(_0x3c52d6<=0x0){if(_0x33a769(0x439)!==_0x33a769(0x871))this['_growX']=this[_0x33a769(0x530)],this[_0x33a769(0x4ff)]=this[_0x33a769(0x7ed)];else{if(!_0x19909e[_0x33a769(0x221)]())return;const _0x237282=this[_0x33a769(0x7eb)](),_0xf91f74=_0x1dcc67['battler']();if(!_0x237282||!_0xf91f74)return;const _0x339688=_0xf91f74[_0x33a769(0x4fd)],_0x4e27b8=_0xf91f74[_0x33a769(0x39a)];this[_0x33a769(0x27d)](_0x339688,_0x4e27b8,0x0,![],_0x33a769(0xa76),-0x1),_0x237282['updatePosition']();const _0x3ffd88=_0x46bf6d[_0x33a769(0x1f3)][_0x33a769(0x716)][_0x33a769(0x44c)];let _0x1be078=(_0xf91f74[_0x33a769(0x76b)]+_0x237282['width'])/0x2;_0x1be078*=this[_0x33a769(0x850)]()?0x1:-0x1;let _0x125d9e=_0x3ffd88[_0x33a769(0x147)]*(this[_0x33a769(0x850)]()?0x1:-0x1);_0xcdcaf[_0x33a769(0xcd4)](_0x1be078,_0x125d9e,0x0,![],_0x33a769(0xa76)),_0xf91f74[_0x33a769(0x209)]();}}},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x6ff)]=function(){const _0x4f6745=_0x397c95;if(this[_0x4f6745(0x9dd)]<=0x0)return;if(!this[_0x4f6745(0x763)])return;const _0x38779c=this['_growDuration'],_0x1046a8=this[_0x4f6745(0xb45)],_0x56c522=this[_0x4f6745(0xb92)];Imported[_0x4f6745(0x301)]?(this['_growX']=this[_0x4f6745(0x3aa)](this[_0x4f6745(0x2df)],this[_0x4f6745(0x530)],_0x38779c,_0x1046a8,_0x56c522),this[_0x4f6745(0x4ff)]=this[_0x4f6745(0x3aa)](this[_0x4f6745(0x4ff)],this[_0x4f6745(0x7ed)],_0x38779c,_0x1046a8,_0x56c522)):(this[_0x4f6745(0x2df)]=(this[_0x4f6745(0x2df)]*(_0x38779c-0x1)+this[_0x4f6745(0x530)])/_0x38779c,this['_growY']=(this[_0x4f6745(0x4ff)]*(_0x38779c-0x1)+this[_0x4f6745(0x7ed)])/_0x38779c);this[_0x4f6745(0x9dd)]--;if(this[_0x4f6745(0x9dd)]<=0x0)this[_0x4f6745(0xa36)]();},Sprite_Battler['prototype'][_0x397c95(0xa36)]=function(){const _0x4b9bde=_0x397c95;this[_0x4b9bde(0x2df)]=this[_0x4b9bde(0x530)],this[_0x4b9bde(0x4ff)]=this['_targetGrowY'];},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x9c8)]=function(){const _0x367a89=_0x397c95;return this[_0x367a89(0x9dd)]>0x0;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xb8b)]=function(_0x42b881,_0x2ab94b,_0x2480b4,_0x22a85c){const _0x38308d=_0x397c95;if(!this[_0x38308d(0xb78)]())return;if(!this[_0x38308d(0x763)])return;if(this[_0x38308d(0x99f)]===_0x42b881&&this[_0x38308d(0x3f8)]===_0x2ab94b)return;this[_0x38308d(0x99f)]=_0x42b881,this['_targetSkewY']=_0x2ab94b,this[_0x38308d(0x4fa)]=_0x2480b4,this[_0x38308d(0x320)]=_0x2480b4,this[_0x38308d(0x4b6)]=_0x22a85c||_0x38308d(0xa76),_0x2480b4<=0x0&&(this['_distortionSprite'][_0x38308d(0x81d)]['x']=this['_targetSkewX'],this[_0x38308d(0x763)][_0x38308d(0x81d)]['y']=this[_0x38308d(0x3f8)]);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xb9b)]=function(){const _0x2142d7=_0x397c95;if(this['_skewDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x482e5b=this[_0x2142d7(0x4fa)],_0x3290b8=this[_0x2142d7(0x320)],_0x1e0064=this[_0x2142d7(0x4b6)],_0x1f1e4c=this[_0x2142d7(0x763)];Imported['VisuMZ_0_CoreEngine']?_0x2142d7(0x8d3)===_0x2142d7(0x8d3)?(_0x1f1e4c['skew']['x']=this[_0x2142d7(0x3aa)](_0x1f1e4c[_0x2142d7(0x81d)]['x'],this[_0x2142d7(0x99f)],_0x482e5b,_0x3290b8,_0x1e0064),_0x1f1e4c[_0x2142d7(0x81d)]['y']=this[_0x2142d7(0x3aa)](_0x1f1e4c[_0x2142d7(0x81d)]['y'],this['_targetSkewY'],_0x482e5b,_0x3290b8,_0x1e0064)):this['_mainSprite'][_0x2142d7(0x680)](_0x264aeb):(_0x1f1e4c[_0x2142d7(0x81d)]['x']=(_0x1f1e4c[_0x2142d7(0x81d)]['x']*(_0x482e5b-0x1)+this[_0x2142d7(0x99f)])/_0x482e5b,_0x1f1e4c[_0x2142d7(0x81d)]['y']=(_0x1f1e4c[_0x2142d7(0x81d)]['y']*(_0x482e5b-0x1)+this['_targetSkewY'])/_0x482e5b);this[_0x2142d7(0x4fa)]--;if(this['_skewDuration']<=0x0)this['onSkewEnd']();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x608)]=function(){const _0xb23886=_0x397c95;this[_0xb23886(0x763)]['skew']['x']=this[_0xb23886(0x99f)],this['_distortionSprite'][_0xb23886(0x81d)]['y']=this[_0xb23886(0x3f8)];},Sprite_Battler[_0x397c95(0x6cf)]['isSkewing']=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x235)]=function(_0xb4712e,_0xcfa193,_0x186eda,_0x299d85){const _0x3d5ac8=_0x397c95;if(!this[_0x3d5ac8(0xb78)]())return;if(!this[_0x3d5ac8(0x763)])return;if(this[_0x3d5ac8(0x15e)]===_0xb4712e)return;this[_0x3d5ac8(0x15e)]=_0xb4712e,this[_0x3d5ac8(0x717)]=_0xcfa193,this['_angleWholeDuration']=_0xcfa193,this[_0x3d5ac8(0x6ac)]=_0x186eda||'Linear',this[_0x3d5ac8(0x502)]=_0x299d85;this[_0x3d5ac8(0x502)]===undefined&&(this[_0x3d5ac8(0x502)]=!![]);if(_0xcfa193<=0x0){this['_currentAngle']=_0xb4712e;if(this[_0x3d5ac8(0x502)]){if(_0x3d5ac8(0x854)==='lqEYt')this[_0x3d5ac8(0x15e)]=0x0,this[_0x3d5ac8(0x522)]=0x0;else{if(_0x145d79[_0x3d5ac8(0x850)]()&&!_0x362f46['isSideView']())return;const _0x41494e=_0x4bbace[_0x3d5ac8(0x7eb)]();if(_0x41494e&&_0x52d792[_0x3d5ac8(0x850)]())this[_0x3d5ac8(0xc2c)][_0x3d5ac8(0x5ab)](_0x41494e);}}}},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xa21)]=function(){const _0x48c83b=_0x397c95;this[_0x48c83b(0xabd)](),this[_0x48c83b(0x718)]();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xabd)]=function(){const _0x56d975=_0x397c95;if(this[_0x56d975(0x717)]<=0x0)return;const _0x489fc7=this[_0x56d975(0x717)],_0x10fdb4=this[_0x56d975(0x606)],_0x459067=this['_angleEasing'];Imported[_0x56d975(0x301)]?this[_0x56d975(0x522)]=this[_0x56d975(0x3aa)](this[_0x56d975(0x522)],this['_targetAngle'],_0x489fc7,_0x10fdb4,_0x459067):this['_currentAngle']=(this['_currentAngle']*(_0x489fc7-0x1)+this[_0x56d975(0x15e)])/_0x489fc7;this[_0x56d975(0x717)]--;if(this[_0x56d975(0x717)]<=0x0)this[_0x56d975(0x9da)]();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x9da)]=function(){const _0x4816aa=_0x397c95;this[_0x4816aa(0x522)]=this['_targetAngle'],this[_0x4816aa(0x502)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xc16)]=function(){const _0x3d38ec=_0x397c95;return this[_0x3d38ec(0x717)]>0x0;},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x718)]=function(){const _0x325454=_0x397c95;if(!this[_0x325454(0x763)])return;const _0x2fcdab=this['_currentAngle'],_0xdc6543=this[_0x325454(0x2b2)]['x'],_0x2d396d=this[_0x325454(0xcfb)][_0x325454(0x850)]()?-0x1:0x1;this[_0x325454(0x763)][_0x325454(0xacd)]=_0x2fcdab*_0xdc6543*_0x2d396d;const _0xe67437=this[_0x325454(0x763)]['scale']['y'];this[_0x325454(0x763)]['y']=this['height']*-0.5*(0x2-_0xe67437),this['_distortionSprite']['y']=Math[_0x325454(0xcad)](this[_0x325454(0x763)]['y']);const _0x5d0512=[this[_0x325454(0x263)],this[_0x325454(0x64f)],this[_0x325454(0x246)]];for(const _0x2ca0d3 of _0x5d0512){if(!_0x2ca0d3)continue;_0x2ca0d3['y']=this[_0x325454(0x9b1)]*0.5;}if(this[_0x325454(0x6e4)]){if(_0x325454(0x9ae)===_0x325454(0x9ae))this[_0x325454(0x937)]=this[_0x325454(0x937)]??0x1,this['_shadowScaleY']=this['_shadowScaleY']??0x1,this['_shadowSprite'][_0x325454(0x2b2)]['x']=this[_0x325454(0x763)][_0x325454(0x2b2)]['x']*this[_0x325454(0x937)],this[_0x325454(0x6e4)][_0x325454(0x2b2)]['y']=this[_0x325454(0x763)][_0x325454(0x2b2)]['y']*this[_0x325454(0x433)];else{if(_0x29de9d)_0x8f75dd[_0x325454(0xb97)](_0x2eb77c);}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x55f)]=Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x8fc)],Sprite_Actor['prototype']['createStateSprite']=function(){const _0x2838e5=_0x397c95;VisuMZ[_0x2838e5(0x1f3)]['Sprite_Actor_createStateSprite'][_0x2838e5(0x6a3)](this),VisuMZ['BattleCore'][_0x2838e5(0x716)][_0x2838e5(0xaef)][_0x2838e5(0x78e)]&&this[_0x2838e5(0xc03)]();},VisuMZ['BattleCore'][_0x397c95(0xaa1)]=Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x8c9)],Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x8c9)]=function(){const _0x3ddbf6=_0x397c95;VisuMZ[_0x3ddbf6(0x1f3)][_0x3ddbf6(0x716)][_0x3ddbf6(0xaef)][_0x3ddbf6(0x8bd)]&&this[_0x3ddbf6(0xc03)](),VisuMZ['BattleCore'][_0x3ddbf6(0xaa1)]['call'](this);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xc03)]=function(){const _0xa82eb3=_0x397c95;if(!ConfigManager[_0xa82eb3(0x9d5)])return;if(this[_0xa82eb3(0x32a)]===Sprite_SvEnemy)return;const _0x5b60d8=VisuMZ[_0xa82eb3(0x1f3)][_0xa82eb3(0x716)][_0xa82eb3(0xaef)],_0x122292=new Sprite_HpGauge();_0x122292['anchor']['x']=_0x5b60d8['AnchorX'],_0x122292[_0xa82eb3(0x140)]['y']=_0x5b60d8[_0xa82eb3(0x15a)],_0x122292['scale']['x']=_0x122292[_0xa82eb3(0x2b2)]['y']=_0x5b60d8['Scale'],this[_0xa82eb3(0x1f5)]=_0x122292,this[_0xa82eb3(0x5ab)](this[_0xa82eb3(0x1f5)]),Spriteset_Battle[_0xa82eb3(0x805)]&&BattleManager[_0xa82eb3(0x20d)](this[_0xa82eb3(0x1f5)]);},VisuMZ['BattleCore']['Sprite_Battler_setBattler']=Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x52a)],Sprite_Battler['prototype'][_0x397c95(0x52a)]=function(_0x2c9bd4){const _0x5988f9=_0x397c95,_0x28e075=this['_battler'];VisuMZ['BattleCore'][_0x5988f9(0x547)][_0x5988f9(0x6a3)](this,_0x2c9bd4),this[_0x5988f9(0x16d)](_0x2c9bd4);if(_0x28e075!==_0x2c9bd4)this['updateShadowScale']();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x16d)]=function(_0x585011){const _0x1494e1=_0x397c95;if(!_0x585011)return;if(!this[_0x1494e1(0x1f5)])return;if(_0x585011['isActor']()){}else{if(_0x585011[_0x1494e1(0x407)]()){if(_0x1494e1(0x707)==='MdXrN'){if(this[_0x1494e1(0x32a)]===Sprite_SvEnemy&&!_0x585011[_0x1494e1(0x4a3)]())return;}else _0x4bbe10['BattleCore'][_0x1494e1(0x80b)]['call'](this,_0x2b03f0);}}this[_0x1494e1(0x1f5)][_0x1494e1(0x74a)](_0x585011,'hp');},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x4e3)]=function(){const _0x5079e4=_0x397c95;return this[_0x5079e4(0xcfb)]&&this[_0x5079e4(0xcfb)][_0x5079e4(0x4e3)]();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x3b8)]=function(){const _0x20bd9e=_0x397c95,_0x443458=this[_0x20bd9e(0x263)]['bitmap'];if(!_0x443458)return;const _0x374271=_0x443458[_0x20bd9e(0x76b)];let _0x2b6699=_0x443458['height'];if(this[_0x20bd9e(0xcfb)][_0x20bd9e(0x88a)]()){if(this[_0x20bd9e(0x88d)])_0x2b6699=Math[_0x20bd9e(0x483)](0x0,this[_0x20bd9e(0x88d)][_0x20bd9e(0x9b1)]-0x4);}this[_0x20bd9e(0x263)][_0x20bd9e(0x71f)](0x0,0x0,_0x374271,_0x2b6699),this['setFrame'](0x0,0x0,_0x374271,_0x2b6699);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x1fd)]=function(){const _0x2b4ada=_0x397c95;if(!this[_0x2b4ada(0xcfb)])return;if(!this[_0x2b4ada(0x1f5)])return;const _0x490096=VisuMZ['BattleCore'][_0x2b4ada(0x716)][_0x2b4ada(0xaef)],_0x49cf54=this[_0x2b4ada(0x1f5)];_0x49cf54[_0x2b4ada(0x3d2)]=this['isVisualHpGaugeDisplayed']();const _0x4a2c85=_0x490096['OffsetX'],_0x399de1=_0x490096['OffsetY'];_0x49cf54['x']=_0x4a2c85,_0x49cf54['x']+=this['_battler']['battleUIOffsetX'](),_0x49cf54['y']=-this[_0x2b4ada(0x9b1)]+_0x399de1,_0x49cf54['y']+=this[_0x2b4ada(0xcfb)]['battleUIOffsetY'](),Spriteset_Battle[_0x2b4ada(0x805)]&&SceneManager[_0x2b4ada(0x6fe)][_0x2b4ada(0x69b)]&&(_0x49cf54['x']+=this['x'],_0x49cf54['y']+=this['y']);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x6a8)]=function(){const _0x17c29c=_0x397c95;if(!this[_0x17c29c(0xcfb)])return![];if(this[_0x17c29c(0xcfb)]['isActor']())return!![];if(this[_0x17c29c(0xcfb)][_0x17c29c(0xa06)]())return![];if(this[_0x17c29c(0x2c9)]<=0x0)return![];const _0x2ec1b4=this[_0x17c29c(0xcfb)][_0x17c29c(0x9ec)]()[_0x17c29c(0x6cc)];if(_0x2ec1b4['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x2ec1b4[_0x17c29c(0xb38)](/<HIDE HP GAUGE>/i))return![];const _0x3a4bda=VisuMZ[_0x17c29c(0x1f3)]['Settings'][_0x17c29c(0xaef)];if(_0x3a4bda['RequiresDefeat']){if(_0x3a4bda['BTestBypass']&&BattleManager[_0x17c29c(0x2b1)]())return!![];if(this[_0x17c29c(0xcfb)][_0x17c29c(0xd05)])return![];return this[_0x17c29c(0xcfb)][_0x17c29c(0x569)]();}return!![];},VisuMZ['BattleCore'][_0x397c95(0x4c6)]=Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x9c2)],Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x9c2)]=function(){const _0x2dab06=_0x397c95;if(!this[_0x2dab06(0xcfb)])return![];if(this[_0x2dab06(0x204)]>0x0)return!![];return VisuMZ[_0x2dab06(0x1f3)][_0x2dab06(0x4c6)][_0x2dab06(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)]['Sprite_Battler_startMove']=Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xc5f)],Sprite_Battler['prototype'][_0x397c95(0xc5f)]=function(_0x3de9a3,_0x39a713,_0x3a10eb){const _0x363c05=_0x397c95;this[_0x363c05(0xb78)]()&&(_0x363c05(0x752)===_0x363c05(0xc4b)?(_0x271d0a[_0x363c05(0x1f7)]=![],this[_0x363c05(0xae7)]()):VisuMZ[_0x363c05(0x1f3)][_0x363c05(0x128)]['call'](this,_0x3de9a3,_0x39a713,_0x3a10eb));},Sprite_Battler[_0x397c95(0x6cf)]['canMove']=function(){const _0x409e5b=_0x397c95;if(this[_0x409e5b(0xcfb)]&&this['_battler']['isDead']())return![];if(this[_0x409e5b(0xcfb)]&&!this[_0x409e5b(0xcfb)][_0x409e5b(0xc4a)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x620)]=function(){},Sprite_Battler['prototype'][_0x397c95(0x65e)]=function(){const _0x4c7a21=_0x397c95;this[_0x4c7a21(0xc5f)](0x0,0x0,0xc);},Sprite_Battler['prototype'][_0x397c95(0x9aa)]=function(){},Sprite_Battler[_0x397c95(0x6cf)]['stepFlinch']=function(){const _0x3b14a7=_0x397c95,_0x1dafc1=VisuMZ[_0x3b14a7(0x1f3)][_0x3b14a7(0x716)]['Actor'],_0x37aac3=this['_battler']&&this['_battler']['isActor']()?0x1:-0x1,_0xa38fb7=this[_0x3b14a7(0x4fd)]-this[_0x3b14a7(0x169)]+_0x37aac3*_0x1dafc1[_0x3b14a7(0xb9c)],_0x47be3e=this['_baseY']-this[_0x3b14a7(0x887)]+_0x37aac3*_0x1dafc1[_0x3b14a7(0x96d)],_0x4807eb=_0x1dafc1['FlinchDuration'];this[_0x3b14a7(0xc5f)](_0xa38fb7,_0x47be3e,_0x4807eb);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0xb7a)]=function(_0x22cf87,_0x4ab26d){const _0x4f3a5d=_0x397c95,_0x2559c3=VisuMZ[_0x4f3a5d(0x1f3)]['Settings']['Actor'];this[_0x4f3a5d(0x8c0)]=Math['ceil']((_0x2559c3[_0x4f3a5d(0x9bb)]??0x18)*_0x4ab26d),this[_0x4f3a5d(0x9b7)]=Math['max'](this[_0x4f3a5d(0x9b7)],_0x22cf87);},Sprite_Battler[_0x397c95(0x6cf)][_0x397c95(0x9e7)]=function(){const _0x212c18=_0x397c95,_0x2e4060=VisuMZ[_0x212c18(0x1f3)][_0x212c18(0x716)][_0x212c18(0xc24)];if(!(_0x2e4060[_0x212c18(0x223)]??![]))return;if(this[_0x212c18(0x8c0)]>0x0){const _0x2de368=this[_0x212c18(0x8c0)];this[_0x212c18(0x9b7)]=this[_0x212c18(0x9b7)]*(_0x2de368-0x1)/_0x2de368,this[_0x212c18(0x8c0)]--,this[_0x212c18(0x8c0)]<=0x0&&(this[_0x212c18(0x9b7)]=0x0);}if(this[_0x212c18(0x9b7)]>0x0){this[_0x212c18(0x263)]['x']=Math['randomInt'](this[_0x212c18(0x9b7)])*(Math['random']()<0.5?-0x1:0x1);if(this[_0x212c18(0x39a)]!==this['y']){if(_0x212c18(0x588)!==_0x212c18(0x588))return _0x20c657[_0x212c18(0x2e0)]()[this[_0x212c18(0x40f)]];else this[_0x212c18(0x263)]['y']=this['height']*0.5,this[_0x212c18(0x263)]['y']+=Math[_0x212c18(0x541)](this[_0x212c18(0x9b7)])*(Math[_0x212c18(0x4ce)]()<0.5?-0x1:0x1);}}else{if(_0x212c18(0x8bf)!==_0x212c18(0x199))this[_0x212c18(0x263)]['x']=0x0,this[_0x212c18(0x263)]['y']=this[_0x212c18(0x9b1)]*0.5;else{if(!_0x1233f1['isPlaytest']())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x212c18(0xbf3)]=!![];let _0x1064cc='';_0x1064cc+=_0x212c18(0x170),_0x1064cc+=_0x212c18(0x611)['format'](_0x14abe2[_0x212c18(0xa29)]),_0x20a840(_0x1064cc);}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x38f)]=Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x652)],Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x652)]=function(){const _0x4fe4af=_0x397c95;VisuMZ[_0x4fe4af(0x1f3)][_0x4fe4af(0x38f)][_0x4fe4af(0x6a3)](this),this[_0x4fe4af(0x380)]();},Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x67b)]=function(){const _0xbd59bb=_0x397c95;return this[_0xbd59bb(0x763)]||this['_mainSprite']||this;},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xb32)]=Sprite_Actor['prototype'][_0x397c95(0x867)],Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x867)]=function(){},Sprite_Actor[_0x397c95(0x6cf)]['moveToStartPositionBattleCore']=function(_0x1f1022){const _0x28466c=_0x397c95;if(SceneManager[_0x28466c(0xb64)]())return;if(!_0x1f1022)return;if(!_0x1f1022[_0x28466c(0xb78)]())return;VisuMZ['BattleCore']['Sprite_Actor_moveToStartPosition'][_0x28466c(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x4d9)]=Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x597)],Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x597)]=function(_0x5b4619){const _0x98fed3=_0x397c95;if(VisuMZ[_0x98fed3(0x1f3)][_0x98fed3(0x716)]['Actor'][_0x98fed3(0x8d8)]){if(_0x98fed3(0x3d8)!=='Ixfwv')VisuMZ['BattleCore'][_0x98fed3(0x716)][_0x98fed3(0xc24)][_0x98fed3(0x8d8)][_0x98fed3(0x6a3)](this,_0x5b4619);else return _0x2ac36c['aliveMembers']()[_0x98fed3(0x742)](_0x5e1192=>_0x5e1192!==_0xeb7307);}else VisuMZ['BattleCore']['Sprite_Actor_setActorHome']['call'](this,_0x5b4619);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xc86)]=Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x52a)],Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x52a)]=function(_0x5a7ab0){const _0x4f43d8=_0x397c95;VisuMZ[_0x4f43d8(0x1f3)][_0x4f43d8(0xc86)][_0x4f43d8(0x6a3)](this,_0x5a7ab0),this['setBattlerBattleCore'](_0x5a7ab0);},Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0xaed)]=function(_0x5922ad){const _0x433b92=_0x397c95;if(!_0x5922ad)return;if(!this[_0x433b92(0x263)])return;this[_0x433b92(0x263)][_0x433b92(0x140)]['x']=this[_0x433b92(0x347)][_0x433b92(0x678)](),this[_0x433b92(0x263)][_0x433b92(0x140)]['y']=this[_0x433b92(0x347)]['svBattlerAnchorY'](),this['updateShadowVisibility']();},VisuMZ[_0x397c95(0x1f3)]['Sprite_Actor_update']=Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x76c)],Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x76c)]=function(){const _0x48f318=_0x397c95;VisuMZ['BattleCore'][_0x48f318(0xaff)][_0x48f318(0x6a3)](this),this[_0x48f318(0x347)]&&('yUUhz'===_0x48f318(0x3f3)?this[_0x48f318(0x1f6)]():(this[_0x48f318(0x50b)](),this[_0x48f318(0x98f)]()));},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x787)]=Sprite_Actor['prototype'][_0x397c95(0x75a)],Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x75a)]=function(){const _0x3696cf=_0x397c95;VisuMZ['BattleCore'][_0x3696cf(0x787)][_0x3696cf(0x6a3)](this);if(this['_mainSprite']&&this[_0x3696cf(0x263)][_0x3696cf(0x60e)]&&this[_0x3696cf(0xcfb)]){if(_0x3696cf(0xba7)===_0x3696cf(0x26f))_0x3a7d0f['setWaitMode']('cutinEnter');else{if(this['_mainSprite'][_0x3696cf(0x60e)][_0x3696cf(0x6bc)]!==this[_0x3696cf(0xcfb)][_0x3696cf(0x802)]()){if(_0x3696cf(0x2c1)===_0x3696cf(0x2c1))this[_0x3696cf(0x263)][_0x3696cf(0x60e)][_0x3696cf(0x6bc)]=this['_battler'][_0x3696cf(0x802)]();else{if(this[_0x3696cf(0x4e3)]())return;this['adjustWeaponSpriteOffset'](),this[_0x3696cf(0x796)]['setup'](_0x44dc24),this[_0x3696cf(0x347)][_0x3696cf(0xa95)]();}}}}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xb39)]=Sprite_Actor['prototype'][_0x397c95(0x1eb)],Sprite_Actor['prototype'][_0x397c95(0x1eb)]=function(){const _0x5bca00=_0x397c95;VisuMZ[_0x5bca00(0x1f3)][_0x5bca00(0xb39)][_0x5bca00(0x6a3)](this),this[_0x5bca00(0xd14)]();},Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0xd14)]=function(){const _0x30f507=_0x397c95;if(!this[_0x30f507(0x263)])return;if(!this[_0x30f507(0x6e4)])return;this['updateShadowVisibility'](),this[_0x30f507(0x45a)]();},Sprite_Actor['prototype'][_0x397c95(0x50b)]=function(){const _0x291ea9=_0x397c95;this[_0x291ea9(0xb6e)]['scale']['x']=0x1/(this[_0x291ea9(0x2b2)]['x']||0.001),this[_0x291ea9(0xb6e)][_0x291ea9(0x2b2)]['y']=0x1/(this[_0x291ea9(0x2b2)]['y']||0.001);},Sprite_Actor['prototype'][_0x397c95(0x98f)]=function(){const _0x594937=_0x397c95;if(!$gameSystem['isSideView']()&&this[_0x594937(0x32a)]===Sprite_Actor){const _0x19560d=Scene_Battle[_0x594937(0x6cf)][_0x594937(0x1b2)]();if(['default','list',_0x594937(0xab1),_0x594937(0x8fe)][_0x594937(0x932)](_0x19560d)){if(_0x594937(0xcca)===_0x594937(0xcca))this[_0x594937(0x2c9)]=0x0;else{const _0x2dee5e=_0x91e58[_0x594937(0x1f3)][_0x594937(0x716)][_0x594937(0xa1f)];_0x2dee5e['ActionCenteredName']&&this[_0x594937(0x4da)](_0x594937(0x3de),_0x594937(0x417)[_0x594937(0xadd)](_0x49f58d[_0x594937(0xc43)](_0xb1bf59)));if(_0x48a18a[_0x594937(0xcd0)](_0x412ac1)){if(_0x2dee5e[_0x594937(0x640)])this[_0x594937(0x5df)](_0x53b693[_0x594937(0x902)],_0x5b566b,_0x517661);if(_0x2dee5e[_0x594937(0x48f)])this[_0x594937(0x5df)](_0x578986[_0x594937(0xb10)],_0x29b263,_0x2a9315);}else{if(_0x2dee5e[_0x594937(0x2e1)])this[_0x594937(0x5df)](_0x3c3a03[_0x594937(0x94f)],_0x1fb3a,_0x300611);}}}}},Sprite_Actor[_0x397c95(0x6cf)]['refreshMotion']=function(){const _0x518891=_0x397c95,_0x1eee97=this[_0x518891(0x347)];if(_0x1eee97){const _0x30abf8=_0x1eee97['stateMotionIndex']();if(_0x1eee97['isInputting']()||_0x1eee97[_0x518891(0x78c)]())this[_0x518891(0x95c)]('walk');else{if(_0x30abf8===0x3)this[_0x518891(0x95c)](_0x518891(0xb3e));else{if(_0x30abf8===0x2)this[_0x518891(0x95c)](_0x518891(0x2ef));else{if(this[_0x518891(0x587)]){if('PEZRW'==='AQBVE')return _0x24bcc6['BattleCore'][_0x518891(0x716)][_0x518891(0x7c8)][_0x518891(0x938)];else this[_0x518891(0x95c)](_0x518891(0x95b));}else{if(_0x1eee97['isCharging']())this['startMotion'](_0x518891(0xbf0));else{if(_0x1eee97[_0x518891(0xadc)]())this[_0x518891(0x95c)]('chant');else{if(_0x1eee97[_0x518891(0x9a3)]()||_0x1eee97[_0x518891(0x85a)]())'aMwdY'===_0x518891(0x9a5)?(_0x5d3db8(_0x5d9951[_0x518891(0xadd)](_0x518891(0xbde))),_0x37b53d[_0x518891(0x565)]()):this[_0x518891(0x95c)]('guard');else{if(_0x30abf8===0x1)this[_0x518891(0x95c)](_0x518891(0xaa0));else{if(_0x1eee97[_0x518891(0x314)]()){if(_0x518891(0x499)!==_0x518891(0x499)){if(!_0x2b7216[_0x518891(0xd0e)])return;const _0x3bfb60=_0x590cd1[_0x518891(0x6fe)][_0x518891(0x69b)];if(!_0x3bfb60)return;if(_0x1a1c25['ActSeqImpact']['version']<=1.04){_0x45ede5(_0x518891(0xc2a)),_0x16edf7[_0x518891(0x565)]();return;}_0x4dea88['ConvertParams'](_0x71c6e,_0x3c555e);const _0x30e242=_0x1e1e6e[_0x518891(0xc5b)];_0x3bfb60['setupBlueRedInvertImpactFilter'](_0x30e242);}else this['startMotion'](_0x518891(0x980));}else{if(_0x1eee97['isUndecided']())'LYlWm'!=='LEJmk'?this[_0x518891(0x95c)](_0x518891(0x77c)):this[_0x518891(0x3d2)]=_0x6fc097[_0x518891(0x8d5)];else _0x1eee97[_0x518891(0xc76)]()?_0x518891(0x70a)!==_0x518891(0x70a)?this[_0x518891(0x93a)](_0x518891(0x36c)):this[_0x518891(0x95c)](_0x518891(0xbf0)):this[_0x518891(0x95c)](_0x518891(0x77c));}}}}}}}}}}},Sprite_Actor['prototype'][_0x397c95(0x9aa)]=function(){const _0x2cbde0=0xa,_0x1820b9=0x12c*_0x2cbde0,_0x44df18=0x1e*_0x2cbde0;this['startMove'](_0x1820b9,0x0,_0x44df18);},Sprite_Actor[_0x397c95(0x6cf)]['onMoveEnd']=function(){const _0x47efdc=_0x397c95;Sprite_Battler['prototype'][_0x47efdc(0x5fc)][_0x47efdc(0x6a3)](this);},Sprite_Actor[_0x397c95(0x6cf)]['motionSpeed']=function(){const _0x8c693d=_0x397c95;return Sprite_Battler[_0x8c693d(0xb29)];},Sprite_Weapon[_0x397c95(0x6cf)][_0x397c95(0x4ba)]=function(){const _0x298cf7=_0x397c95;return Sprite_Battler[_0x298cf7(0xb29)];},Sprite_Actor['prototype'][_0x397c95(0xccb)]=function(){},Sprite_Actor[_0x397c95(0x6cf)]['setupWeaponAnimation']=function(){},Sprite_Actor['prototype'][_0x397c95(0x986)]=function(){const _0xf08090=_0x397c95;if(this[_0xf08090(0xb0e)]&&++this[_0xf08090(0x23a)]>=this[_0xf08090(0x416)]()){if(_0xf08090(0x1a2)!=='FkBtN'){if(this['_motion'][_0xf08090(0x601)])this[_0xf08090(0x791)]=(this[_0xf08090(0x791)]+0x1)%0x4;else this['_pattern']<0x2?this[_0xf08090(0x791)]++:this[_0xf08090(0x840)]();this[_0xf08090(0x23a)]=0x0;}else{if(!_0x19e328[_0xf08090(0x221)]())return![];return![];}}},Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x57c)]=function(_0x501ff5){const _0x20abd3=_0x397c95;if(_0x501ff5===_0x20abd3(0x6d6))this['_checkOn']=!![];if(this[_0x20abd3(0xcfb)]&&this[_0x20abd3(0xcfb)][_0x20abd3(0x88a)]()){if('OpWXL'===_0x20abd3(0xac9)){this[_0x20abd3(0xb0e)]=Sprite_Actor[_0x20abd3(0xb04)][_0x20abd3(0xb3e)];return;}else{const _0x5c0694=this['_actor'][_0x20abd3(0x4ea)]();if(_0x5c0694){const _0x1bd528=this[_0x20abd3(0xbfb)]('skill',_0x5c0694[_0x20abd3(0xcc3)]);this[_0x20abd3(0xb89)](_0x1bd528||0x0);}}}const _0x46ff90=Sprite_Actor[_0x20abd3(0xb04)][_0x501ff5];this[_0x20abd3(0xb0e)]=_0x46ff90,this[_0x20abd3(0x23a)]=0x0,this[_0x20abd3(0x791)]=0x0;},Sprite_Actor[_0x397c95(0x6cf)]['forceWeaponAnimation']=function(_0x433614){const _0x13385f=_0x397c95;if(this[_0x13385f(0x4e3)]())return;this[_0x13385f(0x37c)](),this['_weaponSprite']['setup'](_0x433614),this[_0x13385f(0x347)]['clearWeaponAnimation']();},Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x37c)]=function(){const _0x30aac2=_0x397c95;let _0x3da2a2=-0x10,_0x2253fb=this[_0x30aac2(0x9b1)]*0.5;const _0x39286a=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x362cba=this['_battler'][_0x30aac2(0xa9d)]()['map'](_0x56d03f=>_0x56d03f&&_0x56d03f[_0x30aac2(0x6cc)][_0x30aac2(0xb38)](_0x39286a)?Number(RegExp['$1']):0x0),_0x3e3bba=this[_0x30aac2(0xcfb)][_0x30aac2(0xa9d)]()[_0x30aac2(0xb9a)](_0x566640=>_0x566640&&_0x566640['note']['match'](_0x39286a)?Number(RegExp['$2']):0x0);_0x3da2a2=_0x362cba['reduce']((_0x3931d0,_0x519bfe)=>_0x3931d0+_0x519bfe,_0x3da2a2),_0x2253fb=_0x3e3bba[_0x30aac2(0x2b9)]((_0x2fcd32,_0x23814d)=>_0x2fcd32+_0x23814d,_0x2253fb),this[_0x30aac2(0x796)]['x']=_0x3da2a2,this[_0x30aac2(0x796)]['y']=_0x2253fb,this[_0x30aac2(0x796)][_0x30aac2(0x76c)]();},Sprite_Weapon[_0x397c95(0x6cf)][_0x397c95(0x74a)]=function(_0x29e2ce){const _0x63089d=_0x397c95;this['_weaponImageId']=_0x29e2ce,this[_0x63089d(0x445)]=-0x1,this[_0x63089d(0x791)]=0x0,this[_0x63089d(0xa31)](),this['updateFrame']();},Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x998)]=function(){},Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x620)]=function(){const _0x323574=_0x397c95,_0x3b7089=VisuMZ[_0x323574(0x1f3)][_0x323574(0x716)][_0x323574(0x44c)],_0x50c110=_0x3b7089['StepDistanceX'],_0xa81a=_0x3b7089['StepDistanceY'],_0x159bd6=_0x3b7089[_0x323574(0x4d1)];this[_0x323574(0xc5f)](-_0x50c110,-_0xa81a,_0x159bd6);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x60b)]=Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0xb14)],Sprite_Actor[_0x397c95(0x6cf)]['updateFrame']=function(){const _0x1cb55a=_0x397c95;if(this['hasStaticSvBattler']())this[_0x1cb55a(0x3b8)]();else{if(_0x1cb55a(0xbae)==='XvMXq'){if(this[_0x1cb55a(0x6ef)]()!=='')return this[_0x1cb55a(0x6ef)]();else{if(_0x5cb66d[_0x1cb55a(0x24f)]&&this[_0x1cb55a(0xa20)]()!=='')return this['getMenuImage']();}return'';}else this[_0x1cb55a(0x2dc)](),VisuMZ[_0x1cb55a(0x1f3)][_0x1cb55a(0x60b)]['call'](this);}},Sprite_Actor[_0x397c95(0x6cf)][_0x397c95(0x2dc)]=function(){const _0x31dfe8=_0x397c95;if(this[_0x31dfe8(0xcfb)]&&this[_0x31dfe8(0xcfb)][_0x31dfe8(0xc30)]){const _0x2abb8d=this[_0x31dfe8(0xcfb)]['_freezeMotionData'];this['_motion']=Sprite_Actor[_0x31dfe8(0xb04)][_0x2abb8d[_0x31dfe8(0x2b8)]],this[_0x31dfe8(0x791)]=_0x2abb8d[_0x31dfe8(0x420)];const _0x2ad02d=this[_0x31dfe8(0x796)];_0x2ad02d[_0x31dfe8(0x564)](_0x2abb8d['weaponImageId'],_0x2abb8d['pattern']),this[_0x31dfe8(0x37c)]();}},Sprite_Weapon[_0x397c95(0x6cf)][_0x397c95(0x564)]=function(_0x1da225,_0x93ebc8){const _0x4150d0=_0x397c95;this[_0x4150d0(0x6a7)]=_0x1da225,this['_animationCount']=-Infinity,this[_0x4150d0(0x791)]=_0x93ebc8,this[_0x4150d0(0xa31)](),this[_0x4150d0(0xb14)]();},Sprite_Enemy['prototype'][_0x397c95(0x652)]=function(){const _0xf4c78c=_0x397c95;Sprite_Battler[_0xf4c78c(0x6cf)][_0xf4c78c(0x652)][_0xf4c78c(0x6a3)](this),this['_enemy']=null,this['_appeared']=![],this['_battlerName']='',this[_0xf4c78c(0x1fa)]=0x0,this[_0xf4c78c(0x44a)]=null,this[_0xf4c78c(0x594)]=0x0,this[_0xf4c78c(0x5da)]=0x0,this[_0xf4c78c(0x5ed)](),this[_0xf4c78c(0x8c9)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x367)]=Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x76c)],Sprite_Enemy['prototype'][_0x397c95(0x76c)]=function(){const _0x2a7484=_0x397c95;VisuMZ['BattleCore'][_0x2a7484(0x367)]['call'](this),this['updateShadowVisibility']();},Sprite_Enemy['prototype'][_0x397c95(0x5ed)]=function(){const _0x50b6f0=_0x397c95;this['_mainSprite']=new Sprite(),this[_0x50b6f0(0x263)]['anchor']['x']=0.5,this[_0x50b6f0(0x263)]['anchor']['y']=0x1,this[_0x50b6f0(0x5ab)](this[_0x50b6f0(0x263)]),this[_0x50b6f0(0x380)]();},Sprite_Enemy['prototype'][_0x397c95(0x67b)]=function(){const _0x56a6b6=_0x397c95;return this[_0x56a6b6(0x763)]||this[_0x56a6b6(0x263)]||this;},Sprite_Enemy[_0x397c95(0x6cf)]['loadBitmap']=function(_0x55f2d7){const _0x1e0f02=_0x397c95;this[_0x1e0f02(0x60e)]=new Bitmap(0x1,0x1);if(this[_0x1e0f02(0x4a3)]()){if(_0x1e0f02(0x86c)!==_0x1e0f02(0x86c)){_0x1567a5['BattleCore'][_0x1e0f02(0x3fd)]['call'](this,_0x415325);if(!_0x1be365[_0x1e0f02(0x9a3)]()){const _0x5bfb75=this[_0x1e0f02(0x7eb)]();_0x5bfb75&&_0x5bfb75['stepForward']();}this[_0x1e0f02(0x8d2)](![]);}else{const _0x1a8bec=this[_0x1e0f02(0xa08)][_0x1e0f02(0x3cf)]();this[_0x1e0f02(0x60e)]=new Bitmap(_0x1a8bec[_0x1e0f02(0x76b)],_0x1a8bec[_0x1e0f02(0x9b1)]),this[_0x1e0f02(0x263)][_0x1e0f02(0x60e)]=new Bitmap(0x1,0x1);}}else{if($gameSystem[_0x1e0f02(0x221)]()){const _0x1f77ce=ImageManager['loadSvEnemy'](_0x55f2d7);_0x1f77ce[_0x1e0f02(0xb7c)](this[_0x1e0f02(0x941)]['bind'](this,_0x1f77ce));}else{if(_0x1e0f02(0x1be)!==_0x1e0f02(0x558)){const _0x25cee3=ImageManager[_0x1e0f02(0x371)](_0x55f2d7);_0x25cee3['addLoadListener'](this['onStaticEnemyBitmapLoad'][_0x1e0f02(0x16e)](this,_0x25cee3));}else{let _0x27aa00=_0x427095(_0x4fc1c0['$1']);while(_0x27aa00--){_0xae90f[_0x1e0f02(0x4da)](this[_0x1e0f02(0x154)]()['trueRandomTarget']());}return this[_0x1e0f02(0x54f)](_0x140979);}}}},Sprite_Enemy[_0x397c95(0x6cf)]['onStaticEnemyBitmapLoad']=function(_0x5d1398){const _0x1f9e2c=_0x397c95;this[_0x1f9e2c(0x263)]['bitmap']=_0x5d1398,this[_0x1f9e2c(0x60e)]=new Bitmap(_0x5d1398['width'],_0x5d1398[_0x1f9e2c(0x9b1)]);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x71b)]=Sprite_Enemy['prototype'][_0x397c95(0x680)],Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x680)]=function(_0x5c15f6){const _0x3e0b9d=_0x397c95;this[_0x3e0b9d(0x263)]&&this[_0x3e0b9d(0x263)][_0x3e0b9d(0x680)](_0x5c15f6);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xb08)]=Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0xc63)],Sprite_Enemy['prototype'][_0x397c95(0xc63)]=function(){const _0x34e47f=_0x397c95;if(this[_0x34e47f(0x674)]()){if(_0x34e47f(0x7dc)==='CuSMV')VisuMZ[_0x34e47f(0x1f3)][_0x34e47f(0xb08)][_0x34e47f(0x6a3)](this);else return![];}else{if(_0x34e47f(0xc04)===_0x34e47f(0xc04))this[_0x34e47f(0x98e)]=!this[_0x34e47f(0xa08)][_0x34e47f(0xa06)](),!this[_0x34e47f(0x98e)]&&(this[_0x34e47f(0x2c9)]=0x0);else return _0x5d76c4(_0x13f637['$1'])||0x0;}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xb46)]=Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x274)],Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x274)]=function(){const _0x310bbc=_0x397c95;if(this[_0x310bbc(0x674)]())VisuMZ['BattleCore'][_0x310bbc(0xb46)][_0x310bbc(0x6a3)](this);},Sprite_Enemy['prototype'][_0x397c95(0xb14)]=function(){const _0x57c7e8=_0x397c95;Sprite_Battler[_0x57c7e8(0x6cf)]['updateFrame'][_0x57c7e8(0x6a3)](this);const _0x26487a=this['mainSprite']()||this;if(!_0x26487a)return;if(!_0x26487a[_0x57c7e8(0x60e)]){if(_0x57c7e8(0x7df)===_0x57c7e8(0x7df))_0x26487a['bitmap']=new Bitmap(this[_0x57c7e8(0x76b)],this[_0x57c7e8(0x9b1)]);else{const _0xad9374=_0x4732b7[_0x57c7e8(0x483)](this[_0x57c7e8(0x677)](),_0x434301['iconHeight']),_0x4f80e9=_0x417650['floor'](_0xad9374*0x1e),_0x3571ee=this[_0x57c7e8(0x8e7)](_0x4f80e9,_0xad9374),_0x1e450f=_0x4f29f8[_0x57c7e8(0x8f5)]/0x2,_0xde1d5=_0x3571ee[_0x57c7e8(0x60e)][_0x57c7e8(0x9f1)](_0x59fd9c+'\x20');_0x3571ee[_0x57c7e8(0x60e)][_0x57c7e8(0x7ab)]=_0x43e5ef[_0x57c7e8(0x662)](_0x260767[_0x57c7e8(0x7ab)]),_0x3571ee[_0x57c7e8(0x60e)][_0x57c7e8(0x7af)](_0x4a3c7f,_0x1e450f,0x0,_0x4f80e9-_0x1e450f,_0xad9374,_0x57c7e8(0x971));const _0x1947ab=_0x1d9bbf[_0x57c7e8(0x403)]((_0xad9374-_0x1c6f26[_0x57c7e8(0xb8f)])/0x2),_0x44b753=_0x4f80e9/0x2-_0x3056af[_0x57c7e8(0x8f5)]-_0xde1d5/0x2+_0x1e450f/0x2,_0x477c94=_0x5da54a[_0x57c7e8(0x28b)](_0x57c7e8(0x3a1)),_0x95afe8=_0xd1fefd[_0x57c7e8(0x8f5)],_0x124a0f=_0x4b496f[_0x57c7e8(0xb8f)],_0x140990=_0x3f6a65%0x10*_0x95afe8,_0x3f714c=_0x9e3b9b[_0x57c7e8(0xaee)](_0x3494f5/0x10)*_0x124a0f;_0x3571ee['bitmap'][_0x57c7e8(0x8cc)](_0x477c94,_0x140990,_0x3f714c,_0x95afe8,_0x124a0f,_0x44b753,_0x1947ab),this[_0x57c7e8(0x2ad)]=_0x1fa592[_0x57c7e8(0x8a2)]||[0x0,0x0,0x0,0x0],this[_0x57c7e8(0x2ad)]=_0x1a6e71[_0x57c7e8(0x49d)](this[_0x57c7e8(0x2ad)]),this[_0x57c7e8(0x5fa)]=_0x511a3f[_0x57c7e8(0x814)]||0x0,_0x3571ee['dy']=0x0;}}if(this['_effectType']===_0x57c7e8(0x3c7))this[_0x57c7e8(0x263)][_0x57c7e8(0x71f)](0x0,0x0,this[_0x57c7e8(0x263)][_0x57c7e8(0x76b)],this[_0x57c7e8(0x594)]);else{if(_0x57c7e8(0xb44)===_0x57c7e8(0xb44))_0x26487a[_0x57c7e8(0x71f)](0x0,0x0,_0x26487a[_0x57c7e8(0x60e)][_0x57c7e8(0x76b)],this[_0x57c7e8(0x60e)][_0x57c7e8(0x9b1)]);else return[_0x348a78][_0x57c7e8(0x900)](_0x5b9666);}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x3a2)]=Sprite_Enemy[_0x397c95(0x6cf)]['updateBossCollapse'],Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0xcb2)]=function(){const _0x2a894d=_0x397c95;if(this[_0x2a894d(0x674)]())VisuMZ[_0x2a894d(0x1f3)][_0x2a894d(0x3a2)][_0x2a894d(0x6a3)](this);},Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x9c2)]=function(){const _0x17f669=_0x397c95;return Sprite_Battler[_0x17f669(0x6cf)]['isMoving'][_0x17f669(0x6a3)](this);},VisuMZ['BattleCore'][_0x397c95(0x9b3)]=Sprite_Enemy['prototype'][_0x397c95(0x50b)],Sprite_Enemy['prototype']['updateStateSprite']=function(){const _0x51289a=_0x397c95;VisuMZ[_0x51289a(0x1f3)][_0x51289a(0x9b3)][_0x51289a(0x6a3)](this),this[_0x51289a(0x5e7)]();},Sprite_Enemy['prototype'][_0x397c95(0x5e7)]=function(){const _0x4d7f83=_0x397c95,_0x489a40=VisuMZ[_0x4d7f83(0x1f3)][_0x4d7f83(0x716)][_0x4d7f83(0x7de)];if(_0x489a40[_0x4d7f83(0x3a4)]&&!_0x489a40[_0x4d7f83(0x655)]){if(_0x4d7f83(0xad5)!==_0x4d7f83(0xad5))this[_0x4d7f83(0x263)]&&this[_0x4d7f83(0x263)]['setHue'](_0x281a2e);else{this[_0x4d7f83(0x94e)]['opacity']=0x0;return;}}this[_0x4d7f83(0x94e)]['x']=0x0,this[_0x4d7f83(0x94e)]['x']+=this['_battler'][_0x4d7f83(0xd01)](),this[_0x4d7f83(0x94e)]['y']=-this[_0x4d7f83(0x60e)]['height']-this[_0x4d7f83(0x94e)][_0x4d7f83(0x9b1)]-0x4,this['_stateIconSprite']['y']+=this[_0x4d7f83(0xcfb)][_0x4d7f83(0xc4d)](),this[_0x4d7f83(0x94e)][_0x4d7f83(0x2b2)]['x']=0x1/(this[_0x4d7f83(0x2b2)]['x']||0.001),this[_0x4d7f83(0x94e)][_0x4d7f83(0x2b2)]['y']=0x1/(this[_0x4d7f83(0x2b2)]['y']||0.001),this[_0x4d7f83(0x4a3)]()&&(this[_0x4d7f83(0x64f)][_0x4d7f83(0xb6e)][_0x4d7f83(0x2b2)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x4d7f83(0x64f)]['_stateSprite']['scale']['y']=0x1/(this[_0x4d7f83(0x2b2)]['y']||0.001));},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x827)]=Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x52a)],Sprite_Enemy[_0x397c95(0x6cf)]['setBattler']=function(_0x45ffa0){const _0x3e07ad=_0x397c95;VisuMZ[_0x3e07ad(0x1f3)][_0x3e07ad(0x827)]['call'](this,_0x45ffa0),this['setSvBattlerSprite'](_0x45ffa0);},Sprite_Enemy['prototype'][_0x397c95(0x70b)]=function(_0x239205){const _0x266d1a=_0x397c95;!this[_0x266d1a(0x64f)]&&(this[_0x266d1a(0x64f)]=new Sprite_SvEnemy(_0x239205),this[_0x266d1a(0x380)]()),this[_0x266d1a(0x64f)][_0x266d1a(0x52a)](_0x239205);},Sprite_Enemy['prototype'][_0x397c95(0x4a3)]=function(){const _0x21913d=_0x397c95;return this[_0x21913d(0xa08)]&&this[_0x21913d(0xa08)][_0x21913d(0x4a3)]();},Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x674)]=function(){const _0x36eb75=_0x397c95;if(this['hasSvBattler']()){if(_0x36eb75(0x355)!==_0x36eb75(0x355))this[_0x36eb75(0xcfe)]['svShadow']=!![];else return this[_0x36eb75(0xa08)]['allowCollapse']();}else{if(_0x36eb75(0x5d4)!=='MdGAn'){if(!_0x1d951f['isSceneBattle']())return;const _0x45331d=_0x36b39d['getLastPluginCommandInterpreter']();if(!_0x45331d)return;_0x45331d[_0x36eb75(0x2b3)]('battleSpin');}else return!![];}},Sprite_Enemy['prototype']['refreshMotion']=function(){const _0xb7be95=_0x397c95;this['hasSvBattler']()&&this['_svBattlerSprite'][_0xb7be95(0x840)]();},Sprite_Enemy['prototype'][_0x397c95(0x57c)]=function(_0x363f2e){const _0x435680=_0x397c95;if(this[_0x435680(0x4a3)]())this[_0x435680(0x64f)]['forceMotion'](_0x363f2e);},Sprite_Enemy['prototype'][_0x397c95(0x6b4)]=function(_0x163b40){const _0x3eb3b3=_0x397c95;if(this['hasSvBattler']())this[_0x3eb3b3(0x64f)][_0x3eb3b3(0x6b4)](_0x163b40);},Sprite_Enemy[_0x397c95(0x6cf)][_0x397c95(0x620)]=function(){const _0x4148e5=_0x397c95,_0x4118cd=VisuMZ['BattleCore'][_0x4148e5(0x716)][_0x4148e5(0x44c)],_0x7ad626=_0x4118cd[_0x4148e5(0x5a6)],_0x21e4b1=_0x4118cd['StepDistanceY'],_0x2c0894=_0x4118cd[_0x4148e5(0x4d1)];this['startMove'](_0x7ad626,_0x21e4b1,_0x2c0894);};function _0x5cc0(){const _0x5b0db7=['_executedValue','displayStartMessages','eQiRG','ceil','FocusX','startEnemySelection','Mute','BattleStartEvent','updateBossCollapse','setBattleCameraPoint','ActSeq_Movement_BattleStep','ActSeq_Impact_TimeScale','autoSelectPriority','JS\x20%1START\x20BATTLE','ActSeq_Movement_Skew','selectNextCommandTpb','ULdyK','tTCQF','isSkipPartyCommandWindow','QhhKk','oAMiY','selectAllEnemies','VisuMZ_2_BattleGridSystem','uOYeL','Game_BattlerBase_refresh','stypeId','isBattleFlipped','updateBattlebackBitmap','pSazM','CmdIconAutoBattle','Game_Action_isForOne','onJumpEnd','dHLsT','setupMotion','kChcf','pGdLx','TpbGaugeOffsetX','ActSeq_Impact_Oversaturate','isSkill','onEnemyOk','ActSeq_Movement_FaceDirection','VisuMZ_2_PartySystem','moveBattlerDistance','PostDamageAsUserJS','BattleAI','HelpAutoBattle','Scene_Map_initializeAfter','ActSeq_Animation_ChangeBattlePortrait','fauAI','hitIndex','waitForAnimation','FqYrD','removeImmortal','OwWqk','battleback2Name','_skillWindow','finalizeScale','needsSelectionBattleCore','allowRandomSpeed','timeScale','ZOEhd','Game_Interpreter_terminate','user','silentHomeMove','getAttackMotion','troop','applyData','adjustPosition_ScaleToFit','CheckMapBattleEventValid','_skewX','DOimj','NXEYb','mFZVB','resizeWindowBorderStyle','isQueueOptionsMenu','StatusWindowAttachmentFront','Sprite_Battler_updateMain','updateBorderStyle','Game_Action_applyGlobal','windowPadding','waitForFloat','_battler','vRCmE','EscapeFailureJS','_cache','ActSeq_Animation_ShowAnimation','AutoMeleeAoE','battleUIOffsetX','_cancelButton','OffsetY','_lastPluginCommandInterpreter','_visualHpGauge_JustDied','loadSvEnemy','setActionState','traitSet','ShmUn','Window_BattleStatus_initialize','battleSpin','eRHDv','isAnyoneSpinning','VisuMZ_3_ActSeqImpact','clearElementChanges','finishActionSet','lBkfb','LastSelected','updatePointAnimations','updateShadowBattleCore','HitRate','isSubjectValidForAnyoneSelect','effect','bNBnh','jxAwc','makeSuccess','_subject','Sprite_Battler_startMove','isForDeadFriend','vQsZN','parallaxScrollYinvertEnemy','All\x20Enemies','_tempBattler','battlerKey','CommonEventID','isBattleCoreTargetScope','portraitType','BattleManager_makeActionOrders','portraitFlipVert','softDamageCap','addMeleeReturnActionSet','ShowRemovedState','Window_BattleLog_displayCritical','ActSeq_Motion_ClearFreezeFrame','isForRandomBattleCore','DzsYy','commandStyle','_waitMode','onRegeneratePlayStateAnimation','bERKK','PreRegenerateJS','anchor','_weather','BattleCmdList','rowSpacing','getAttackMotionSlot','uhkeI','optDisplayTp','StepDistanceY','removeHorrorEffect','oREuH','CreateCutinSettings','xuxtP','ActSeq_Mechanics_StbRemoveExcessActions','stop','registerCommand','innerWidth','createPartyCommandWindow','AGI','isShownOnBattlePortrait','startTpbTurn','friendsUnit','alive\x20battlers\x20not\x20user','addBuff','vertCells','Spriteset_Battle_createBattleField','ActSeq_Set_FinishAction','AnchorY','_commandNameWindow','isAnyoneMoving','Window_BattleStatus_drawItemImage','_targetAngle','clear','ActSeq_Motion_PerformAction','Point','isFriendly','shift','Sprite_AnimationMV_updatePosition','BJDoN','_offsetY','WaitComplete','currentSymbol','_homeX','hide','flipVisualCutinVert','lafNN','setupHpGaugeSprite','bind','jvjMX','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','BattleManager_onEscapeSuccess','ConfigManager_applyData','processOk','_floatDuration','QvHrA','ActorOffsetX','FaceAway','isHiddenSkill','_jumpDuration','checkTpbInputClose','VtkFy','adjustFlippedBattlefield','TayUI','moveBattlerHomeToPoint','eDIPm','_flipScaleX','isSTB','createBattleUIOffsetY','_action','EscapeFail','addGeneralOptions','HelpFight','length','ParseArmorNotetags','PopupShiftY','performMagicEvasion','windowAreaHeight','slices','NSmAK','Setting','LUK','ppafy','nOVzd','_battleCoreBattleResumeAfter','mpDamage','startPartyCommandSelection','alive\x20opponents','isPlaytest','Opacity','isAtbCastingState','ztmmW','skillTypes','ActSeq_Set_WholeActionSet','OMdCE','applyForcedGameTroopSettingsBattleCore','Game_Battler_onTurnEnd','isPartyCommandWindowDisabled','PreApplyAsTargetJS','_actorCommandWindow','OmYix','Game_Map_encounterList','ActSeq_Zoom_Reset','makeUniqueNames','canAttack','Window_BattleLog_popBaseLine','criticalHitRate','refreshBattlerMotions','DamageStyles','setBattleCameraOffset','eYwJY','_onceParallelInterpreters','PostRegenerateJS','ActSeq_Cutin_WaitForExit','Sprite_Battler_damageOffsetY','ScaleY','battleLayoutStyle','selectPreviousCommand','getEnemyIdWithName','StatusWindowSelectableBackHide','actionSplicePoint','command301_PreBattleEvent','uQmej','ActSeq_Mechanics_BoostPointsChange','ShowButton','Game_Enemy_transform','ACTOR_OFFSET_Y','TpGaugeOffsetY','kvrye','placeGauge','battleCoreTpbMainPhase','isBorderPortraitSpriteVisible','targetSpritePosition','WaitForOpacity','setSubject','clearActiveWeaponSet','updateSelectionEffect','ActSeq_Mechanics_WaitForEffect','EnableSoftCap','MDF','knDgd','sGfRS','start','qFImn','trngU','drawItemImageXPStyle','anchorY','PortraitScale','szoXP','Game_BattlerBase_canGuard','qencH','QMgnA','ActSeq_Horror_NoiseCreate','gainCurrentActionsFTB','ukEjC','_baseTexture','NKuYG','ActSeq_Target_RandTarget','commandSymbol','ForceExploiter','Skill-%1-%2','WaitForSkew','MwGoq','XUvcb','_forcedHomeY','HpGaugeOffsetY','createInnerPortrait','ActSeq_Impact_ShockwavePoint','dead\x20friends','Game_Action_isForOpponent','_statusWindow','StartTurnShow','KwNQW','updateShadow','processBorderActor','PostApplyAsUserJS','CDpxN','gainHp','Txdqn','WaitForAnimation','ActSeq_Mechanics_SwapWeapon','BattleCore','ActionEnd','_hpGaugeSprite','onDisabledPartyCommandSelection','_tpbNeedsPartyCommand','Mzsxm','alive\x20enemies','_battlerHue','_targetOpacity','createDigits','updateHpGaugePosition','EVAL','icon','makeTargetSprites','_actionBattlers','ARRAYJSON','KUQdM','_homeDuration','ParseEnemyNotetags','aEYYi','deathStateId','Window_BattleEnemy_hide','updatePosition','skillId','Scene_Battle_selectNextCommand','ForceRandom','addChildToUiContainer','ShowMissEvasion','isAnyoneChangingOpacity','JArlk','updateOpacity','FoNBz','getFullActionsPTB','1473raRFPf','ActSeq_Mechanics_Collapse','isCommandEnabled','ActSeq_Mechanics_RemoveBuffDebuff','alterBreakShield','createBattleFieldBattleCore','1204036IUiFUN','Game_Troop_setup','qidmA','showPortraits','maxCols','dragonbonesData','scope','isSideView','wtypeId','ShakeFlinch','getAttackWeaponAnimationId','EtUBR','PostDamageAsTargetJS','_target','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','spinBattler','Scene_Battle_itemWindowRect','NameAlwaysSelectOnly','_battleCoreAddedElements','addBattleCoreAutoBattleStartupCommand','MP_Flat','4788568FDovrI','open','clearBattlerMotionTrailData','isAnyoneSkewing','ActSeq_Horror_Clear','HalfActions','startSpin','battleGrow','ActSeq_Impact_ShockwaveCenterTargets','skillItemWindowRectBorderStyle','_animationContainer','_motionCount','addAnimationSpriteToContainer','Game_Battler_forceAction','FollowTurn','applyGlobal','oWxjl','noise','PreDamageAsTargetJS','CMonY','ResetOffset','VWJIJ','createHelpWindowBattleCore','_dragonbonesSpriteContainer','LEZUV','invokeAction','zSBiL','cDaKl','ScaleUp','applyBattleCoreJS','getHalfActionsPTB','Game_Battler_clearDamagePopup','VisuMZ_1_MainMenuCore','VisuMZ_1_SkillsStatesCore','Game_Actor_makeActionList','bitmapHeight','setBattleSkew','isMagical','helpWindowRectBorderStyle','isStateResist','Game_Action_executeDamage','value2','innerHeight','Felac','lukEffectRate','isAutoBattleCommandEnabled','Window_BattleEnemy_show','startDamagePopup','onEscapeSuccess','adjustPosition','alive\x20enemies\x20not\x20user','clearBattleCoreData','_mainSprite','extraHeight','svShadow','Scene_Battle_onActorOk','isDTB','_itemWindow','svAnchorY','adjustPosition_1for1','VisuMZ_3_BoostAction','Scene_Map_initialize','Window_Options_statusText','_skillIDs','YAUIH','EHYfm','_makeFontNameText','ouBmS','_partyCommandWindow','updateCollapse','basicGaugesY','ActSeq_Movement_HomeMoveBy','tOFJh','AERkM','isPhysical','_lastEnemy','Window_BattleLog_performActionEnd','ActSeq_Animation_ActionAnimation','moveBattlerToPoint','Window_SkillList_maxCols','toUpperCase','reserveCommonEvent','isAlwaysHidden','_lineHeight','IXMEz','uZiWu','create','damageOffsetY','NameAlwaysVisible','lineHeight','setupFont','ZkrYs','loadSystem','_updateClientArea','loadBattleback1','JFHsa','ActSeq_Zoom_Scale','NameOffsetY','skills','YuCCO','pushBaseLine','itemHit','wAwBO','itemLineRect','isNonSubmenuCancel','drawLineText','HpGaugeOffsetX','repeats','PostEndTurnJS','kznOw','ActSeq_ChangeSkew','battleMove','resizeWindowXPStyle','Game_BattlerBase_initMembers','targetsForOpponents','ZaryE','getItemDamageAmountTextBattleCore','attackTimesAdd','battlelog','ParseItemNotetags','yduyP','ActSeq_Mechanics_ActionEffect','AddOption','OuPvA','Amp','AZDGF','_flashColor','DefeatEvent','SkillItemStandardCols','Game_Battler_performEvasion','isBattleTest','scale','setWaitMode','zwEvi','_immortal','removedStateObjects','battleStatusWindowAnimationContainer','motionType','reduce','Victory','WaitForSpin','Spriteset_Battle_createLowerLayer','replace','performCounter','svActorVertCells','clearOnceParallelInterpreters','dEFwG','drawItemStatusXPStyle','processAnimationRequests','freezeMotion','statusText','createTroopNote','CriticalHitMultiplier','dfWyf','opacity','_forActor','ShowCritical','ActSeq_Movement_HomeMoveToPoint','PIFNy','_lastActor','BravePoints','checkCacheKey','FrontViewSelect','_actorMultiTargetWindow','qKNga','drawTextTopAligned','IIKYC','setupBattleback','_doubleTouch','addSingleSkillCommands','_tpbState','DistanceY','ActSeq_Mechanics_EnemyEscape','applyFreezeMotionFrames','ZddJO','isAnyoneGrowing','_growX','members','ActionItemMsg','noSimilarSTypes','selectNextCommand','PWoMy','ActSeq_Motion_RefreshMotion','Scene_Battle_stop','setupBattlebackBattleCore','createMultiTargetWindows','isBattleMember','prepareCustomActionSequence','JcxYl','WsIVt','refresh','ActSeq_Animation_CastAnimation','sleep','ArPenFlat','fnordAddedStates','HTTrZ','JZLJK','ActSeq_Movement_WaitForSpin','prev\x20target','extraPositionY','ActSeq_Movement_MoveToPoint','wVpvD','attackStates','_helpWindow','removeDamageSprite','setVisibleUI','RaDnN','isDuringNonLoopingMotion','addBattleGridMoveCommand','yQQXs','VisuMZ_0_CoreEngine','jump','_lastHpDamage','rec','Mechanics','XOcNT','setHalfActionsPTB','left','NJynE','repositionCancelButtonBorderStyle','isBuffAffected','cbtYo','pointX','pcGzp','backColor','HelpEscape','setHelpWindow','initBattleCore','gBczq','isDying','eXWQP','NbYxX','Window_BattleLog_performCounter','updateCommandNameWindow','updateEventMain','performAttackSlot','%1-%2','_actions','Game_Action_makeDamageValueDisperse','createDamageContainer','ConvertActionSequenceTarget','_skewWholeDuration','vGnNx','ActSeq_Mechanics_VariablePopup','gkONt','canAddSkillCommand','WoOgb','playEnemyDamage','createBorderStylePortraitSprite','createCommandNameWindow','ActSeq_Movement_Scale','constructor','CreateActionSequenceTargets','JS\x20ESCAPE\x20SUCCESS','startHomeMove','isSkewing','CalcActionSpeedJS','zKZmW','partyCommandWindowRectXPStyle','ActSeq_BattleLog_PopBaseLine','ParseWeaponNotetags','nameY','PRE-','attackAnimationId1','Sprite_StateIcon_updateFrame','_eventId','subject','wholeActionSet','alive\x20enemies\x20not\x20target','inhku','currentValue','ShowAddedBuff','ALL_ACTORS','dead\x20actors','updatePositionBattleCore','ActSeq_Movement_WaitForFloat','isEffecting','6mBKpYI','startBattle','_enemyWindow','_actor','isBattleSys','collapseType','ActSeq_DB_DragonbonesMotionAni','#%1','updateMain','_enemyMultiTargetWindow','yAfKU','AutoBattleOK','sortEnemies','ActSeq_DB_DragonbonesTimeScale','commandNameWindowDrawText','duration','getCommonEventIdWithName','OTqon','_endingBattle','ActSeq_Mechanics_CustomDmgFormula','effects','Game_Battler_performDamage','UTdOB','HP_Flat','SkewX','Window_BattleActor_processTouch','VisuMZ_3_ActSeqCamera','isDisplayEmergedEnemies','Scene_Battle_start','makeAutoBattleActions','performCollapse','attackSkillId','wRTPl','svActorHorzCells','Radius','Sprite_Enemy_update','xQlqT','VisuMZ_2_BattleSystemPTB','processExtendTroopMembers','playReflection','missile','MpGaugeOffsetX','BattleSystemSTB','XPSpriteYLocation','horzCells','loadEnemy','ActSeq_Target_PrevTarget','ActSeq_Weapon_NextActiveWeapon','VDOmz','Scene_Battle_updateBattleProcess','clearFreezeMotionForWeapons','forActor','BvORz','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','sugzP','VisuMZ_2_WeaponSwapSystem','adjustWeaponSpriteOffset','addSingleSkillCommand','vDman','rMZfb','attachSpritesToDistortionSprite','bucZR','counterAttack','_buttonText','Window_BattleLog_refresh','updateBattleProcess','autoBattleAtStart','mhp','setupRgbSplitImpactFilter','WaitCount2','Window_PartyCommand_initialize','Game_BattlerBase_canAttack','fKYJA','ADela','lRxGh','Sprite_Actor_initMembers','commandStyleCheck','Sprite_Battler_initMembers','awmRr','zXNxO','applyVariance','isForAnyone','getDualWieldTimes','CjdHU','item','TP_Flat','_baseY','CastAnimation','Scene_Map_launchBattle','umFRe','WeaponTypeID','ConfigManager_makeData','Exploited','IconSet','Sprite_Enemy_updateBossCollapse','Parse_Notetags_Action','NameAttachStateIcon','setItem','canInput','JCCOK','Dbufg','isForOpponentBattleCore','applyEasing','iconIndex','BattleManager_endAction','createString','createAutoBattleWindow','lIcZP','ShowTpDmg','abs','startAction','selectSymbol','EGGzQ','isActiveTpb','Window_ActorCommand_initialize','command119','updateStaticSvBattlerFrames','Targets','magicSkills','CriticalHitRate','hasSkill','lCfXP','inputting','options','drawEnemyName','doesPageHaveOnceParallelStart','uLBlR','putActiveBattlerOnTop','eXCxf','updateEffectsContainer','parallaxHueEnemyModifier','bossCollapse','DistanceX','addCustomCommands','processTouch','TpbActiveChangeEnabled','_performActionEnd','pow','getInputButtonString','svBattlerData','OYOZh','bitmapWidth','visible','Luhdy','yPPbX','ORaeP','addImmortal','process_VisuMZ_BattleCore_CreateRegExp','vRHsu','ysVdC','extendTroopMembers','PreStartTurnJS','MAT','log','addText','selectLast','MeleeDistance','643820rXWZyy','rznRL','canUse','updateAction','popBaseLine','ogGMx','battlerShadowScaleY','process_VisuMZ_BattleCore_DamageStyles','actorCommandWindowRect','Enemy-%1-%2','displayAction','_updateCursorFilterArea','isAutoBattle','PreEndActionJS','KaYwT','criticalDmgRate','isPreviousScene','Variable','KCwDB','ActSeq_Motion_MotionType','nzVjz','result','lzaPD','_targetSkewY','getBattlePortraitOffsetY','drawItem','ShakeFlinchPower','ZvRtx','Game_Battler_performActionStart','SvBattlerMass-%1-%2','YZdEJ','_regionBattleback2','attackAnimationId2','targetObjects','round','mdhxq','buffRemove','Gejqd','isEnemy','All\x20Allies','pointY','displayMiss','isForFriendBattleCore','portraitIndex','notFocusValid','WindowWidth','_enemyID','hardDamageCap','displayBattleCoreTransitionErrorMsg','updatePadding','disperseDamage','updateStatusWindowPosition','ext','motionSpeed','<CENTER>%1','_enemyIDs','makeBattleCommand','Game_Action_isForAliveFriend','BackColor','transform','AfWYX','setupDamagePopup','showEnemyAttackAnimation','pattern','makeTargetSelectionMoreVisible','cameraOffsetDuration','PdWsK','checkBattleEnd','cancelButtonText','MpGaugeOffsetY','freezeTime','oFwyv','collapse','ActSeq_Horror_GlitchCreate','LryqE','SlotID','ActSeq_BattleLog_AddText','AttackAnimation','StatusWindowAttachmentFrontOffsetY','PostDamage%1JS','createActorCommandWindow','currentExt','_shadowScaleY','DamageType%1','18cfMjlo','Snjnz','iconText','updateStart','HRfMz','regenerateAllBattleCore','battleStatusSprite','HOCDe','partyCommandWindowRect','command236','NsXIz','VisuMZ_3_ActiveChainSkills','ApplyImmortal','displayRemovedStates','xefrF','performAttack','_animationCount','ParseSkillNotetags','ZVvpw','setBattlerFacePoint','AsUser','_effectType','_commonEventQueue','ActionSequence','JumpToLabel','Game_Action_itemEffectAddAttackState','ZspUg','parallaxHue','autoMeleeMultiTargetActionSet','prepareBorderActor','dUNkV','drawItemStyleIcon','float','swYbB','Shadow','BattleManager_selectNextCommand','setBattleAngle','updateShadowPosition','ActSeq_Mechanics_AtbGauge','alive\x20actors\x20not\x20user','yBwgO','showNormalAnimation','Pre','Game_Interpreter_command301','Scene_Battle_createCancelButton','ActSeq_Movement_HomeReset','GZZZC','SZNWr','BattleManager_startTurn','battleSys','Game_Battler_makeSpeed','slice','dkghn','isSelected','growBattler','mSsso','YBZiy','applyArmorModifiers','processRefresh','createShadowSprite','AutoBattleRect','displayAddedStates','targetDistortionSpritePosition','attack','Game_Battler_clearMotion','Gdkli','getNextDamagePopup','preparePartyRefresh','AutoBattleCancel','gainFullActionsPTB','Game_Action_setSkill','rjlhI','isBypassDamageCap','alterChange','ActSeq_Horror_TVCreate','pSxCg','setMoveEasingType','CalcEscapeRatioJS','max','enemyNames','EnemyOffsetY','uiMenuStyle','_updateFilterArea','performDamage','isOpponent','BattleSystemBTB','isMVAnimation','closeBattleActorWindow','ShowReflect','MaxLines','ActionSkillMsg2','gainStoredBoostPoints','%1StartBattleJS','ChantStyle','ActSeq_Cutin_AddVisualCutinEffect','dvqAp','removeBuff','endBattle','surprise','BattlebackScale','eqeFR','wWrhh','addAutoBattleCommand','front\x20center','makeDeepCopy','updateWaitMode','battleEnd','makeTargetsBattleCoreJS','VTQxr','isBorderStylePortraitShown','hasSvBattler','process_VisuMZ_BattleCore_TraitObject_Notetags','Buffs','DigitGroupingDamageSprites','atbInterrupt','dWnpO','updateStateIconSprite','removeAnimationFromContainer','Reveal','yqsAt','processDefeat','qgfsO','makeActionOrders','ActSeq_Element_Clear','battleCorePreBattleCommonEvent','Game_Action_makeTargets','ROOdW','JkFjM','createBattleFieldContainer','_skewEasing','VqyGt','Targets1','selectAll','animationWait','isForAll','HZsTY','PreStartBattleJS','hue','parent','bottom','uKxVZ','arPenRate','aliveMembers','validTargets','showHelpWindow','Sprite_Battler_isMoving','Game_Party_addActor','onBattleStartBattleCore','scUot','ahVmB','getBattlerFromKey','commandNameWindowCenter','commandAutoBattle','random','%1StartActionJS','gainTp','StepDuration','wsrgc','symbol','command283','right','rKPNt','ActSeq_Inject_AnimationPauseResume','BattleSystemCTB','Sprite_Actor_setActorHome','push','VisualCutinEffect','Window_BattleLog_performActionStart','JS\x20%1START\x20TURN','isMagicSkill','ActSeq_Mechanics_BreakShieldChange','fYiWv','IIFQd','CEqGZ','hasStaticSvBattler','moveBattlerHomeDistance','vHZbD','applyTargetFilters','shouldHideBattleEndPopups','MANUAL','floatBattler','lastBattleSkill','XQtgO','itemRect','PreEndBattleJS','battleCommands','updateUiContainerPosition','some','setImmortal','_commonEventKey','clearForcedGameTroopSettingsBattleCore','_item','svBattlerAnchorY','_motionType','param','statusWindowRectDefaultStyle','BattleManager_startBattle','_skewDuration','FlashColor','KkfFi','_baseX','onHomeMoveEnd','_growY','isBattleRefreshRequested','callUpdateHelp','_angleRevertOnFinish','requestPointAnimation','openBattleActorWindow','isWaiting','Window_BattleLog_performCollapse','itemEffectAddAttackState','ATK','EndBattlePopups','Game_Battler_regenerateAll','updateStateSprite','isJumping','dVUGA','guard','numTargets','KQDfY','MotionSpeed','_targetBattlerKey','_battleCoreNoElement','ohRSC','value','autoMeleeSingleTargetActionSet','_padding','processActorCommandCancelTPB','ActSeq_Horror_TVRemove','bNUom','processVictory','isFrameVisible','weapons','CmdIconOptions','VisuMZ_2_DragonbonesUnion','getSpecificBattlerKeyTarget','cPrDm','_currentAngle','SideviewSelect','_dimmerSprite','ActSeq_BattleLog_UI','alterPriority','qEDhm','+%1','ZHENu','setBattler','_totalValue','MaLdx','-%1','setupZoomBlurImpactFilter','mpDamageFmt','_targetGrowX','battleOpacity','cLUjR','_targetFloatHeight','_waitCount','command357','_enemyNameContainer','ALL\x20SKILLS','GotjX','battleCommandIcon','maxCommands','createBattleField','commandEscape','vloki','SceneManager_push','afKiB','ueeIX','randomInt','zoomDuration','applyGlobalCommonEventNotetags','YqlFg','KpzFb','drawActorFace','Sprite_Battler_setBattler','updateVisibility','eZFOw','Scene_Battle_onEnemyOk','Window_BattleLog_performRecovery','EsztL','skill','LXwqU','repeatTargets','ActSeq_Cutin_EndVisualCutinEffectType','onBattleEnd','all\x20targets','DamageRate','parameters','GetActionSequenceSpecialTarget','SKILLS','fittingHeight','PbKJk','mainSpriteWidth','checkShowHideBattleNotetags','isTickBased','Formula','VisuMZ_3_VisualCutinEffect','substitute','Sprite_Actor_createStateSprite','SKMXx','cameraClamp','rStLn','mIlfK','freezeFrame','exit','VisuMZ_2_HorrorEffects','autoBattleStyle','SdZMi','hasBeenDefeatedBefore','ActSeq_Camera_Offset','qfPbg','Game_Action_isForAll','NewPopupBottom','ActSeq_Projectile_Picture','SgpNU','vuqAN','Game_BattlerBase_die','ylFZa','FsIAq','CmdTextAlign','gPFFr','destroy','message4','WEAPON\x20SWAP','redraw','STRUCT','Game_Action_clear','forceMotion','CmdIconFight','%1EndTurnJS','fywBB','process_VisuMZ_BattleCore_PreBattleCommonEvent','children','displaySubstitute','Override','GHeGz','NOCYU','XMfEu','forceEscapeSprite','crXZM','MP_Rate','YRpkx','cEngd','canEscape','actorCommandSingleSkill','RTXaV','UBHJR','IVYYJ','ActSeq_Inject_AnimationEnd','wcoNY','_cacheTextWidth','_effectDuration','BattleLayout','commandOptions','setActorHome','_logWindow','xPAQK','GtYVR','nJPJw','KdGcO','_battlerName','addState','thrust','battleCoreResumeLaunchBattle','HAgPH','EtpSO','_regionBattleback1','eNHam','STR','StepDistanceX','Sprite_Battler_damageOffsetX','undecided','BARE\x20HANDS','ITEM','addChild','DtVyL','setLastBattleSkill','ActSeq_Impact_ShockwaveEachTargets','updateBattlerContainer','updateBattlebackBitmap2','zFGjq','actionBattleCoreJS','updateCustomActionSequence','repositionEnemiesByResolution','1767828CPPuhY','hidden','maxItems','Game_Battler_onBattleEnd','actions','jPXZl','uxFdH','isAlwaysVisible','selectNextActor','ubSAn','Style','isTurnBased','OffsetX','setupTextPopup','startActorCommandSelection','startInput','performShakeFlinch','isCustomActionSequence','switchToWeaponType','makeActionListAutoAttack','head','battleAnimation','VisuMZ_2_BattleSystemETB','Game_Action_setSubject','textSizeEx','onEscapeFailure','PostStartActionJS','isAttack','alterActionCostPTB','findTargetSprite','MotionFrameWait','MdGAn','klvpN','ScaleToFit','TFlbV','addSkillCommands','visibilityState','_shake','_deathStateApplied','DBrin','ActSeqImpact','applyCritical','displayItemMessage','onBattleEndBattleCore','_endBattle','text\x20target','BattleManager_checkSubstitute','autoSelect','itemHeight','OqiEY','updateStateSpriteBattleCore','Targets2','cancel','frameDelay','updateCancel','cAywC','createMainSprite','waitForJump','startAttackWeaponAnimation','WnXxc','_floatEasing','auto','CastMagical','multiTargetWindowRect','State-%1-%2','focus','refreshStatusWindow','applyDamageCaps','clearTargetBattlerKey','_flashDuration','CheckVisibleSwitchNotetags','onMoveEnd','StatusWindowAttachmentBackOffsetX','TNehz','ConvertParams','Post','loop','updateHomeMove','isForAnyoneFocusOpponents','createHelpWindow','frontview_ui','_angleWholeDuration','Scene_Battle_windowAreaHeight','onSkewEnd','BaseTroopIDs','setupBlueRedInvertImpactFilter','Sprite_Actor_updateFrame','isMeleeSingleTargetAction','_additionalSprites','bitmap','CombatLogIcon','centerFrontViewSprite','\x20to\x20%1\x20midbattle.','mmp','IpKTM','lHvGU','Game_BattlerBase_addNewState','_battleCoreForcedElements','isOnCurrentMap','setupActionSet','getBattlerKeyTargets','itemEffectAddNormalState','okButtonText','setActiveWeaponSlot','displayReflectionPlayBack','needsActorInputCancel','MAICC','stepForward','EnemyOffsetX','Sprite_Damage_createChildSprite','performMoveToPoint','CriticalHitRateJS','_uiContainer','string','isClicked','updateHelp','AUula','launchBattle','DwKEE','hpHealingFmt','clearActiveWeaponSlot','ARRAYEVAL','gaugeLineHeight','return\x200','addSkillTypeCommand','Scene_Battle_startActorSelection','Defeat','_enemies','filters','ChargeRate','MAXHP','_createCursorArea','ActSeq_Weapon_SetActiveWeapon','isOpen','BattleManager_processAbort','createLowerLayer','BattleManager_startInput','isAnyProjectilePresent','fight','ActionSkillMsg1','_emptyBitmap','bXXEP','setupIconTextPopup','CriticalDmgFlat','PerformAction','createSeparateDamagePopups','padding','die','damage','NXNUx','evalDamageFormulaBattleCore','updateForceAction','setTargetBattlerKey','AjGaZ','_svBattlerSprite','isSceneBattle','setAttack','initMembers','_svBattlerData','onDatabaseLoaded','NameLegacy','TyIpO','alive\x20battlers\x20not\x20target','isTeamBased','addCommand','AUTO\x20BATTLE','DamageFlat','updateFloat','isCancelled','stepBack','alive\x20actors','itemWindowRect','_drawTextBody','getColor','text','close','code','regionId','VisuMZ_3_SideviewBattleUI','Actions','RADcq','addItemCommand','getSkillTypes','COMBAT\x20LOG','MtOhR','VfxLQ','_wtypeIDs','Sprite_Gauge_smoothness','tsxOR','Scene_Battle_partyCommandWindowRect','FruLF','allowCollapse','NPejc','addAutoBattleCommands','fontSize','svBattlerAnchorX','autoBattleStart','changeCtbCastTime','mainSprite','activate','setCursorRect','Immortal','itemEffectRecoverHp','setHue','fPCWd','BindCommonEventKeysForGroup','DamageDisplay','Scene_Battle_helpWindowRect','mainSpriteScaleX','createActionSequenceProjectile','canGuard','isSideButtonLayout','_targets','_branch','VcWhR','Exploiter','isSpriteVisible','ywcXb','Scene_ItemBase_applyItem','selectAllActors','changeCtbChargeTime','BYoqY','5495435jtwUns','createPartyCommandWindowBattleCore','inBattle','addBattleCoreAutoBattleStyleCommand','pelOB','resetFontSettings','physical','_enemyWindowMode','_spriteset','updateWeather','damageFlat','StateIconOffsetX','eWgvS','enemyId','isBreakStunned','ActSeq_Mechanics_EtbAction','call','fDGJj','<CUSTOM\x20ACTION\x20SEQUENCE>','WaitForProjectile','_weaponImageId','isVisualHpGaugeDisplayed','VariableID','drawItemImagePortraitStyle','ActSeq_BattleLog_PushBaseLine','_angleEasing','singleSkill','DefaultHardCap','Scene_Battle_createHelpWindow','_homeWholeDuration','AS\x20TARGET','updateFlip','DTB','forceWeaponAnimation','ActSeq_Movement_MoveBy','onBattleStartOnceParallels','current\x20target','TPB','sliceMax','zIzOs','fillRect','smooth','canSingleOrMultipleSelect','BattleDefeatJS','HelpSkillType','bOQbS','_armorPenetration','isATB','_forcedBattleLayout','nRiWZ','drawItemImageListStyle','top','performWeaponAnimation','position','canGuardBattleCore','command301','PortraitScaleBorderStyle','note','WaitCount1','stbGainInstant','prototype','setEventCallback','updateAttachedSprites','VNaxa','ARRAYSTR','coreEngineRepositionEnemies','iterateBattler','victory','partyCommandWindowRectBorderStyle','_enemySprites','_createClientArea','ActSeq_Horror_GlitchRemove','Window_BattleLog_performMagicEvasion','tBLXv','fiqpo','_buttonKey','%1EndActionJS','fKcUS','Game_Battler_onBattleStart','okTargetSelectionVisibility','updateRefresh','_shadowSprite','ScaleX','dXGTa','index','actorCommandEscape','Game_Action_numRepeats','HitFlat','PreDamageJS','weaponTypes','MultiTarget','setHome','getBattlePortrait','Angle','AdjustRect','isAppeared','Rwlyb','ShowRemovedBuff','_effectsContainer','ActSeq_Cutin_EndVisualCutinEffectAll','BattleEndEvent','rtelX','damageStyle','mUHKW','forceSelect','MDqmr','VisuMZ_3_BattleAI','_scene','updateGrow','ConvertCount','ActSeq_Movement_WaitForSkew','_skewY','useyO','ActSeq_Movement_WaitForScale','Window_BattleLog_clear','flipVisualCutinHorz','MdXrN','version','Scene_Battle_createActorCommandWindow','mAozO','setSvBattlerSprite','isAffectedByBreakShield','Scene_Battle_onEnemyCancel','addOptionsCommand','MvkBB','setSTBExploited','qQGdM','VarianceFormulaJS','_battleField','unchanged','aFGVF','Settings','_angleDuration','applyAngleChange','PopupDuration','show','Sprite_Enemy_setHue','fZile','HP_Rate','zWQAH','setFrame','SceneManager_isSceneChanging','_createEffectsContainer','setTroopPage','remove','changeBattlerOpacity','refreshCursor','GuardFormulaJS','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','TmIYr','EasingType','getItemDamageAmountTextOriginal','HzTUe','AsTarget','animationId','setupCriticalEffect','createMultiTargetWindow','iIkbt','turn','ActSeq_Mechanics_TextPopup','battleProjectiles','setText','ZjxXT','alterType','angleDuration','_customDamageFormula','RshyB','ActiveTpbOptionsMessage','updatePhase','cMdyr','wKDQY','MBQTF','FullActions','_commonEventIDs','Wscht','filter','setBattleZoom','Game_Action_setItem','isAutoBattleCommandAdded','animationNextDelay','ParseStateNotetags','PostApplyAsTargetJS','TextAlign','setup','CastCertain','battleCameraData','_interpreter','unshift','meetsSelectFrontviewActorConditions','cOCUy','DJsMR','AhPdk','onEncounterBattleCore','displayCurrentState','join','GroupDigits','TCqEm','targetBattlerContainerOpacity','battleSpriteSkew','updateBitmap','swing','UaIWL','helpWindowRect','weatherType','isAnyoneInjectAniPrepping','fjydv','portraitFlipHorz','Spriteset_Battle_update','_distortionSprite','FAiGX','drawItemStatusListStyle','Itrzd','isPartyTpbInputtable','stepFlinch','ActSeq_Mechanics_CtbOrder','swapEnemyIDs','width','update','regenerateAll','Scene_Battle_createPartyCommandWindow','oRceu','cEFyX','YBLyQ','inputtingAction','PrioritySortActors','action','processEnemyModeTouchBattleCore','startTurn','BIsor','STYPES','Scene_Options','attackMotions','allBattleMembers','walk','_list','TbzoX','getHardDamageCap','OffsetAdjust','coFZk','Window_BattleLog_performReflection','cmifk','isTpbCharged','Exigf','_canLose','Sprite_Actor_updateBitmap','changeInputWindow','CriticalColor','Index','_active','isActing','OtIgz','ShowActorGauge','rBZVK','displayFailure','_pattern','_namesCount','actor','FaceDirection','RUxgH','_weaponSprite','FusKa','adjustPosition_ScaleUp','pageup','finishActorInput','Scene_Battle_terminate','battleCommandName','getBattlePortraitOffsetX','MAXMP','all\x20actors','_battleLayoutStyle','BattleManager_processVictory','StartTurnWait','AnimationID','Svdwx','isAnyoneInjectAnimating','Damage','ActSeq_Set_TargetActionSet','deadMembers','oOOKS','callNextMethod','textColor','zBUVq','uqosn','RynYf','drawText','_lines','removeStatesAuto','startWeaponAnimation','PQoYt','FjMTJ','_baseLineStack','createActorCommandWindowBattleCore','Game_Temp_requestAnimation','neRRj','skewDuration','_back1Sprite','startGrow','lnFev','BattleManager_isTpbMainPhase','VisuMZ_2_BattleSystemSTB','statusWindowRectXPStyle','Game_Battler_startTpbTurn','deactivate','_damages','Game_Action_needsSelection','isEscapeCommandEnabled','drawGauge','drawItemImage','AutoNotetag','AutoBattle','YaTLk','Game_Map_battleback1Name','displayChangedStates','CNEqF','Sprite_Battleback_adjustPosition','_targetHomeX','isAnimationShownOnBattlePortrait','setHandler','WaitCount','createAttachedSprites','CCLBf','sFUQK','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','IxMhv','mgKeo','createAllWindows','DefaultDamageStyle','WaitForEffect','IconStypeMagic','CuSMV','BattleManager_onEscapeFailure','Enemy','pIrLI','_cursorSprite','list','VisuMZ_2_BattleSystemATB','PreEndTurnJS','svBattlerShadowVisible','VariableHeal','active','EscapeSuccessJS','battleInjectPrep','SkpdF','PostStartTurnJS','battler','isFTB','_targetGrowY','battleMembers','PreApply%1JS','setValue','VariableDmg','States','alive\x20opponents\x20not\x20target','_borderPortraitDuration','formula','battleFloat','cutinExit','_linkedSprite','Window_BattleLog_update','jygAR','battleEffect','Width','description','AttachStateOffsetX','sortDamageSprites','ESCAPE','setCustomDamageFormula','battlerSmoothImage','Etxak','cvjSQ','ANTI_TINT_UI','mainFontSize','isForAliveFriendBattleCore','xIpPw','callOptions','isRightInputMode','BattleManager_updatePhase','opacityStart','Window_Options_addGeneralOptions','getConfigValue','VhJRT','auuga','ActSeq_Mechanics_OtbOrder','_makeCursorAlpha','Game_Actor_equips','flashDuration','isItemCommandEnabled','isSkillItemWindowsMiddle','eraseState','clone','ActionCount','165KuinIj','oaNJr','isForOne','skew','setupMotionBlurImpactFilter','tone','createContents','performJump','Game_Map_battleback2Name','clearResult','onActorOk','BattleManager_onEncounter','uiInputPosition','Sprite_Enemy_setBattler','performTpbActiveCheckSwitch','onBattleStart','sort','battleZoom','ActSeq_ChangeAngle','yrnmT','Spriteset_Battle_updateActors','WaitForZoom','actorCommandAutoBattle','processRandomizedData','HfYKN','TiyUd','spriteId','VisuMZ_2_AggroControlSystem','gtoMc','extraPositionX','jumpBattler','PCazL','hitFlat','isOptionsCommandEnabled','ActionStart','isDebuffAffected','loadWindowskin','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','refreshMotion','vOgrh','hsdhr','Sprite_Weapon_loadBitmap','NameFontSize','isForOpponent','VisuMZ_1_ElementStatusCore','gPYht','equipSlots','Scene_Options_maxCommands','AllEnemiesText','updateEffectContainers','wFacL','preemptive','uFBNn','dKMNg','isActor','TtnFg','PJWnU','isDamagePopupRequested','lqEYt','BattleManager_inputtingAction','ezQyn','waitForEffect','jcBOV','ActSeq_Movement_HomeMoveToTarget','isGuardWaiting','removedBuffs','NbFjI','Scene_Battle_startActorCommandSelection','TkNcr','BattleManager_startAction','isActionSelectionValid','compareEnemySprite','EVMKx','Olyrc','placeStateIcon','SUkox','applyGuard','moveToStartPosition','DEKgi','custom','PreStartActionJS','_borderPortraitSprite','CIMeA','_forcedBattlers','Game_Action_isForFriend','iRPnw','isCommonEventReserved','UVGsI','createMiss','createWeather','Window_BattleLog_displayFailure','compareBattlerSprites','startOpacity','_lastAction','NameOffsetX','setEnemyWindowMode','Game_Enemy_setup','CheckSkillCommandShowSwitches','ActSeq_Movement_WaitForJump','endAction','ActSeq_Target_NextTarget','spell','setHorrorEffectSettings','createAnimationSprite','customDamageFormula','initMembersBattleCore','idthG','CurrentTurn','DoSeS','_homeY','Parse_Notetags_Targets','PVimA','isDead','ytwYJ','_jumpHeight','_frame','DefaultStyle','ACTOR_OFFSET_X','RnWsR','parseForcedGameTroopSettingsBattleCore','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','pKZfz','Feahy','sUoXU','statusWindowRectBorderStyle','Window_BattleLog_popupDamage','playOnceParallelInterpreter','_activeWeaponSlot','ZMitL','missle','Game_Map_setupBattleback','VisuMZ_4_CombatLog','createEnemyNameContainer','khWjo','removeOnceParallelInterpreter','mpHealingFmt','flashColor','placeActorName','itemCri','addChildToBack','QtvoG','TP_Rate','uBaup','performActionStart','setSkill','Slot','cSofP','TargetLocation','BattleVictoryJS','alive\x20battlers','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','VisuMZ_2_BattleSystemCTB','updateBorderSprite','isFloating','Fbupk','GELqK','playOnceParallelTroopPage','process_VisuMZ_BattleCore_BaseTroops','faceRect','TextFmt','processAbort','displayActionResults','xqOur','ShowEnemyGauge','smoothness','vSoDg','_shakeFlinchDuration','PostStartBattleJS','delay','BattleManager_endBattle','tpbActorSwitchConditionsMet','nextActiveWeaponSlot','performMiss','parse','numRepeats','createStateIconSprite','clamp','performActionEnd','blt','LCjOF','AnchorX','updateShadowVisibility','_floatHeight','performFlinch','setBattlerFlip','OCCJE','zVpMD','_autoBattle','getNextSubject','terminate','HomePosJS','changeAtbCastTime','YnkRD','SltnD','applyItem','GJsxa','1908WPPFbv','TPljc','BreakShields','process_VisuMZ_BattleCore_Action_Notetags','StartTurnMsg','Iheuf','kHoHO','agbSZ','addFightCommand','createChildSprite','createTargetsJS','updateCallMenu','HrBMn','BG_TYPE','Game_Action_itemEffectAddNormalState','PopupPosition','updateShadowScale','wzkSk','process_VisuMZ_BattleCore_CommonEventKeys','checkExtendTroopCompatibility','zRJED','WaitForFloat','offsetX','iconWidth','jkHYJ','onSelectAction','UFYQz','DefaultSoftCap','_tpbSceneChangeCacheActor','battleSkew','createStateSprite','setBattlePortrait','border','svAnchorX','concat','CreateCommonEventKeys','message1','_colorType','jsScaleDown','StateIconOffsetY','ENEMY_OFFSET_X','battleCamera','Scale','Scene_Battle_createAllWindows','currentClass','createCancelButton','ShowCounter','linkSprite','alterCost','_methods','revertTpbCachedActor','ENEMY_OFFSET_Y','getBattlerKeyTargetReplacement','hpAffected','ButtonAssist','contents','ActSeq_BattleLog_WaitForBattleLog','Scene_Battle_logWindowRect','initialize','isNextSceneBattleTransitionable','isStatusAffected','Game_Action_setGuard','battlerSprites','power','wTGoM','PgocW','createDistortionSprite','dUktW','getDamageStyle','isDeathStateAffected','Skills','xShDH','stateRate','sMwil','_damageContainer','ActSeq_BattleLog_Refresh','addDebuff','fgDYf','requestFauxAnimation','eYLPl','getTraitSetKeys','ActSeq_Mechanics_Immortal','TimeScale','QstAz','includes','CmdTextAutoBattle','animation','zzhHm','processForcedAction','_shadowScaleX','AutoBattleBgType','isTpb','requestMotion','Window_BattleActor_hide','ActSeq_Weapon_ClearActiveWeapon','zJdpd','setBlendColor','bFZnJ','Armor-%1-%2','onStaticEnemyBitmapLoad','yuwbQ','ClearBattleLog','_back2Sprite','qQFoF','addChildAt','makeData','dimColor1','autoBattleWindowRect','SmoothImage','setLastPluginCommandInterpreter','jkxcu','Window_BattleActor_show','_stateIconSprite','useItem','AggroControlSystem','ActSeq_Mechanics_DamagePopup','ActSeq_Camera_FocusTarget','drawSkillCost','mainSpriteScaleY','mYmQq','XjjFS','TFExN','CrTbq','ArPenRate','TpbGaugeOffsetY','escape','startMotion','Game_Party_removeActor','JS\x20BATTLE\x20DEFEAT','cancelActorInput','#ffffff','_preBattleCommonEvent','SvMotionIdleMass-%1-%2','battleback1Name','Window_BattleLog_displayMiss','_lastRegenFrameCount','displayCounter','Window_BattleLog_performDamage','efcMW','PostEndActionJS','AS\x20USER','textWidth','processEscape','FlinchDistanceY','MPkwo','Scene_Battle_initialize','makeHpDamageText','center','Mirror','actionEffect','YhWxj','_ptbActionCost','CmdStyle','Scene_Battle_updateStatusWindowPosition','Window_BattleLog_performAction','portraitHue','addExtendedTroopMembers','DQasj','ActSeq_Impact_ColorBreak','skillItemWindowRectMiddle','OEeLN','chantStyle','dying','ResetFocus','PartyCmd','mtSzr','setLetter','displayMpDamage','updateMotionCount','statusTextAutoBattleStyle','waitForNewLine','njEqn','ExtraSettings','compatibilityVisible','portraitFilename','fqWcX','_appeared','updateStyleOpacity','battleJump','_isBattlerFlipped','ActionCenteredName','Window_BattleEnemy_initialize','LFDeo','OWWkj','WIDTH','ActSeq_Mechanics_CtbSpeed','updateTargetPosition','updateOnceParallelInterpreters','targetActionSet','trueRandomTarget','KCOFy','applyHardDamageCap','all\x20enemies','_targetSkewX','_targetOffsetX','PLrSv','toLowerCase','isGuard','softDamageCapRate','jNfxY','visualCutinPortraitFilename','ActSeq_BattleLog_Clear','_forcedHomeX','xxyKg','retreat','eBUIn','getItemDamageAmountLabelBattleCore','OqEqt','RzSmR','split','battlerName','height','tFivk','Sprite_Enemy_updateStateSprite','makeActions','ActSeq_Impact_MotionTrailCreate','ActionAnimation','_shakeFlinchPower','rEcaX','Udmza','VisuMZ_2_BattleSystemFTB','ShakeFlinchDuration','aRMFl','Game_Interpreter_updateWaitMode','contentsOpacity','logWindowRect','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','checkSceneBattleTransitionable','isMoving','isFightCommandEnabled','onEncounter','becomeSTBExploited','createUIContainer','fTxkR','isGrowing','updateActors','popupDamage','getWtypeIdWithName','expRate','createEnemies','GGrQD','WaitForMovement','ReflectAnimation','BattleManager_initMembers','VdaqW','min','ActSeq_Movement_WaitForMovement','visualHpGauge','Destination','XPActorDefaultHeight','JS\x20%1END\x20TURN','svBattlerName','onAngleEnd','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','_jumpWholeDuration','_growDuration','isOptionsCommandAdded','_battlerKeyCache','KpzxP','endAnimation','WhDAo','lNuqI','createEffectActionSet','calcWindowHeight','extraPositionScaledY','updateShakeFlinch','updateAttachmentSprites','isForAliveFriend','_preemptive','mYgjG','enemy','11637689erTKvI','process_VisuMZ_BattleCore_Failsafes','isForAnyoneFocusFriends','isBattlerFlipped','measureTextWidth','pop','cancelTargetSelectionVisibility','partyCommandWindowRectDefaultStyle','maxTp','_requestRefresh','gradientFillRect','xSbrP','BSNFa','Scene_Battle_createEnemyWindow','_callSceneOptions','performEvasion','DzLVp','ActSeq_Target_CurrentIndex','skewBattler','iAKAp','contains','STB','autoBattleUseSkills','gQQXZ','selectedBattlers','isHidden','CmdIconEscape','_enemy','pause','save','tySXW','isETB','XPActorCommandLines','isAlive','PLwhh','BattleManager_checkBattleEnd','Window_BattleLog_performMiss','_indent','OwJij','performMoveToTargets','debuffAdd','resetResultSwitches','toString','YGZPI','iBmHl','stateMotionIndex','needsSelection','ntfgl','PostDamageJS','addEscapeCommand','BattleLog','getMenuImage','updateSpin','GUARD','createJS','checkTpbInputOpen','commandFight','ActSeq_Impact_BlueRedInvert','ebvVV','canAlterActionCostPTB','name','VisuMZ_3_ActSeqProjectiles','isAnyoneFloating','hmXWh','displayEvasion','ForceDeath','makeTargetsBattleCore','OFUFH','loadBitmap','ActorCmd','_stypeIDs','_jumpMaxHeight','GoqNG','onGrowEnd','TfxqD','gEamA','ActionEndUpdate','_actorSprites','globalAlpha','drawTextEx','ActSeq_Movement_Jump','getBattlePortraitFilename','_targetHomeY','clearFreezeMotion','Scene_Battle_update','Scene_Battle_startEnemySelection','apply','ShowHpDmg','vPZIf','isFlipped','setupOversaturateImpactFilter','BattleLogRectJS','ElementStatusCore','setupShockwaveImpactFilter','ShowWeapon','isSceneChanging','_battlePortrait','arPenFlat','animationBaseDelay','ShowAddedDebuff','makeCommandList','setupBattleCore','xeLVY','uWGNI','virtualClick','performActionEndMembers','HelpOptions','statusWindowRect','hCYmt','ActSeq_Mechanics_AddState','canAttackBattleCore','motionIdle','SbQOz','JrAvK','time','cemLa','Scene_Boot_onDatabaseLoaded','status','onFloatEnd','origin','NDBVF','Actor-%1-%2','updateScale','ActSeq_Impact_ZoomBlurPoint','uMmZn','VisuMZ_3_FrontviewBattleUI','_updateCursorArea','arRedFlat','_attackAnimationId','_duration','GetActionSequenceSpecialTargetWithFlags','ActSeq_Mechanics_BreakShieldReset','nXPOH','damageOffsetX','AniDuration','StatusWindowSkinFilename','ShowMpDmg','Linear','executeDamage','AutoMeleeSolo','xLJcT','HEDCH','itemEffectRecoverMp','windowskin','shouldDisperseDamage','GRID\x20MOVE','hpDamageFmt','_escapeRatio','isLearnedSkill','MKFoX','kcmdi','_homeEasing','XZpOx','missed','SkewY','displayType','isForRandom','removeChild','isBTB','kUoEe','animationShouldMirror','displayReflection','pha','PAcPA','bjhPQ','CoreEngine','HkiFe','ActSeq_Impact_Desaturate','clearWeaponAnimation','changeBattlebacks','ActSeq_Skew_WaitForSkew','weaponImageId','MjPHU','Game_Action_isForRandom','dead\x20battlers','JHENG','traitObjects','boxHeight','skillWindowRect','abnormal','Sprite_Enemy_createStateIconSprite','ActSeq_Mechanics_BtbGain','ShowAddedState','ActionEffect','alive\x20friends\x20not\x20target','ActSeq_Impact_TimeStop','makeSpeed','RegExp','vIDvE','performSubstitute','revealNewWeaknesses','_iconIndex','ActSeq_Skew_Reset','ActSeq_BattleLog_DisplayAction','commandName','initBattlePortrait','portrait','glitch','splice','BEQou','IqLUZ','sZGIZ','itemTextAlign','ParseActorNotetags','pagedown','sideview_ui','VcNps','setFullActionsPTB','updateAngleCalculations','_handlers','BpEBw','isCTB','default','faceWidth','displayAffectedStatus','createAttachmentSprites','isBattlerGrounded','ActSeq_Element_AddElements','_frontAttachmentSprite','CheckVisibleSkillNotetags','OpWXL','MotionType','WhdgI','_windowLayer','angle','ybjVN','turnCount','Game_Action_itemHit','updateJump','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','StyleName','IconStypeNorm','UusOF','process_VisuMZ_BattleCore_PluginParams','DisablePartyCmd','arRedRate','requestAnimation','NameAlwaysHidden','isInputting','isChanting','format','_opacityDuration','_createDamageContainer','move','forceAction','qLdmY','eMgLB','Game_Action_evalDamageFormula','isConfused','_phase','actorCommandCancelTPB','frameCount','_backAttachmentSprite','addDamageSprite','getLastPluginCommandInterpreter','_damagePopupArray','setBattlerBattleCore','floor','HpGauge','onOpacityEnd','ActSeq_Element_NullElements','getSkillIdWithName','KVinB','Sprite_Animation_targetSpritePosition','MwCjP','_inputting','QZhzs','makeActionList','Scene_Party','Duration','_targetIndex','%1RegenerateJS','GLmYz','casting','Sprite_Actor_update','isCertainHit','XFhqA','displayBuffs','CommandVisible','MOTIONS','maxBattleMembers','isTpbMainPhase','YrFxi','Sprite_Enemy_initVisibility','waitForMovement','gainBravePoints','Rate','oYkpi','changePaintOpacity','_motion','AllowRandomSpeed','message2','_text','commandNameWindowDrawBackground','maxLines','updateFrame','isChangingOpacity','Wave','visualCutinPortraitIndex','addActor','value1','rvvOT','ShuffleArray','onActorCancel','Game_Action_apply','Game_Action_setAttack','damageContainer','StatusWindowAttachmentBack','_surprise','cSxlL','addGuardCommand','VZNen','ActSeq_Movement_FaceTarget','createEnemyWindow','_cursorArea','isOTB','_motionSpeed','performReflection','canUseItemCommand','_autoBattleWindow','onBpO','findIndex','placeTimeGauge','getDefeatedEnemies','ShowFacesListStyle','Sprite_Actor_moveToStartPosition','Filename','trim','alive\x20friends\x20not\x20user','SkipPartyCmd','ANexy','match','Sprite_Actor_updateShadow','setupBattleCoreData','Window_BattleLog_displayEvasion','BindCommonEventKeysForObj','deselect','dead','PostEndBattleJS','Psplo','iIpHR','performRecovery','JbgrI','bJznV','_growWholeDuration','Sprite_Enemy_updateCollapse','guardSkillId','_opacityWholeDuration','_battleCoreBattleStartEvent','CAncj','XuAaR','checkAutoCustomActionSequenceNotetagEffect','removeAnimation','LcNBH','fnordRemovedStates','createEnemyNames','ZzBHj','addNewState','NBSYk','alignBattleCoreDamageSprite','EmergeText','ALL_ENEMIES','setHelpWindowItem','bgType','jDlkH','ShowCosts','-%1\x20MP','_flinched','boxWidth','setActiveWeaponSet','opponentsUnit','Strength','BtFTG','addTextToCombatLog','VbhKk','isPreviousSceneBattleTransitionable','POnMi','JwdMx','PWtAh','Parse_Notetags_TraitObjects','vbxHy','clearDamagePopup','Game_Battler_performMiss','vhLIf','cTfpl','_stateSprite','SvWeaponSolo-%1-%2','indexOf','DlBaG','\x5cI[%1]%2','Window_ActorCommand_setup','_selectionEffectCount','ActSeq_Mechanics_BoostPointsStoreData','weatherPower','jsOneForOne','canMove','evalDamageFormula','startShakeFlinch','OSxbJ','addLoadListener','PopupShiftX','inHomePosition','UNTITLED','PreApplyJS','clearAllVisualCutins','gBpzd','evaded','battleAngle','LOzDa','CnwpY','MotionIdle','waitForOpacity','select','ActSeq_Projectile_Icon','startSkew','CopyCombatLog','WUktN','Height','iconHeight','addCombatLogCommand','callOkHandler','_growEasing','onEnemyCancel','EnableDamageCap','Window_BattleLog_pushBaseLine','PreDamage%1JS','processBattleCoreJS','_enemyId','GgvBi','map','updateSkew','FlinchDistanceX','makeDamageValue','EBJEz','KxJSf','EzEHb','_actorWindow','WaitForCamera','attackStatesRate','autoSelectLastSelected','ActSeq_Element_ForceElements','ParseClassNotetags','KPtsp','Yrjho','process_VisuMZ_BattleCore_jsFunctions','type','RwZii','%1Apply%2JS','SiWLL','eApYE','drawItemBackground','filterArea','Scene_Battle_skillWindowRect','Scene_Battle_startPartyCommandSelection','buffAdd','endVisualCutin','Scene_Battle_onActorCancel','addAttackCommand','special','Scene_Battle_selectPreviousCommand','bBQQE','applyImmortal','_targetOffsetY','AllowCollapse','Sprite_Battler_update','battlerShadowScaleX','VisuMZ_3_WeaknessDisplay','applyResultSwitches','LdAiW','OaTSx','DistanceAdjust','NSUyb','getNextSubjectFromPool','PrioritySortActive','jmJuA','kEBrS','WtypeId','isMeleeMultiTargetAction','CounterPlayback','performCastAnimation','waitCount','CheckVisibleBattleNotetags','DEF','jsScaleUp','_animation','adjustPosition_ScaleDown','SwitchMissEvade','VrhVp','isCustomBattleScope','tybfN','ActSeq_Animation_AttackAnimation','JyhPi','mTcbl','Trpno','ActSeq_Set_SetupAction','setBattleCameraTargets','Scene_Map_updateCallMenu','BTB','ftcIK','_actionInputIndex','requestDragonbonesAnimation','ShowCurrentState','ActSeq_Mechanics_DeathBreak','createBattleUIOffsetX','displayTpDamage','getStypeIdWithName','setGuard','nTZHt','removeBuffsAuto','autoBattle','Window_BattleLog_displayCurrentState','ActSeq_Animation_WaitForAnimation','addShowHpGaugeCommand','performAction','updateBattlebackBitmap1','wait','setBackgroundType','_injectAnimationSprite','_displayBattleCoreTransitionErrorMsg','displayChangedBuffs','CommandWidth','_tempEquipCheck','drawBackgroundRect','PmwEd','ShowPopup','requestRefresh','findSymbolExt','TpGaugeOffsetX','CriticalDmgRate','pgjSd','createActors','gainMp','isAnyoneJumping','priority','createHpGaugeSprite','pYIXV','Text','hpDamage','ActSeq_Inject_AnimationStart','removeActor','startJump','loadPicture','JS\x20BATTLE\x20VICTORY','useDigitGrouping','Game_System_initialize','Name','CriticalDuration','Game_BattlerBase_isStateResist','shadow','ghcle','azyqg','_floatWholeDuration','messageSpeed','isSpinning','createKeyJS','frontviewSpriteY','find','_currentActor','QcLqi','WaitForAngle','WANwl','iYZve','ActSeq_Mechanics_RemoveState','addOnceParallelInterpreter','KPbpL','ActSeq_BattleLog_WaitForNewLine','worldTransform','Actor','isFastForward','Game_Actor_setup','PvICL','dead\x20opponents','HelpItem','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','JS\x20%1END\x20ACTION','_battlerContainer','FbNpr','AzzTT','Scene_Battle_commandFight','_freezeMotionData','SwitchCritical','recoverAll','pages','alphabetic','uSjDB','equips','mainSpriteHeight','MiUex','_defeatedEnemies','isPTB','Game_Interpreter_command283','NextTurn','_allTargets','gEycA','front\x20base','FlinchDuration','VisuMZ_4_BreakShields','TextColor','battleDisplayText','criticalHitFlat','yyxjm','FlashDuration','startFloat','nyFcx','_multipliers','canBattlerMove','IOkoP','lastFilename','battleUIOffsetY','SkillItemBorderCols','IMSJg','isImmortal','refreshActorPortrait','xAhHC','battleInjectAni','lLYff','ActSeq_Impact_MotionBlurTarget','addedBuffs','isItem','PgVam','WJiQd','requestMotionRefresh','Enable','dimColor2','CriticalHitFlat','isBusy','startMove','svActor','fFgYp','xxlVD','initVisibility','Window_BattleLog_displayActionResults','dataId','BattleManager_processDefeat','yioib','FfLJi','CCCgD','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','vMBjz','ShowPortraits','UigBh','ntasn','drawSingleSkillCost','moveToStartPositionBattleCore','LlZNf','PostApply%1JS','stopInjectAnimation','lqtuF','Game_BattlerBase_eraseState','currentAction','Window_BattleLog_performSubstitute','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','performActionMotions','ActSeq_Mechanics_OnceParallel','changeAtbChargeTime','Window_ItemList_maxCols','showAnimation','qBUbJ','NyvTS','createDamageSprite','ArRedFlat','qChBi','Elements','ActSeq_Movement_WaitForOpacity','lastCommandSymbol','Sprite_Actor_setBattler','ActSeq_Mechanics_AddBuffDebuff','aedlD','ActSeq_Animation_PlayAtCoordinate','_borderPortraitTargetX','VisuMZ_2_BattleSystemOTB','JS\x20%1START\x20ACTION','WaitForEntrance','StatusWindowAttachmentBackOffsetY','process_VisuMZ_BattleCore_Notetags','encounterList','snapForBackground','drawIcon','AlphaFilter','clearMotion','CommandAddAutoBattle','Window_BattleLog_displayTpDamage','critical','evade','SkillsStatesCore','JLkvK','drawItemStyleIconText','onTurnEnd','qctjR','mrdeh','_tempActor','JS\x20%1APPLY\x20%2','getChildIndex','occasion','spbxp','playCancel','Sprite_Battler_setHome','Debuffs','_speed','processPostBattleCommonEvents','isForFriend'];_0x5cc0=function(){return _0x5b0db7;};return _0x5cc0();}function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy[_0x397c95(0x6cf)]=Object['create'](Sprite_Actor[_0x397c95(0x6cf)]),Sprite_SvEnemy['prototype']['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x397c95(0x6cf)]['initialize']=function(_0x28812a){const _0x33c52d=_0x397c95;Sprite_Actor[_0x33c52d(0x6cf)][_0x33c52d(0x918)][_0x33c52d(0x6a3)](this,_0x28812a),this['scale']['x']=-0x1,this[_0x33c52d(0xb6e)][_0x33c52d(0x2b2)]['x']=-0x1;},Sprite_SvEnemy[_0x397c95(0x6cf)][_0x397c95(0x470)]=function(){},Sprite_SvEnemy[_0x397c95(0x6cf)][_0x397c95(0x867)]=function(){},Sprite_SvEnemy[_0x397c95(0x6cf)][_0x397c95(0x597)]=function(_0x227511){},Sprite_SvEnemy[_0x397c95(0x6cf)][_0x397c95(0x1eb)]=function(){},Sprite_SvEnemy[_0x397c95(0x6cf)][_0x397c95(0x45a)]=function(){},Sprite_SvEnemy[_0x397c95(0x6cf)][_0x397c95(0x50b)]=function(){const _0x254144=_0x397c95;this['_stateSprite'][_0x254144(0x3d2)]=![];},Sprite_SvEnemy['prototype'][_0x397c95(0x75a)]=function(){const _0x33d301=_0x397c95;Sprite_Battler[_0x33d301(0x6cf)]['updateBitmap']['call'](this);const _0x5370b7=this[_0x33d301(0x347)][_0x33d301(0x9d9)]();this[_0x33d301(0x59d)]!==_0x5370b7&&(this['_battlerName']=_0x5370b7,this[_0x33d301(0x263)][_0x33d301(0x60e)]=ImageManager['loadSvActor'](_0x5370b7)),this[_0x33d301(0x263)]&&this[_0x33d301(0x263)][_0x33d301(0x60e)]&&this[_0x33d301(0xcfb)]&&('cSxlL'===_0x33d301(0xb22)?this['_mainSprite'][_0x33d301(0x60e)][_0x33d301(0x6bc)]!==this[_0x33d301(0xcfb)][_0x33d301(0x802)]()&&(this['_mainSprite']['bitmap']['smooth']=this['_battler']['battlerSmoothImage']()):this[_0x33d301(0x5ab)](this[_0x33d301(0xac7)]));},Sprite_SvEnemy[_0x397c95(0x6cf)][_0x397c95(0x9aa)]=function(){},Sprite_SvEnemy[_0x397c95(0x6cf)]['startMove']=function(_0x2fe51e,_0x11b310,_0x1ada6b){const _0x431199=_0x397c95;if(this['parent'])this[_0x431199(0x4bf)][_0x431199(0xc5f)](_0x2fe51e,_0x11b310,_0x1ada6b);},Sprite_SvEnemy[_0x397c95(0x6cf)]['refreshMotion']=function(){const _0x50f44f=_0x397c95,_0x95e7bc=this[_0x50f44f(0x347)];if(_0x95e7bc){if(_0x50f44f(0x17d)==='zMwJD')_0x463243[_0x50f44f(0x60e)]=_0x225978;else{const _0xe75156=_0x95e7bc['stateMotionIndex']();if(_0x95e7bc[_0x50f44f(0xadb)]()||_0x95e7bc['isActing']())_0x50f44f(0x404)!==_0x50f44f(0x404)?this[_0x50f44f(0x8c4)]()?this['performTpbActiveCheckSwitch']():this[_0x50f44f(0x518)]():this[_0x50f44f(0x95c)](_0x50f44f(0x77c));else{if(_0xe75156===0x3)this[_0x50f44f(0x95c)](_0x50f44f(0xb3e));else{if(_0xe75156===0x2)this[_0x50f44f(0x95c)](_0x50f44f(0x2ef));else{if(_0x95e7bc['isChanting']()){if('WnXxc'!==_0x50f44f(0x5f0)){const _0x27ce72=_0x9ee613['regionId'](_0x2b8634['x'],_0x4f8782['y']);if(this[_0x50f44f(0x5a3)]&&this[_0x50f44f(0x5a3)][_0x27ce72])return this[_0x50f44f(0x5a3)][_0x27ce72];}else this[_0x50f44f(0x95c)]('chant');}else{if(_0x95e7bc['isGuard']()||_0x95e7bc[_0x50f44f(0x85a)]())'ShmUn'===_0x50f44f(0xd09)?this[_0x50f44f(0x95c)](_0x50f44f(0x50e)):(_0x86a472=_0x540922['floor'](_0x19cea6[_0x50f44f(0x4ce)]()*(_0xe43394+0x1)),_0x10bd1d=_0x30dc9e[_0x29643a],_0x429415[_0x52b95b]=_0x1a8360[_0x28f2e8],_0xe84588[_0x137a16]=_0x42a726);else{if(_0xe75156===0x1){if(_0x50f44f(0xc1e)!==_0x50f44f(0xc1e)){const _0x21c32a=_0xcc0b05[_0x50f44f(0xaf2)](_0x3f8c83['$1']);this[_0x50f44f(0x37d)](_0xa99dc5[_0x21c32a]);}else this[_0x50f44f(0x95c)](_0x50f44f(0xaa0));}else{if(_0x95e7bc[_0x50f44f(0x314)]())this[_0x50f44f(0x95c)]('dying');else _0x95e7bc['isUndecided']()?this['startMotion'](_0x50f44f(0x77c)):this[_0x50f44f(0x95c)](_0x95e7bc[_0x50f44f(0x3cf)]()[_0x50f44f(0xa5c)]||_0x50f44f(0x77c));}}}}}}}}},Sprite_SvEnemy[_0x397c95(0x6cf)][_0x397c95(0xb7e)]=function(){const _0x3d01e2=_0x397c95;return this[_0x3d01e2(0x4bf)]?this[_0x3d01e2(0x4bf)]['_offsetX']===0x0&&this['parent'][_0x3d01e2(0x166)]===0x0:_0x3d01e2(0x45d)==='yBwgO'?!![]:this[_0x3d01e2(0x4a3)]()?_0x54fd82['BattleCore'][_0x3d01e2(0x716)]['Actor'][_0x3d01e2(0x94a)]:_0x31fbf5[_0x3d01e2(0x1f3)][_0x3d01e2(0x716)][_0x3d01e2(0x7de)][_0x3d01e2(0x94a)];},Sprite_SvEnemy[_0x397c95(0x6cf)][_0x397c95(0x6b2)]=function(){},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xaf4)]=Sprite_Animation[_0x397c95(0x6cf)]['targetSpritePosition'],Sprite_Animation[_0x397c95(0x6cf)][_0x397c95(0x1c2)]=function(_0x3b3195){const _0x244cca=_0x397c95;return _0x3b3195[_0x244cca(0x763)]?this['targetDistortionSpritePosition'](_0x3b3195):VisuMZ[_0x244cca(0x1f3)]['Sprite_Animation_targetSpritePosition']['call'](this,_0x3b3195);},Sprite_Animation[_0x397c95(0x6cf)][_0x397c95(0x473)]=function(_0x28b76d){const _0x2c35dd=_0x397c95;let _0x5961fb=_0x28b76d['x'],_0x15e1c1=_0x28b76d['y'],_0x25c466=_0x28b76d['height'],_0x25e418=_0x28b76d[_0x2c35dd(0x763)]['scale']['y'];_0x28b76d['x']=_0x28b76d[_0x2c35dd(0x4fd)]+_0x28b76d['extraPositionX'](),_0x28b76d['y']=_0x28b76d[_0x2c35dd(0x39a)]+_0x28b76d[_0x2c35dd(0x2f6)](),_0x28b76d[_0x2c35dd(0x9b1)]*=_0x25e418;let _0x4e719a=VisuMZ['BattleCore']['Sprite_Animation_targetSpritePosition'][_0x2c35dd(0x6a3)](this,_0x28b76d);return _0x28b76d['x']=_0x5961fb,_0x28b76d['y']=_0x15e1c1,_0x28b76d['height']=_0x25c466,_0x4e719a;},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x164)]=Sprite_AnimationMV[_0x397c95(0x6cf)]['updatePosition'],Sprite_AnimationMV[_0x397c95(0x6cf)]['updatePosition']=function(){const _0x4d5429=_0x397c95;VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition'][_0x4d5429(0x6a3)](this);if(!SceneManager[_0x4d5429(0x650)]())return;if(this['_animation']['position']===0x3)this['x']=Math[_0x4d5429(0x403)](Graphics['boxWidth']/0x2),this['y']=Math['round'](Graphics['boxHeight']/0x2);else{if(this[_0x4d5429(0x43b)])return;}},Sprite_Damage['prototype'][_0x397c95(0xa52)]=function(_0x2f9d25){const _0x2c142b=_0x397c95,_0x2f12b8=_0x2f9d25[_0x2c142b(0x477)]()||_0x2f9d25[_0x2c142b(0x3f6)]();if(_0x2f12b8[_0x2c142b(0xa86)]||_0x2f12b8[_0x2c142b(0xb83)]){if('VFFbH'!=='VFFbH')return _0x24d621['isInputting']();else this[_0x2c142b(0x903)]=0x0,this[_0x2c142b(0x872)]();}else{if(_0x2f12b8[_0x2c142b(0x913)]){if(_0x2c142b(0x68b)===_0x2c142b(0x68b))this[_0x2c142b(0x903)]=_0x2f12b8['hpDamage']>=0x0?0x0:0x1,this[_0x2c142b(0x1fc)](_0x2f12b8['hpDamage']);else return _0x3bbbd5[_0x2c142b(0x3ce)]('ok');}else _0x2f9d25[_0x2c142b(0xa0e)]()&&_0x2f12b8[_0x2c142b(0x193)]!==0x0&&(this['_colorType']=_0x2f12b8[_0x2c142b(0x193)]>=0x0?0x2:0x3,this[_0x2c142b(0x1fc)](_0x2f12b8[_0x2c142b(0x193)]));}_0x2f12b8['critical']&&('pfdHy'!=='pfdHy'?(_0x2ee2fc[_0x2c142b(0x5d0)]()&&_0x491997[_0x2c142b(0x850)]()&&this['push'](_0x2c142b(0xb5e),_0x1bd823,_0x45041d),this[_0x2c142b(0x33a)](_0x433fa5,_0x2a3cfe,_0x47da71)):this[_0x2c142b(0x72e)]());},Sprite_Damage[_0x397c95(0x6cf)][_0x397c95(0x74a)]=function(_0x46ce6e){},Sprite_Damage[_0x397c95(0x6cf)][_0x397c95(0x1fc)]=function(_0x200014){const _0x1196b4=_0x397c95;let _0xb93ab5=this['createString'](_0x200014);const _0x23aff6=this[_0x1196b4(0x677)](),_0x4f5046=Math[_0x1196b4(0xaee)](_0x23aff6*0.75);for(let _0x34d328=0x0;_0x34d328<_0xb93ab5[_0x1196b4(0x187)];_0x34d328++){const _0x224ee8=this[_0x1196b4(0x8e7)](_0x4f5046,_0x23aff6);_0x224ee8['bitmap'][_0x1196b4(0x7af)](_0xb93ab5[_0x34d328],0x0,0x0,_0x4f5046,_0x23aff6,_0x1196b4(0x971)),_0x224ee8['x']=(_0x34d328-(_0xb93ab5['length']-0x1)/0x2)*_0x4f5046,_0x224ee8['dy']=-_0x34d328;}},Sprite_Damage[_0x397c95(0x6cf)][_0x397c95(0x3ad)]=function(_0x51619e){const _0xf931b8=_0x397c95;let _0x118480=Math[_0xf931b8(0x3b1)](_0x51619e)[_0xf931b8(0xa17)]();this[_0xf931b8(0xc0c)]()&&(_0x118480=VisuMZ[_0xf931b8(0x756)](_0x118480));const _0x4ed546=VisuMZ[_0xf931b8(0x1f3)][_0xf931b8(0x716)]['Damage'];let _0x194d65='',_0x1fb7bf='';switch(this[_0xf931b8(0x903)]){case 0x0:_0x194d65=_0x4ed546[_0xf931b8(0xa7f)]||_0xf931b8(0x52d),_0x1fb7bf=TextManager['hp'];if(_0x51619e===0x0)_0x194d65='%1';break;case 0x1:_0x194d65=_0x4ed546[_0xf931b8(0x62c)]||_0xf931b8(0x528),_0x1fb7bf=TextManager['hp'];break;case 0x2:_0x194d65=_0x4ed546[_0xf931b8(0x52f)]||_0xf931b8(0xb5b),_0x1fb7bf=TextManager['mp'];break;case 0x3:_0x194d65=_0x4ed546[_0xf931b8(0x8a1)]||'+%1\x20MP',_0x1fb7bf=TextManager['mp'];break;}return _0x194d65[_0xf931b8(0xadd)](_0x118480,_0x1fb7bf)[_0xf931b8(0xb34)]();},Sprite_Damage['prototype']['useDigitGrouping']=function(){const _0x31e916=_0x397c95;if(Imported['VisuMZ_0_CoreEngine']){if('QFQUR'===_0x31e916(0x886))_0x325f53['motionIdle']=_0x180ff8(_0x850023['$1'])[_0x31e916(0x9a2)]()[_0x31e916(0xb34)]();else return VisuMZ[_0x31e916(0xa92)][_0x31e916(0x716)]['QoL']['DigitGroupingDamageSprites'];}else return![];},Sprite_Damage[_0x397c95(0x6cf)][_0x397c95(0x72e)]=function(){const _0x57a2d8=_0x397c95,_0x4ee6e3=VisuMZ[_0x57a2d8(0x1f3)]['Settings'][_0x57a2d8(0x7a6)];this[_0x57a2d8(0x2ad)]=_0x4ee6e3[_0x57a2d8(0x789)][_0x57a2d8(0x468)](0x0),this[_0x57a2d8(0x5fa)]=_0x4ee6e3[_0x57a2d8(0xc0f)];},Sprite_Damage['prototype']['setupTextPopup']=function(_0x35df38,_0x4fbd17){const _0x192a22=_0x397c95;this[_0x192a22(0x2ad)]=_0x4fbd17[_0x192a22(0x8a2)]||[0x0,0x0,0x0,0x0],this[_0x192a22(0x2ad)]=JsonEx[_0x192a22(0x49d)](this['_flashColor']),this[_0x192a22(0x5fa)]=_0x4fbd17[_0x192a22(0x814)]||0x0;const _0x195edd=this[_0x192a22(0x677)](),_0x28ce06=Math[_0x192a22(0xaee)](_0x195edd*0x1e),_0x35fc74=this['createChildSprite'](_0x28ce06,_0x195edd);_0x35fc74[_0x192a22(0x60e)][_0x192a22(0x7ab)]=ColorManager[_0x192a22(0x662)](_0x4fbd17[_0x192a22(0x7ab)]),_0x35fc74[_0x192a22(0x60e)][_0x192a22(0x7af)](_0x35df38,0x0,0x0,_0x28ce06,_0x195edd,_0x192a22(0x971)),_0x35fc74['dy']=0x0;},Sprite_Damage['prototype'][_0x397c95(0x643)]=function(_0x12461c,_0x4ce81f,_0x14b7d8){const _0x41c26a=_0x397c95,_0x399401=Math['max'](this['fontSize'](),ImageManager['iconHeight']),_0x5f420c=Math[_0x41c26a(0xaee)](_0x399401*0x1e),_0x19e487=this[_0x41c26a(0x8e7)](_0x5f420c,_0x399401),_0x2e98fd=ImageManager[_0x41c26a(0x8f5)]/0x2,_0x5a3d49=_0x19e487[_0x41c26a(0x60e)][_0x41c26a(0x9f1)](_0x4ce81f+'\x20');_0x19e487[_0x41c26a(0x60e)][_0x41c26a(0x7ab)]=ColorManager['getColor'](_0x14b7d8[_0x41c26a(0x7ab)]),_0x19e487[_0x41c26a(0x60e)]['drawText'](_0x4ce81f,_0x2e98fd,0x0,_0x5f420c-_0x2e98fd,_0x399401,'center');const _0x28fad9=Math[_0x41c26a(0x403)]((_0x399401-ImageManager[_0x41c26a(0xb8f)])/0x2),_0x3dd891=_0x5f420c/0x2-ImageManager[_0x41c26a(0x8f5)]-_0x5a3d49/0x2+_0x2e98fd/0x2,_0x29e729=ImageManager[_0x41c26a(0x28b)](_0x41c26a(0x3a1)),_0x270954=ImageManager['iconWidth'],_0xda537e=ImageManager[_0x41c26a(0xb8f)],_0x279d86=_0x12461c%0x10*_0x270954,_0x110e42=Math[_0x41c26a(0xaee)](_0x12461c/0x10)*_0xda537e;_0x19e487[_0x41c26a(0x60e)][_0x41c26a(0x8cc)](_0x29e729,_0x279d86,_0x110e42,_0x270954,_0xda537e,_0x3dd891,_0x28fad9),this[_0x41c26a(0x2ad)]=_0x14b7d8[_0x41c26a(0x8a2)]||[0x0,0x0,0x0,0x0],this[_0x41c26a(0x2ad)]=JsonEx[_0x41c26a(0x49d)](this['_flashColor']),this[_0x41c26a(0x5fa)]=_0x14b7d8[_0x41c26a(0x814)]||0x0,_0x19e487['dy']=0x0;},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x622)]=Sprite_Damage[_0x397c95(0x6cf)][_0x397c95(0x8e7)],Sprite_Damage[_0x397c95(0x6cf)][_0x397c95(0x8e7)]=function(_0x1ba85f,_0x40e246){const _0x45ad1f=_0x397c95;return _0x40e246=Math['round'](_0x40e246*1.2),VisuMZ[_0x45ad1f(0x1f3)]['Sprite_Damage_createChildSprite'][_0x45ad1f(0x6a3)](this,_0x1ba85f,_0x40e246);},VisuMZ['BattleCore'][_0x397c95(0x337)]=Sprite_StateIcon['prototype'][_0x397c95(0xb14)],Sprite_StateIcon[_0x397c95(0x6cf)][_0x397c95(0xb14)]=function(){const _0x449404=_0x397c95;VisuMZ['BattleCore']['Sprite_StateIcon_updateFrame']['call'](this),this[_0x449404(0x2c9)]=this[_0x449404(0xaac)]>0x0?0xff:0x0;},VisuMZ['BattleCore'][_0x397c95(0x843)]=Sprite_Weapon['prototype'][_0x397c95(0xa31)],Sprite_Weapon[_0x397c95(0x6cf)][_0x397c95(0xa31)]=function(){const _0x81241f=_0x397c95;VisuMZ[_0x81241f(0x1f3)]['Sprite_Weapon_loadBitmap'][_0x81241f(0x6a3)](this),this[_0x81241f(0x60e)]&&(this[_0x81241f(0x60e)][_0x81241f(0x6bc)]=VisuMZ['BattleCore'][_0x81241f(0x716)][_0x81241f(0xc24)]['SmoothImage']);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x670)]=Sprite_Gauge[_0x397c95(0x6cf)][_0x397c95(0x8be)],Sprite_Gauge[_0x397c95(0x6cf)]['smoothness']=function(){const _0x1a283=_0x397c95;return this['_statusType']!==_0x1a283(0xa5f)?VisuMZ[_0x1a283(0x1f3)]['Settings'][_0x1a283(0xaef)][_0x1a283(0xa73)]??0x14:VisuMZ[_0x1a283(0x1f3)][_0x1a283(0x670)][_0x1a283(0x6a3)](this);};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge['prototype']=Object[_0x397c95(0x285)](Sprite_Gauge[_0x397c95(0x6cf)]),Sprite_HpGauge[_0x397c95(0x6cf)][_0x397c95(0x32a)]=Sprite_HpGauge,Sprite_HpGauge[_0x397c95(0x6cf)]['initialize']=function(){const _0x275f02=_0x397c95;Sprite_Gauge[_0x275f02(0x6cf)][_0x275f02(0x918)][_0x275f02(0x6a3)](this);},Sprite_HpGauge[_0x397c95(0x6cf)]['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x397c95(0x6cf)]['redraw']=function(){const _0x5c2e97=_0x397c95;this['bitmap'][_0x5c2e97(0x15f)]();const _0x30cac2=this[_0x5c2e97(0x33d)]();if(!isNaN(_0x30cac2)){if('zDbnZ'!=='zDbnZ'){const _0x2eb12c=_0x1e5c6b(_0xb2d6f9['$1'])[_0x5c2e97(0x9af)](/[\r\n]+/)[_0x5c2e97(0x723)](''),_0x5d4445=this[_0x5c2e97(0x831)](_0x2eb12c);_0x460bd1=this[_0x5c2e97(0x1b4)](_0x5d4445)||_0x121149,_0x4ff56c=_0x2cef97[_0x5c2e97(0x76a)](_0x25ee9e);}else this[_0x5c2e97(0x7c5)]();}};function Sprite_EnemyName(){const _0x412630=_0x397c95;this[_0x412630(0x918)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x397c95(0x285)](Sprite_Name[_0x397c95(0x6cf)]),Sprite_EnemyName['prototype'][_0x397c95(0x32a)]=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x397c95(0x918)]=function(){const _0x320a26=_0x397c95;Sprite_Name[_0x320a26(0x6cf)][_0x320a26(0x918)]['call'](this),this[_0x320a26(0x7d2)]();},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x652)]=function(){const _0x2347df=_0x397c95;Sprite_Name['prototype'][_0x2347df(0x652)][_0x2347df(0x6a3)](this),this[_0x2347df(0x2c9)]=0x0,this['_linkedSprite']=null,this[_0x2347df(0x140)]['x']=0.5,this[_0x2347df(0x140)]['y']=0x0;},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x7d2)]=function(){const _0x119620=_0x397c95;if(VisuMZ[_0x119620(0x1f3)][_0x119620(0x716)][_0x119620(0x7de)]['NameAttachStateIcon']){if(_0x119620(0x29c)!=='kgcsT')this[_0x119620(0x94e)]=new Sprite_StateIcon(),this['addChild'](this['_stateIconSprite']);else{if(_0x55695d['note']['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x2bc881=_0xd3ce02(_0x377988['$1'])[_0x119620(0x27f)]()[_0x119620(0xb34)]();if(_0x2bc881===_0x119620(0x4e8))return _0x119620(0x4e8);if(_0x15c5b2['DamageStyles'][_0x2bc881])return _0x2bc881;}const _0x38be70=_0x5c972f[_0x119620(0x1f3)][_0x119620(0x716)][_0x119620(0x7a6)][_0x119620(0x7d9)][_0x119620(0x27f)]()[_0x119620(0xb34)]();if(_0x3eddf7['DamageStyles'][_0x38be70])return _0x38be70;return _0x119620(0x4e8);}}},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x3d1)]=function(){const _0x25bf03=_0x397c95;return Graphics[_0x25bf03(0xb5d)];},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x252)]=function(){const _0x3239b7=_0x397c95;return this['_lineHeight']=this[_0x3239b7(0x282)]||Window_Base[_0x3239b7(0x6cf)][_0x3239b7(0x288)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x677)]=function(){const _0x2e766c=_0x397c95;return VisuMZ['BattleCore']['Settings']['Enemy'][_0x2e766c(0x844)]||$gameSystem[_0x2e766c(0x806)]();},Sprite_EnemyName['prototype'][_0x397c95(0x90d)]=function(_0x5cfd74){this['_linkedSprite']=_0x5cfd74;},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x76c)]=function(){const _0xe65c37=_0x397c95;Sprite_Name[_0xe65c37(0x6cf)]['update']['call'](this),this['updateLink'](),this['updatePosition'](),this[_0xe65c37(0x6d1)](),this['updateOpacity']();},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x579)]=function(){const _0x1cbb20=_0x397c95;this[_0x1cbb20(0x593)]=undefined;const _0x43c309=this['name'](),_0xdb313=this[_0x1cbb20(0x3d1)](),_0x1bd5b1=Window_Base[_0x1cbb20(0x6cf)][_0x1cbb20(0x288)]();this[_0x1cbb20(0x289)](),this[_0x1cbb20(0x60e)]['clear'](),this[_0x1cbb20(0x60e)][_0x1cbb20(0x7af)](_0x43c309,0x0,0x0,_0xdb313,_0x1bd5b1,_0x1cbb20(0x971));},Sprite_EnemyName[_0x397c95(0x6cf)]['updateLink']=function(){const _0x4eeb7c=_0x397c95;if(!this[_0x4eeb7c(0x7f8)])return;this['_battler']!==this['_linkedSprite'][_0x4eeb7c(0xcfb)]&&('QFpNo'===_0x4eeb7c(0xc9d)?(this[_0x4eeb7c(0x598)][_0x4eeb7c(0x4da)](_0x4eeb7c(0x3de),_0x5adb3e[_0x4eeb7c(0x497)][_0x4eeb7c(0xadd)](_0x1c306f['name']())),this[_0x4eeb7c(0x598)][_0x4eeb7c(0x4da)](_0x4eeb7c(0xbf0))):this[_0x4eeb7c(0x74a)](this[_0x4eeb7c(0x7f8)][_0x4eeb7c(0xcfb)]));},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x209)]=function(){const _0x4826a7=_0x397c95;if(!this[_0x4826a7(0x7f8)])return;this[_0x4826a7(0x282)]=this['_lineHeight']||Window_Base['prototype']['lineHeight'](),this['x']=Math[_0x4826a7(0x403)](this[_0x4826a7(0x7f8)]['_baseX']),this['y']=Math[_0x4826a7(0x403)](this[_0x4826a7(0x7f8)][_0x4826a7(0x39a)]-this[_0x4826a7(0x282)]*0.5);const _0x2bec08=VisuMZ[_0x4826a7(0x1f3)]['Settings'][_0x4826a7(0x7de)];this['x']+=Math[_0x4826a7(0x403)](_0x2bec08['NameOffsetX']||0x0),this['y']+=Math[_0x4826a7(0x403)](_0x2bec08[_0x4826a7(0x290)]||0x0);},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x6d1)]=function(){const _0x27dd06=_0x397c95;this[_0x27dd06(0x4a9)]();},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x4a9)]=function(){const _0x4f4860=_0x397c95;if(!this[_0x4f4860(0x94e)])return;this[_0x4f4860(0xcfb)]!==this['_stateIconSprite'][_0x4f4860(0xcfb)]&&this[_0x4f4860(0x94e)][_0x4f4860(0x74a)](this[_0x4f4860(0xcfb)]);const _0x3a6cb0=this[_0x4f4860(0x96b)]();this[_0x4f4860(0x282)]=this[_0x4f4860(0x282)]||Window_Base[_0x4f4860(0x6cf)][_0x4f4860(0x288)](),this['_stateIconSprite']['x']=Math[_0x4f4860(0x403)]((_0x3a6cb0+ImageManager[_0x4f4860(0x8f5)])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0x4f4860(0x282)]/0x2;const _0x2ab303=VisuMZ['BattleCore'][_0x4f4860(0x716)][_0x4f4860(0x7de)];this[_0x4f4860(0x94e)]['x']+=_0x2ab303[_0x4f4860(0x7fe)]||0x0,this['_stateIconSprite']['y']+=_0x2ab303['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x211)]=function(){const _0x264cfc=_0x397c95,_0x2efa8b=this[_0x264cfc(0x5d9)]();if(_0x2efa8b&&this[_0x264cfc(0x2c9)]<0xff){if(_0x264cfc(0x284)!==_0x264cfc(0x284)){const _0x5284c3=_0x5a207b[_0x264cfc(0x1f3)]['createKeyJS'](this['item'](),_0x264cfc(0x3b9));if(_0x4ce083[_0x264cfc(0x1f3)]['JS'][_0x5284c3]){_0x3a632a=_0x10ea22[_0x264cfc(0x1f3)]['Game_Action_makeTargets'][_0x264cfc(0x6a3)](this);const _0x4f0ccc=_0x47cb74[_0x264cfc(0x1f3)][_0x264cfc(0xc17)](this[_0x264cfc(0x398)](),_0x264cfc(0x3b9));return _0x893bde=_0x800793['BattleCore']['JS'][_0x4f0ccc][_0x264cfc(0x6a3)](this,this[_0x264cfc(0x339)](),_0x2ac1e7),this[_0x264cfc(0x54f)](_0x13da7e);}return this[_0x264cfc(0xa2f)]();}else this[_0x264cfc(0x2c9)]+=0x10;}else!_0x2efa8b&&this[_0x264cfc(0x2c9)]>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x5d9)]=function(){const _0x5f5ab8=_0x397c95;if(this[_0x5f5ab8(0x281)]()){if(_0x5f5ab8(0x741)===_0x5f5ab8(0x741))return![];else for(const _0x5595aa of _0x182f6f[_0x5f5ab8(0x2e0)]){if(_0x3eafe1[_0x5595aa[_0x5f5ab8(0x6a0)]]){const _0xace1f=_0x5595aa[_0x5f5ab8(0x6a0)],_0x1f7153=_0x5595aa['x'],_0x245593=_0x5595aa['y'],_0x34dfb0=new _0x1c9b02(_0xace1f,_0x1f7153,_0x245593);_0x5595aa[_0x5f5ab8(0x5b6)]&&_0x34dfb0['hide'](),this[_0x5f5ab8(0x634)][_0x5f5ab8(0x4da)](_0x34dfb0);}}}else{if(!this['_battler'])return![];else{if(this['_battler'][_0x5f5ab8(0x88a)]())return![];else{if(!this[_0x5f5ab8(0xcfb)]['isAppeared']())return![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0x5f5ab8(0x5bc)]()){if(_0x5f5ab8(0xc82)!==_0x5f5ab8(0xc82)){const _0x16b1a7=this['commandStyle'](),_0x5a3589=_0x4ef052[_0x5f5ab8(0x1f3)][_0x5f5ab8(0x716)][_0x5f5ab8(0x982)]['CmdIconFight'],_0x2f9f26=_0x16b1a7==='text'?_0x235536[_0x5f5ab8(0x63f)]:_0x5f5ab8(0xb72)['format'](_0x5a3589,_0x23a456['fight']),_0x223b83=this['isFightCommandEnabled']();this[_0x5f5ab8(0x659)](_0x2f9f26,_0x5f5ab8(0x63f),_0x223b83);}else return!![];}else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this[_0x5f5ab8(0x2c9)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x281)]=function(){const _0x42600e=_0x397c95;return VisuMZ['BattleCore'][_0x42600e(0x716)][_0x42600e(0x7de)][_0x42600e(0xada)];},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x98b)]=function(){return![];},Sprite_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x5bc)]=function(){const _0x4dd4e5=_0x397c95;return VisuMZ[_0x4dd4e5(0x1f3)][_0x4dd4e5(0x716)]['Enemy'][_0x4dd4e5(0x287)];},Sprite_EnemyName[_0x397c95(0x6cf)]['isIncludedInEnemyWindow']=function(){const _0x5ca965=_0x397c95;if(VisuMZ[_0x5ca965(0x1f3)][_0x5ca965(0x716)]['Enemy'][_0x5ca965(0x22b)])return _0x5ca965(0x1ac)!==_0x5ca965(0x3b4)?this[_0x5ca965(0xcfb)][_0x5ca965(0x46a)]():this['battlerSprites']()[_0x5ca965(0x4f0)](_0x2cffa3=>_0x2cffa3['isChangingOpacity']());else{if(_0x5ca965(0x529)===_0x5ca965(0x529))return SceneManager[_0x5ca965(0x6fe)][_0x5ca965(0x346)]&&SceneManager['_scene'][_0x5ca965(0x346)][_0x5ca965(0x7e6)]&&SceneManager[_0x5ca965(0x6fe)][_0x5ca965(0x346)][_0x5ca965(0x634)][_0x5ca965(0x932)](this[_0x5ca965(0xcfb)]);else _0x5a60fb[_0x5ca965(0x4f3)](),_0x47158a[_0x5ca965(0x19d)](_0xc11340),_0x27a428[_0x5ca965(0x1f3)][_0x5ca965(0x21b)]['call'](this,_0x552a23),this['extendTroopMembers']();}},Sprite_EnemyName['prototype'][_0x397c95(0x96b)]=function(){const _0x48d872=_0x397c95;if(!this[_0x48d872(0xcfb)])return 0x0;if(this[_0x48d872(0x593)])return this['_cacheTextWidth'];const _0x1fef3e=this['name']();return this[_0x48d872(0x289)](),this['_cacheTextWidth']=this[_0x48d872(0x60e)][_0x48d872(0x9f1)](_0x1fef3e)||0x1,this[_0x48d872(0x593)];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x7cd)]=Sprite_Battleback['prototype']['adjustPosition'],Sprite_Battleback[_0x397c95(0x6cf)][_0x397c95(0x260)]=function(){const _0x22708d=_0x397c95,_0x2150b1=VisuMZ['BattleCore'][_0x22708d(0x716)][_0x22708d(0x498)];if(!_0x2150b1){if(_0x22708d(0x3f7)===_0x22708d(0x3f7))return VisuMZ[_0x22708d(0x1f3)][_0x22708d(0x7cd)][_0x22708d(0x6a3)](this);else{const _0x4dce3c=_0x40559e['prototype'][_0x22708d(0x468)][_0x22708d(0x6a3)](arguments,0x1);this[_0x22708d(0x90f)]['unshift']({'name':_0x5d6496,'params':_0x4dce3c});}}const _0x5605df=String(_0x2150b1[_0x22708d(0x88e)])||'MZ';switch(_0x5605df){case'MZ':VisuMZ['BattleCore'][_0x22708d(0x7cd)][_0x22708d(0x6a3)](this);break;case'1:1':this[_0x22708d(0x26a)]();break;case _0x22708d(0x5d6):this[_0x22708d(0xced)]();break;case'ScaleDown':this[_0x22708d(0xbd2)]();break;case _0x22708d(0x24b):this[_0x22708d(0x798)]();break;}},Sprite_Battleback['prototype'][_0x397c95(0x26a)]=function(){const _0x4451e6=_0x397c95,_0x584883=VisuMZ['BattleCore']['Settings'][_0x4451e6(0x498)];if(_0x584883&&_0x584883[_0x4451e6(0xb77)])return _0x584883[_0x4451e6(0xb77)][_0x4451e6(0x6a3)](this);this[_0x4451e6(0x76b)]=Graphics[_0x4451e6(0x76b)],this['height']=Graphics[_0x4451e6(0x9b1)];const _0x1ff946=0x1;this[_0x4451e6(0x2b2)]['x']=_0x1ff946,this[_0x4451e6(0x2b2)]['y']=_0x1ff946,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x397c95(0xced)]=function(){const _0x589ab6=_0x397c95,_0x4e4f2c=VisuMZ[_0x589ab6(0x1f3)][_0x589ab6(0x716)][_0x589ab6(0x498)];if(_0x4e4f2c&&_0x4e4f2c['jsScaleToFit'])return _0x589ab6(0x76f)!==_0x589ab6(0xb40)?_0x4e4f2c['jsScaleToFit'][_0x589ab6(0x6a3)](this):_0x288d1d[_0x589ab6(0x6cc)][_0x589ab6(0xb38)](/<COMMAND ICON: (\d+)>/i)?_0x198dad(_0x2ac6e7['$1']):_0x18bd5a[_0x589ab6(0x3ab)];this[_0x589ab6(0x76b)]=Graphics[_0x589ab6(0x76b)],this[_0x589ab6(0x9b1)]=Graphics['height'];const _0x7fdada=this[_0x589ab6(0x76b)]/this[_0x589ab6(0x60e)][_0x589ab6(0x76b)],_0x588550=this[_0x589ab6(0x9b1)]/this[_0x589ab6(0x60e)][_0x589ab6(0x9b1)],_0x316247=Math[_0x589ab6(0x483)](_0x7fdada,_0x588550);this[_0x589ab6(0x2b2)]['x']=_0x316247,this[_0x589ab6(0x2b2)]['y']=_0x316247,this['x']=(Graphics[_0x589ab6(0x76b)]-this['width'])/0x2,this['y']=Graphics[_0x589ab6(0x9b1)]-this[_0x589ab6(0x9b1)];},Sprite_Battleback['prototype'][_0x397c95(0xbd2)]=function(){const _0x1ece12=_0x397c95,_0x19b95a=VisuMZ['BattleCore'][_0x1ece12(0x716)][_0x1ece12(0x498)];if(_0x19b95a&&_0x19b95a[_0x1ece12(0x904)])return _0x19b95a[_0x1ece12(0x904)][_0x1ece12(0x6a3)](this);this[_0x1ece12(0x76b)]=Graphics[_0x1ece12(0x76b)],this[_0x1ece12(0x9b1)]=Graphics[_0x1ece12(0x9b1)];const _0x3226cc=Math['min'](0x1,this['width']/this['bitmap']['width']),_0x43f69a=Math[_0x1ece12(0x9d3)](0x1,this['height']/this[_0x1ece12(0x60e)][_0x1ece12(0x9b1)]),_0xec5e3a=Math[_0x1ece12(0x483)](_0x3226cc,_0x43f69a);this[_0x1ece12(0x2b2)]['x']=_0xec5e3a,this[_0x1ece12(0x2b2)]['y']=_0xec5e3a,this['x']=(Graphics[_0x1ece12(0x76b)]-this['width'])/0x2,this['y']=Graphics[_0x1ece12(0x9b1)]-this[_0x1ece12(0x9b1)];},Sprite_Battleback[_0x397c95(0x6cf)][_0x397c95(0x798)]=function(){const _0x4d2689=_0x397c95,_0x194338=VisuMZ[_0x4d2689(0x1f3)][_0x4d2689(0x716)][_0x4d2689(0x498)];if(_0x194338&&_0x194338[_0x4d2689(0xbd0)])return _0x194338[_0x4d2689(0xbd0)]['call'](this);this['width']=Graphics[_0x4d2689(0x76b)],this[_0x4d2689(0x9b1)]=Graphics['height'];const _0x481081=Math['max'](0x1,this['width']/this[_0x4d2689(0x60e)][_0x4d2689(0x76b)]),_0x268272=Math[_0x4d2689(0x483)](0x1,this[_0x4d2689(0x9b1)]/this[_0x4d2689(0x60e)][_0x4d2689(0x9b1)]),_0x1dca56=Math['max'](_0x481081,_0x268272);this[_0x4d2689(0x2b2)]['x']=_0x1dca56,this['scale']['y']=_0x1dca56,this['x']=(Graphics[_0x4d2689(0x76b)]-this[_0x4d2689(0x76b)])/0x2,this['y']=Graphics[_0x4d2689(0x9b1)]-this[_0x4d2689(0x9b1)];},Spriteset_Battle[_0x397c95(0x805)]=![],Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0xa46)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle['prototype'][_0x397c95(0xa4f)]=function(){return 0x0;},Spriteset_Battle['prototype'][_0x397c95(0x746)]=function(){return 0x0;},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x2bc)]=Spriteset_Battle['prototype'][_0x397c95(0x63c)],Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x63c)]=function(){const _0x243a05=_0x397c95;VisuMZ[_0x243a05(0x1f3)][_0x243a05(0x2bc)][_0x243a05(0x6a3)](this),this['createWeather'](),this[_0x243a05(0xb50)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x762)]=Spriteset_Battle[_0x397c95(0x6cf)]['update'],Spriteset_Battle[_0x397c95(0x6cf)]['update']=function(){const _0x137d46=_0x397c95;VisuMZ['BattleCore']['Spriteset_Battle_update'][_0x137d46(0x6a3)](this),this[_0x137d46(0x5af)](),this['updateUiContainerPosition'](),this[_0x137d46(0x69c)]();},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x873)]=function(){const _0x31f286=_0x397c95;this[_0x31f286(0x141)]=new Weather(),this[_0x31f286(0x713)]['addChild'](this[_0x31f286(0x141)]);},Spriteset_Battle[_0x397c95(0x6cf)]['updateWeather']=function(){const _0x44de77=_0x397c95;this['_weather']['type']=$gameScreen[_0x44de77(0x75e)](),this[_0x44de77(0x141)]['power']=$gameScreen[_0x44de77(0xb76)]();},Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x43e)]=function(_0x3acc92){$gameScreen['changeWeather'](_0x3acc92[0x0],_0x3acc92[0x1],_0x3acc92[0x2]);if(_0x3acc92[0x3])this['wait'](_0x3acc92[0x2]);return!![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xc3b)]=Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x4d4)],Game_Interpreter[_0x397c95(0x6cf)][_0x397c95(0x4d4)]=function(_0x56cefc){const _0x495b8b=_0x397c95;return SceneManager[_0x495b8b(0x650)]()?(SceneManager['_scene']['_spriteset'][_0x495b8b(0xa96)](_0x56cefc[0x0],_0x56cefc[0x1]),!![]):VisuMZ['BattleCore'][_0x495b8b(0xc3b)][_0x495b8b(0x6a3)](this,_0x56cefc);},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0xcc5)]=function(_0x33f47d,_0xa208f5){const _0x2534c0=_0x397c95;_0x33f47d[_0x2534c0(0x60e)]=_0xa208f5;},Spriteset_Battle[_0x397c95(0x6cf)]['changeBattlebacks']=function(_0x225da9,_0x3891ba){const _0x2ec819=_0x397c95;_0x225da9=_0x225da9||'',_0x3891ba=_0x3891ba||'';_0x225da9===''&&_0x3891ba===''&&(_0x225da9=this['_back1Sprite'][_0x2ec819(0x963)](),_0x3891ba=this[_0x2ec819(0x944)][_0x2ec819(0xce0)]());const _0x249de5=ImageManager[_0x2ec819(0x28d)](_0x225da9),_0x5164fb=ImageManager['loadBattleback2'](_0x3891ba);_0x249de5[_0x2ec819(0xb7c)](this[_0x2ec819(0xbef)][_0x2ec819(0x16e)](this,this[_0x2ec819(0x7ba)],this[_0x2ec819(0x944)],_0x249de5,_0x5164fb));},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0xbef)]=function(_0x69c65e,_0x17a8ce,_0x3bef70,_0x1ffef7){const _0x47ea0c=_0x397c95;_0x1ffef7[_0x47ea0c(0xb7c)](this['updateBattlebackBitmap2'][_0x47ea0c(0x16e)](this,_0x69c65e,_0x17a8ce,_0x3bef70,_0x1ffef7));},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x5b0)]=function(_0x1ab3f7,_0x349c8a,_0x7dc4ea,_0x5bbdc5){const _0x4681b4=_0x397c95;_0x1ab3f7[_0x4681b4(0x60e)]=_0x7dc4ea,_0x349c8a['bitmap']=_0x5bbdc5,_0x1ab3f7['adjustPosition'](),_0x349c8a[_0x4681b4(0x260)]();},VisuMZ['BattleCore'][_0x397c95(0x158)]=Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x53b)],Spriteset_Battle[_0x397c95(0x6cf)]['createBattleField']=function(){const _0x31b97a=_0x397c95;VisuMZ['BattleCore'][_0x31b97a(0x158)][_0x31b97a(0x6a3)](this),this[_0x31b97a(0x219)]();},Spriteset_Battle[_0x397c95(0x6cf)]['createBattleFieldBattleCore']=function(){const _0x3973ef=_0x397c95;this[_0x3973ef(0x4b5)](),this[_0x3973ef(0x9c6)](),this['createAnimationContainer'](),this[_0x3973ef(0x31e)](),this[_0x3973ef(0x17c)]();},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x4b5)]=function(){const _0x489824=_0x397c95;this[_0x489824(0xc2c)]=new Sprite(),this[_0x489824(0x713)][_0x489824(0x5ab)](this[_0x489824(0xc2c)]);},Spriteset_Battle[_0x397c95(0x6cf)]['createAnimationContainer']=function(){const _0x261be1=_0x397c95;this[_0x261be1(0x239)]=new Sprite(),Spriteset_Battle[_0x261be1(0x805)]?_0x261be1(0xc74)!=='pCYKe'?this[_0x261be1(0x5ab)](this['_animationContainer']):_0x3636f5['BattleCore']['Window_BattleLog_displayMiss']['call'](this,_0x5cd061):this[_0x261be1(0x713)][_0x261be1(0x5ab)](this[_0x261be1(0x239)]);},Spriteset_Battle['prototype']['createDamageContainer']=function(){const _0x2998b1=_0x397c95;this[_0x2998b1(0x928)]=new Sprite(),this[_0x2998b1(0x928)]['x']=this[_0x2998b1(0x713)]['x'],this[_0x2998b1(0x928)]['y']=this[_0x2998b1(0x713)]['y'],this[_0x2998b1(0x5ab)](this[_0x2998b1(0x928)]);},Spriteset_Battle[_0x397c95(0x6cf)]['adjustFlippedBattlefield']=function(){const _0x4192d8=_0x397c95;if(!this[_0x4192d8(0xa46)]())return;this['_battlerContainer']['scale']['x']=-0x1,this[_0x4192d8(0xc2c)]['x']=this[_0x4192d8(0x713)][_0x4192d8(0x76b)],this[_0x4192d8(0x625)][_0x4192d8(0x2b2)]['x']=-0x1,this['_uiContainer']['x']=this[_0x4192d8(0x713)][_0x4192d8(0x76b)],this[_0x4192d8(0x239)][_0x4192d8(0x2b2)]['x']=-0x1,this['_animationContainer']['x']=this['_battleField'][_0x4192d8(0x76b)],this[_0x4192d8(0x928)]['scale']['x']=-0x1,this['_damageContainer']['x']=this[_0x4192d8(0x713)]['x']+this[_0x4192d8(0x713)][_0x4192d8(0x76b)];},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x9cd)]=function(){const _0x37f718=_0x397c95;Imported['VisuMZ_0_CoreEngine']&&this[_0x37f718(0x6d4)]()&&this['repositionEnemiesByResolution']();const _0x37d69d=$gameTroop[_0x37f718(0x2e0)](),_0x5cb8e6=[];for(const _0x567d2b of _0x37d69d){_0x5cb8e6['push'](new Sprite_Enemy(_0x567d2b));}_0x5cb8e6[_0x37f718(0x82a)](this['compareEnemySprite'][_0x37f718(0x16e)](this));for(const _0x275b68 of _0x5cb8e6){this[_0x37f718(0xc2c)]['addChild'](_0x275b68);}this[_0x37f718(0x6d8)]=_0x5cb8e6;},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0xbff)]=function(){const _0x3bd36c=_0x397c95;this[_0x3bd36c(0xa3a)]=[];for(let _0x3c3b23=0x0;_0x3c3b23<$gameParty[_0x3bd36c(0xb05)]();_0x3c3b23++){if('OYZmN'!==_0x3bd36c(0x3c4)){const _0x27a79e=$gameParty[_0x3bd36c(0x7ee)]()[_0x3c3b23],_0x51c97c=new Sprite_Actor();_0x51c97c[_0x3bd36c(0xc70)](_0x27a79e),_0x51c97c[_0x3bd36c(0x52a)](_0x27a79e),_0x51c97c['update'](),this[_0x3bd36c(0xa3a)]['push'](_0x51c97c),this[_0x3bd36c(0xc2c)][_0x3bd36c(0x5ab)](_0x51c97c);}else _0x4edf52[_0x3bd36c(0x1f3)][_0x3bd36c(0x716)][_0x3bd36c(0x7c8)][_0x3bd36c(0x2a9)]&&(this[_0x3bd36c(0x22d)](),this[_0x3bd36c(0x696)]());}},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x881)]=function(_0x2412fd,_0x130727,_0x1bdec3,_0x5c09fb){const _0x34b735=_0x397c95,_0x3b2ee3=this[_0x34b735(0x48b)](_0x130727),_0x5a6c20=new(_0x3b2ee3?Sprite_AnimationMV:Sprite_Animation)(),_0x240078=this[_0x34b735(0x200)](_0x2412fd);this[_0x34b735(0xa8d)](_0x2412fd[0x0])&&(_0x34b735(0x8f2)===_0x34b735(0x8f2)?_0x1bdec3=!_0x1bdec3:this[_0x34b735(0x5d8)]()),_0x5a6c20[_0x34b735(0x402)]=_0x2412fd,_0x5a6c20[_0x34b735(0x74a)](_0x240078,_0x130727,_0x1bdec3,_0x5c09fb),this[_0x34b735(0x23b)](_0x5a6c20);},Spriteset_Battle['prototype'][_0x397c95(0x23b)]=function(_0x2cdf12){const _0x122695=_0x397c95;this[_0x122695(0x7cf)](_0x2cdf12)?'olOgx'!=='iQxbV'?(this['battleStatusWindowAnimationContainer']()['addChild'](_0x2cdf12),_0x2cdf12[_0x122695(0x43b)]=!![]):this[_0x122695(0x2b7)]()[_0x122695(0xa8a)](_0x4a39d3):(this[_0x122695(0x239)][_0x122695(0x5ab)](_0x2cdf12),Spriteset_Battle[_0x122695(0x805)]&&(this[_0x122695(0x239)]['x']=this[_0x122695(0x6f5)]['x'],this[_0x122695(0x239)]['y']=this[_0x122695(0x6f5)]['y'])),this['_animationSprites'][_0x122695(0x4da)](_0x2cdf12);},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x7cf)]=function(_0x1e8332){const _0x133310=_0x397c95;if(!_0x1e8332)return![];if(!_0x1e8332[_0x133310(0xbd1)])return![];if(!_0x1e8332[_0x133310(0x402)][0x0])return![];if(_0x1e8332[_0x133310(0x402)][0x0]['isActor']&&!_0x1e8332['targetObjects'][0x0][_0x133310(0x850)]())return![];if($gameSystem[_0x133310(0x221)]())return![];if(!this[_0x133310(0x2b7)]())return![];if(_0x1e8332[_0x133310(0x32a)]===Sprite_Animation){if(_0x133310(0x86f)===_0x133310(0x86f)){if(_0x1e8332[_0x133310(0xbd1)][_0x133310(0xa88)]!==0x0)return![];}else{const _0x143342=_0x407823[_0x133310(0x403)](_0x2caed2[_0x133310(0x76b)]/0x2),_0x1eb769=_0x247598[_0x133310(0x403)](_0x3def86[_0x133310(0x9b1)]/0x2);_0xd619f4[_0x133310(0xcb3)](_0x143342,_0x1eb769,_0x3aff84['Duration'],_0x3e25cf['EasingType']);}}else{if(_0x1e8332[_0x133310(0x32a)]===Sprite_AnimationMV){if(_0x133310(0x3d0)===_0x133310(0x3d0)){if(_0x1e8332[_0x133310(0xbd1)][_0x133310(0x6c8)]===0x3)return![];}else{const _0x3db797=_0x3bfd3a[_0x133310(0x772)](),_0x94759=this[_0x133310(0x1a1)][_0x133310(0x432)]();_0x3db797['setSkill'](_0x94759),_0x2a3304[_0x133310(0x793)]()[_0x133310(0x5ad)](_0x31d8e4[_0x94759]),this[_0x133310(0x8f7)]();}}}return!![];const _0x4a6c48=Window_BattleStatus[_0x133310(0x6cf)][_0x133310(0x1b2)]();return['xp','portrait'][_0x133310(0xa01)](_0x4a6c48);},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x2b7)]=function(){const _0x2f8776=_0x397c95;if(!SceneManager[_0x2f8776(0x6fe)])return null;if(!SceneManager[_0x2f8776(0x6fe)][_0x2f8776(0x1e8)])return null;if(!SceneManager[_0x2f8776(0x6fe)][_0x2f8776(0x1e8)][_0x2f8776(0x6f5)])return null;return SceneManager['_scene'][_0x2f8776(0x1e8)][_0x2f8776(0x6f5)];},Spriteset_Battle['prototype'][_0x397c95(0xb4d)]=function(_0x4d0759){const _0x516553=_0x397c95;this[_0x516553(0x4aa)](_0x4d0759);for(const _0x52ffd6 of _0x4d0759[_0x516553(0x402)]){if(_0x52ffd6[_0x516553(0x9e1)]){if(_0x516553(0xb37)!=='nmllI')_0x52ffd6[_0x516553(0x9e1)]();else return this[_0x516553(0x1b7)](_0x438ef0);}}_0x4d0759['destroy']();},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x4aa)]=function(_0x42b53a){const _0xfc0808=_0x397c95;this[_0xfc0808(0x7cf)](_0x42b53a)?this[_0xfc0808(0x2b7)]()[_0xfc0808(0xa8a)](_0x42b53a):this[_0xfc0808(0x239)][_0xfc0808(0xa8a)](_0x42b53a);this[_0xfc0808(0x6f5)][_0xfc0808(0xa8a)](_0x42b53a),this[_0xfc0808(0x239)]['removeChild'](_0x42b53a),this['_animationSprites'][_0xfc0808(0x723)](_0x42b53a);if(this['_fauxAnimationSprites'])this['_fauxAnimationSprites'][_0xfc0808(0x723)](_0x42b53a);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x82e)]=Spriteset_Battle['prototype'][_0x397c95(0x9c9)],Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x9c9)]=function(){const _0x1ca11b=_0x397c95;VisuMZ[_0x1ca11b(0x1f3)]['Spriteset_Battle_updateActors'][_0x1ca11b(0x6a3)](this),this[_0x1ca11b(0x5af)]();},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x5af)]=function(){const _0x23e83a=_0x397c95;this[_0x23e83a(0xc2c)][_0x23e83a(0x581)][_0x23e83a(0x82a)](this[_0x23e83a(0x875)][_0x23e83a(0x16e)](this)),this[_0x23e83a(0x3c3)]();},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x875)]=function(_0xe7bdb,_0x3ed8ca){const _0xa27687=_0x397c95;if(VisuMZ[_0xa27687(0x1f3)]['Settings'][_0xa27687(0xc24)][_0xa27687(0x773)]){if(_0xe7bdb[_0xa27687(0xcfb)]&&_0x3ed8ca['_battler']){if(_0xe7bdb['_battler'][_0xa27687(0x850)]()&&_0x3ed8ca[_0xa27687(0xcfb)][_0xa27687(0x407)]())return 0x1;else{if(_0x3ed8ca[_0xa27687(0xcfb)][_0xa27687(0x850)]()&&_0xe7bdb[_0xa27687(0xcfb)][_0xa27687(0x407)]())return-0x1;}}}return _0xe7bdb[_0xa27687(0x39a)]!==_0x3ed8ca['_baseY']?_0xe7bdb['_baseY']-_0x3ed8ca[_0xa27687(0x39a)]:_0x3ed8ca[_0xa27687(0x834)]-_0xe7bdb['spriteId'];},Spriteset_Battle['prototype']['putActiveBattlerOnTop']=function(){const _0x12eda9=_0x397c95;if(!VisuMZ[_0x12eda9(0x1f3)][_0x12eda9(0x716)][_0x12eda9(0xc24)]['PrioritySortActive'])return;const _0x16f3bf=BattleManager['_subject'];if(_0x16f3bf){if(_0x12eda9(0x98d)!==_0x12eda9(0x98d))this[_0x12eda9(0x534)]=_0x5bb98e;else{if(_0x16f3bf[_0x12eda9(0x850)]()&&!$gameSystem[_0x12eda9(0x221)]())return;const _0x3f61dc=_0x16f3bf['battler']();if(_0x3f61dc&&_0x16f3bf['isActor']())this[_0x12eda9(0xc2c)]['addChild'](_0x3f61dc);}}},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x96c)]=function(){const _0x4cf55e=_0x397c95;for(const _0x2c5e9f of $gameParty[_0x4cf55e(0x4c3)]()){if('SuZAM'!==_0x4cf55e(0x54c)){if(!_0x2c5e9f)continue;if(!_0x2c5e9f[_0x4cf55e(0x7eb)]())continue;_0x2c5e9f[_0x4cf55e(0x7eb)]()[_0x4cf55e(0x587)]=!![],_0x2c5e9f[_0x4cf55e(0x7eb)]()[_0x4cf55e(0x9aa)]();}else{let _0x2f85ae=_0x562d30['BattleCore'][_0x4cf55e(0xad0)][_0x4cf55e(0x6a3)](this,_0x19dc74);return _0x2f85ae=this[_0x4cf55e(0xc49)]['hitRate']*_0x2f85ae+this[_0x4cf55e(0xc49)][_0x4cf55e(0x83a)],_0x2f85ae;}}},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x9c6)]=function(){const _0x3f8e0e=_0x397c95;this[_0x3f8e0e(0x625)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x3f8e0e(0x5ab)](this[_0x3f8e0e(0x625)]):this[_0x3f8e0e(0x713)]['addChild'](this[_0x3f8e0e(0x625)]),SceneManager[_0x3f8e0e(0x6fe)][_0x3f8e0e(0x625)]=this[_0x3f8e0e(0x625)];},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0xb50)]=function(){const _0x25b7ef=_0x397c95;if(VisuMZ[_0x25b7ef(0x1f3)][_0x25b7ef(0x716)][_0x25b7ef(0x7de)][_0x25b7ef(0x655)])return;this['_enemyNameContainer']=new Sprite(),BattleManager['addChildToUiContainer'](this[_0x25b7ef(0x536)]);for(const _0x164f8a of this['_enemySprites']){if(_0x25b7ef(0x270)===_0x25b7ef(0x49a)){if(_0x2137d7[_0x25b7ef(0x4fd)]>_0x4ebe18)_0x39045b+=_0x4d1651[_0x25b7ef(0x76b)]/0x2+_0x1ad4f5;if(_0xc5dcb4[_0x25b7ef(0x4fd)]<_0x423226)_0x268e6c-=_0xcda9a1[_0x25b7ef(0x76b)]/0x2+_0x4a3d75;}else{const _0x23d738=new Sprite_EnemyName();this[_0x25b7ef(0x536)][_0x25b7ef(0x5ab)](_0x23d738),_0x23d738[_0x25b7ef(0x90d)](_0x164f8a);}}},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x4ef)]=function(){const _0xada803=_0x397c95;if(!this[_0xada803(0x928)])return;if(!this[_0xada803(0x625)])return;const _0x56edfe=Spriteset_Battle[_0xada803(0x805)]?this[_0xada803(0x928)]['x']:0x0,_0x101793=Spriteset_Battle[_0xada803(0x805)]?this['_damageContainer']['y']:0x0,_0x3ffdfb=Imported[_0xada803(0x35e)]?this[_0xada803(0x713)]['x']:0x0,_0x54f6e0=Imported['VisuMZ_3_ActSeqCamera']?this['_battleField']['y']:0x0;this[_0xada803(0x625)]['x']=_0x56edfe+_0x3ffdfb,this['_uiContainer']['y']=_0x101793+_0x54f6e0;},BattleManager[_0x397c95(0x20d)]=function(_0x13e184){const _0x210b86=_0x397c95;if(!SceneManager[_0x210b86(0x6fe)][_0x210b86(0x625)])return;SceneManager[_0x210b86(0x6fe)]['_uiContainer'][_0x210b86(0x5ab)](_0x13e184);},Spriteset_Battle['prototype'][_0x397c95(0x5af)]=function(){const _0x338030=_0x397c95;if(!this[_0x338030(0xc2c)])return;this[_0x338030(0xc2c)][_0x338030(0x2c9)]=this[_0x338030(0x758)]();},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x758)]=function(){return 0xff;},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0xc5e)]=function(){return![];},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0xa2b)]=function(){const _0x553aba=_0x397c95;return this[_0x553aba(0x91c)]()[_0x553aba(0x4f0)](_0x22d4b1=>_0x22d4b1[_0x553aba(0x8b3)]());},Spriteset_Battle['prototype'][_0x397c95(0xc01)]=function(){const _0x58039b=_0x397c95;return this[_0x58039b(0x91c)]()['some'](_0xab4136=>_0xab4136[_0x58039b(0x50c)]());},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x2de)]=function(){const _0x4c22d5=_0x397c95;return this[_0x4c22d5(0x91c)]()[_0x4c22d5(0x4f0)](_0x3f168b=>_0x3f168b[_0x4c22d5(0x9c8)]());},Spriteset_Battle[_0x397c95(0x6cf)][_0x397c95(0x232)]=function(){const _0x1732bd=_0x397c95;return this[_0x1732bd(0x91c)]()[_0x1732bd(0x4f0)](_0x19cd25=>_0x19cd25[_0x1732bd(0x32e)]());},Spriteset_Battle['prototype'][_0x397c95(0xd0d)]=function(){const _0x497e3b=_0x397c95;return this['battlerSprites']()['some'](_0x4cfd96=>_0x4cfd96[_0x497e3b(0xc16)]());},Spriteset_Battle[_0x397c95(0x6cf)]['isAnyoneChangingOpacity']=function(){const _0x2e2d43=_0x397c95;return this[_0x2e2d43(0x91c)]()[_0x2e2d43(0x4f0)](_0x23613d=>_0x23613d[_0x2e2d43(0xb15)]());},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xc7c)]=Window_ItemList[_0x397c95(0x6cf)][_0x397c95(0x21e)],Window_ItemList['prototype'][_0x397c95(0x21e)]=function(){const _0x2770b8=_0x397c95;if(SceneManager['isSceneBattle']()){if(SceneManager['_scene'][_0x2770b8(0x1b2)]()===_0x2770b8(0x8fe))return VisuMZ[_0x2770b8(0x1f3)][_0x2770b8(0x716)]['BattleLayout'][_0x2770b8(0xc4e)];else{if(_0x2770b8(0xcbb)!==_0x2770b8(0xc59))return VisuMZ[_0x2770b8(0x1f3)][_0x2770b8(0x716)]['BattleLayout'][_0x2770b8(0x2af)];else{if(!_0x4ff74e[_0x2770b8(0x650)]())return;_0x47d6ef[_0x2770b8(0x5ff)](_0x7deaa9,_0x4cfbb3);const _0x10782f=_0x2e69a7['_action'],_0x92db09={'criticalHitRate':_0x46030f[_0x2770b8(0x3bb)],'criticalHitFlat':_0x9a52a0[_0x2770b8(0xc5d)],'criticalDmgRate':_0x1ccf47[_0x2770b8(0xbfd)],'criticalDmgFlat':_0x5efba8['CriticalDmgFlat'],'damageRate':_0x2c05d0[_0x2770b8(0x553)],'damageFlat':_0x235114[_0x2770b8(0x65b)],'hitRate':_0x4a9760[_0x2770b8(0xd15)],'hitFlat':_0x15572b[_0x2770b8(0x6ea)]};_0x10782f[_0x2770b8(0xc49)]=_0x92db09;}}}else return VisuMZ[_0x2770b8(0x1f3)]['Window_ItemList_maxCols'][_0x2770b8(0x6a3)](this);},VisuMZ['BattleCore'][_0x397c95(0x27e)]=Window_SkillList[_0x397c95(0x6cf)][_0x397c95(0x21e)],Window_SkillList[_0x397c95(0x6cf)][_0x397c95(0x21e)]=function(){const _0x2ccacd=_0x397c95;if(SceneManager[_0x2ccacd(0x650)]()){if(_0x2ccacd(0x6fa)===_0x2ccacd(0x2ac))_0x445f6e+=_0x10f051,_0x1d8a58+=_0x269986[_0x2ccacd(0x850)]()?-_0x5dc8b1:_0x4d909c;else{if(SceneManager['_scene'][_0x2ccacd(0x1b2)]()===_0x2ccacd(0x8fe)){if(_0x2ccacd(0xcac)!==_0x2ccacd(0x175))return VisuMZ[_0x2ccacd(0x1f3)]['Settings']['BattleLayout'][_0x2ccacd(0xc4e)];else _0x232f7f[_0x2ccacd(0xb89)](_0x4450c8),_0xc4d79c[_0x2ccacd(0x173)]();}else return VisuMZ['BattleCore'][_0x2ccacd(0x716)]['BattleLayout']['SkillItemStandardCols'];}}else return _0x2ccacd(0xcf2)!==_0x2ccacd(0xcf2)?'icon':VisuMZ[_0x2ccacd(0x1f3)]['Window_SkillList_maxCols'][_0x2ccacd(0x6a3)](this);},VisuMZ['BattleCore'][_0x397c95(0x80d)]=Window_Options[_0x397c95(0x6cf)][_0x397c95(0x185)],Window_Options[_0x397c95(0x6cf)][_0x397c95(0x185)]=function(){const _0x43540c=_0x397c95;VisuMZ[_0x43540c(0x1f3)][_0x43540c(0x80d)]['call'](this),this[_0x43540c(0x676)](),this['addShowHpGaugeCommand']();},Window_Options['prototype']['addAutoBattleCommands']=function(){const _0x2a68d6=_0x397c95;VisuMZ['BattleCore'][_0x2a68d6(0x716)][_0x2a68d6(0x7c8)]['AddOption']&&(this[_0x2a68d6(0x22d)](),this[_0x2a68d6(0x696)]());},Window_Options[_0x397c95(0x6cf)][_0x397c95(0xbed)]=function(){const _0x4f1d52=_0x397c95;if(!VisuMZ[_0x4f1d52(0x1f3)][_0x4f1d52(0x716)][_0x4f1d52(0xaef)]['AddHpGaugeOption'])return;const _0xb0fd92=TextManager['visualHpGauge'],_0x22ad75=_0x4f1d52(0x9d5);this['addCommand'](_0xb0fd92,_0x22ad75);},Window_Options[_0x397c95(0x6cf)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0x117d76=_0x397c95,_0x5bc0ad=TextManager[_0x117d76(0x679)],_0x2a33c5=_0x117d76(0x386);this[_0x117d76(0x659)](_0x5bc0ad,_0x2a33c5);},Window_Options['prototype'][_0x397c95(0x696)]=function(){const _0x5ac454=_0x397c95,_0xe637ca=TextManager[_0x5ac454(0x567)],_0x1c2b40=_0x5ac454(0xa03);this[_0x5ac454(0x659)](_0xe637ca,_0x1c2b40);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x26d)]=Window_Options[_0x397c95(0x6cf)][_0x397c95(0x2c5)],Window_Options[_0x397c95(0x6cf)][_0x397c95(0x2c5)]=function(_0x57697b){const _0x15547d=_0x397c95,_0x3d9683=this['commandSymbol'](_0x57697b);return _0x3d9683===_0x15547d(0xa03)?this['statusTextAutoBattleStyle']():VisuMZ[_0x15547d(0x1f3)][_0x15547d(0x26d)][_0x15547d(0x6a3)](this,_0x57697b);},Window_Options['prototype']['statusTextAutoBattleStyle']=function(){const _0x4f9a38=_0x397c95,_0x4504da=VisuMZ[_0x4f9a38(0x1f3)][_0x4f9a38(0x716)]['AutoBattle'],_0x47fef9=this[_0x4f9a38(0x80e)](_0x4f9a38(0xa03));return _0x47fef9?_0x4504da['StyleON']:_0x4504da['StyleOFF'];},Window_ShopStatus['prototype'][_0x397c95(0x9ac)]=function(){const _0x579005=_0x397c95,_0x4e2b3b=DataManager['getDamageStyle'](this[_0x579005(0x4f4)]),_0x2b1313=VisuMZ[_0x579005(0x1aa)][_0x4e2b3b];if(!_0x2b1313)return this['getItemDamageAmountLabelOriginal']();const _0x1acc6c=_0x579005(0x434)['format'](this[_0x579005(0x4f4)][_0x579005(0x649)][_0x579005(0xbaa)]),_0x2c799f=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x579005(0x649)]['type']];return _0x2b1313[_0x1acc6c][_0x579005(0xadd)](_0x2c799f);},Window_ShopStatus[_0x397c95(0x6cf)][_0x397c95(0x2a3)]=function(){const _0x2a79eb=_0x397c95,_0x3d9514=DataManager[_0x2a79eb(0x922)](this[_0x2a79eb(0x4f4)]),_0xf83df7=VisuMZ[_0x2a79eb(0x1aa)][_0x3d9514];if(!_0xf83df7)return this[_0x2a79eb(0x72a)]();return _0xf83df7[_0x2a79eb(0x683)][_0x2a79eb(0x6a3)](this);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x38a)]=Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x918)],Window_PartyCommand[_0x397c95(0x6cf)]['initialize']=function(_0x2f2cb4){const _0x266b20=_0x397c95;VisuMZ[_0x266b20(0x1f3)][_0x266b20(0x38a)]['call'](this,_0x2f2cb4),this['createCommandNameWindow'](_0x2f2cb4);},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x328)]=function(_0x1bb203){const _0xce4acd=_0x397c95,_0x4501c9=new Rectangle(0x0,0x0,_0x1bb203[_0xce4acd(0x76b)],_0x1bb203[_0xce4acd(0x9b1)]);this[_0xce4acd(0x15b)]=new Window_Base(_0x4501c9),this[_0xce4acd(0x15b)][_0xce4acd(0x2c9)]=0x0,this[_0xce4acd(0x5ab)](this['_commandNameWindow']),this['updateCommandNameWindow']();},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x501)]=function(){const _0xd3204a=_0x397c95;Window_Command[_0xd3204a(0x6cf)][_0xd3204a(0x501)][_0xd3204a(0x6a3)](this);if(this[_0xd3204a(0x15b)])this[_0xd3204a(0x318)]();},Window_PartyCommand['prototype'][_0x397c95(0x318)]=function(){const _0x587239=_0x397c95,_0x55ca99=this['_commandNameWindow'];_0x55ca99['contents'][_0x587239(0x15f)]();const _0x31f1da=this['commandStyleCheck'](this[_0x587239(0x6e7)]());if(_0x31f1da===_0x587239(0x1ff)&&this['maxItems']()>0x0){const _0x4748a3=this['itemLineRect'](this[_0x587239(0x6e7)]());let _0x3507c0=this[_0x587239(0xaaf)](this[_0x587239(0x6e7)]());_0x3507c0=_0x3507c0[_0x587239(0x2bd)](/\\I\[(\d+)\]/gi,''),_0x55ca99[_0x587239(0x698)](),this[_0x587239(0xb12)](_0x3507c0,_0x4748a3),this['commandNameWindowDrawText'](_0x3507c0,_0x4748a3),this[_0x587239(0x4cc)](_0x3507c0,_0x4748a3);}},Window_PartyCommand[_0x397c95(0x6cf)]['commandNameWindowDrawBackground']=function(_0x371504,_0x2d92e9){},Window_PartyCommand[_0x397c95(0x6cf)]['commandNameWindowDrawText']=function(_0x2909c4,_0x5c90a8){const _0x44ec36=_0x397c95,_0x38bfa6=this[_0x44ec36(0x15b)];_0x38bfa6[_0x44ec36(0x7af)](_0x2909c4,0x0,_0x5c90a8['y'],_0x38bfa6['innerWidth'],'center');},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x4cc)]=function(_0x1dc2ba,_0x3c62b1){const _0x4579f0=_0x397c95,_0x3beead=this[_0x4579f0(0x15b)],_0x11b579=$gameSystem['windowPadding'](),_0x3970c0=_0x3c62b1['x']+Math[_0x4579f0(0xaee)](_0x3c62b1[_0x4579f0(0x76b)]/0x2)+_0x11b579;_0x3beead['x']=_0x3beead[_0x4579f0(0x76b)]/-0x2+_0x3970c0,_0x3beead['y']=Math['floor'](_0x3c62b1[_0x4579f0(0x9b1)]/0x2);},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0xa51)]=function(){const _0x58e9cf=_0x397c95;this[_0x58e9cf(0x8e6)](),this[_0x58e9cf(0x49b)](),this['addCustomCommands'](),this[_0x58e9cf(0x70e)](),this[_0x58e9cf(0xa1e)]();},Window_PartyCommand['prototype'][_0x397c95(0x8e6)]=function(){const _0x1b0583=_0x397c95,_0x363492=this[_0x1b0583(0x13b)](),_0x2b2397=VisuMZ[_0x1b0583(0x1f3)][_0x1b0583(0x716)]['PartyCmd'][_0x1b0583(0x57d)],_0x296e12=_0x363492===_0x1b0583(0x663)?TextManager['fight']:_0x1b0583(0xb72)[_0x1b0583(0xadd)](_0x2b2397,TextManager['fight']),_0x65ef4f=this[_0x1b0583(0x9c3)]();this[_0x1b0583(0x659)](_0x296e12,'fight',_0x65ef4f);},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x9c3)]=function(){return!![];},Window_PartyCommand['prototype'][_0x397c95(0x49b)]=function(){const _0x52855d=_0x397c95;if(!this[_0x52855d(0x745)]())return;const _0x47b3c3=this[_0x52855d(0x13b)](),_0x192c94=VisuMZ[_0x52855d(0x1f3)][_0x52855d(0x716)][_0x52855d(0x982)]['CmdIconAutoBattle'],_0x391298=_0x47b3c3==='text'?TextManager[_0x52855d(0xbea)]:_0x52855d(0xb72)[_0x52855d(0xadd)](_0x192c94,TextManager[_0x52855d(0xbea)]),_0x57d7d3=this[_0x52855d(0x25c)]();this[_0x52855d(0x659)](_0x391298,_0x52855d(0xbea),_0x57d7d3);},Window_PartyCommand['prototype'][_0x397c95(0x745)]=function(){const _0x3480b0=_0x397c95;return VisuMZ[_0x3480b0(0x1f3)][_0x3480b0(0x716)]['PartyCmd'][_0x3480b0(0xc95)];},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x25c)]=function(){return!![];},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x3c9)]=function(){},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x70e)]=function(){const _0x58e4fe=_0x397c95;if(!this[_0x58e4fe(0x9de)]())return;const _0x31fc17=this[_0x58e4fe(0x13b)](),_0x5a01d4=VisuMZ[_0x58e4fe(0x1f3)]['Settings'][_0x58e4fe(0x982)][_0x58e4fe(0x51e)],_0x36110c=_0x31fc17===_0x58e4fe(0x663)?TextManager[_0x58e4fe(0x3bf)]:_0x58e4fe(0xb72)[_0x58e4fe(0xadd)](_0x5a01d4,TextManager[_0x58e4fe(0x3bf)]),_0x3b2ec5=this[_0x58e4fe(0x83b)]();this['addCommand'](_0x36110c,_0x58e4fe(0x3bf),_0x3b2ec5);},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x9de)]=function(){const _0x4cf010=_0x397c95;return VisuMZ[_0x4cf010(0x1f3)][_0x4cf010(0x716)][_0x4cf010(0x982)]['CommandAddOptions'];},Window_PartyCommand['prototype'][_0x397c95(0x83b)]=function(){return!![];},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0xa1e)]=function(){const _0x41fdf6=_0x397c95,_0x457d4a=this[_0x41fdf6(0x13b)](),_0x56addc=VisuMZ['BattleCore'][_0x41fdf6(0x716)][_0x41fdf6(0x982)][_0x41fdf6(0xa07)],_0x4343b0=_0x457d4a===_0x41fdf6(0x663)?TextManager['escape']:_0x41fdf6(0xb72)['format'](_0x56addc,TextManager['escape']),_0xe4dae8=this[_0x41fdf6(0x7c4)]();this[_0x41fdf6(0x659)](_0x4343b0,_0x41fdf6(0x95b),_0xe4dae8);},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x7c4)]=function(){const _0x31be44=_0x397c95;return BattleManager[_0x31be44(0x58c)]();},Window_PartyCommand['prototype'][_0x397c95(0xab7)]=function(){const _0x301c85=_0x397c95;return VisuMZ['BattleCore'][_0x301c85(0x716)][_0x301c85(0x982)]['CmdTextAlign'];},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x3fa)]=function(_0x57088f){const _0x36376a=_0x397c95,_0xd16c31=this['commandStyleCheck'](_0x57088f);if(_0xd16c31===_0x36376a(0x437))this[_0x36376a(0xc9b)](_0x57088f);else _0xd16c31===_0x36376a(0x1ff)?_0x36376a(0x1ce)==='KUiHa'?_0x4c4786['actionBattleCoreJS']('PreEndActionJS'):this[_0x36376a(0x454)](_0x57088f):Window_Command[_0x36376a(0x6cf)][_0x36376a(0x3fa)][_0x36376a(0x6a3)](this,_0x57088f);},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x13b)]=function(){const _0x5ab755=_0x397c95;return VisuMZ['BattleCore'][_0x5ab755(0x716)][_0x5ab755(0x982)][_0x5ab755(0x976)];},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x390)]=function(_0xca6bb){const _0x163060=_0x397c95;if(_0xca6bb<0x0)return _0x163060(0x663);const _0x49bb78=this[_0x163060(0x13b)]();if(_0x49bb78!==_0x163060(0x5f2))return _0x49bb78;else{if(this[_0x163060(0x5b7)]()>0x0){if('IXMEz'!==_0x163060(0x283)){const _0x3386e5=_0x472ba2[_0x163060(0x1f3)][_0x163060(0x716)][_0x163060(0x7de)];_0x3386e5[_0x163060(0xd12)]?this[_0x163060(0xba4)]():this[_0x163060(0xcb6)]();}else{const _0x22d36c=this[_0x163060(0xaaf)](_0xca6bb);if(_0x22d36c[_0x163060(0xb38)](/\\I\[(\d+)\]/i)){const _0xb736f1=this[_0x163060(0x296)](_0xca6bb),_0x291c48=this[_0x163060(0x5cd)](_0x22d36c)[_0x163060(0x76b)];if(_0x291c48<=_0xb736f1[_0x163060(0x76b)]){if(_0x163060(0x66e)!==_0x163060(0x66e))_0x58bbe0['BattleCore'][_0x163060(0x843)][_0x163060(0x6a3)](this),this[_0x163060(0x60e)]&&(this['bitmap'][_0x163060(0x6bc)]=_0x3f953e[_0x163060(0x1f3)]['Settings']['Actor']['SmoothImage']);else return _0x163060(0x437);}else{if('SQWmP'==='SQWmP')return'icon';else{const _0x40ad8c=_0x44ff3c[_0x163060(0xc0a)](_0x76be31);this[_0x163060(0x86b)]['opacity']=0x0,_0x40ad8c[_0x163060(0xb7c)](this[_0x163060(0x1ec)][_0x163060(0x16e)](this,_0x40ad8c));}}}}}}return'text';},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0xc9b)]=function(_0x517f57){const _0x252ef3=_0x397c95,_0x5bae01=this[_0x252ef3(0x296)](_0x517f57),_0x58dc54=this['commandName'](_0x517f57),_0x50f09d=this[_0x252ef3(0x5cd)](_0x58dc54)[_0x252ef3(0x76b)];this[_0x252ef3(0xb0d)](this[_0x252ef3(0x216)](_0x517f57));const _0x19dfdd=this[_0x252ef3(0xab7)]();if(_0x19dfdd===_0x252ef3(0x4d5))this['drawTextEx'](_0x58dc54,_0x5bae01['x']+_0x5bae01[_0x252ef3(0x76b)]-_0x50f09d,_0x5bae01['y'],_0x50f09d);else{if(_0x19dfdd==='center'){if(_0x252ef3(0xc1d)===_0x252ef3(0xc1d)){const _0x4ee0d7=_0x5bae01['x']+Math[_0x252ef3(0xaee)]((_0x5bae01['width']-_0x50f09d)/0x2);this['drawTextEx'](_0x58dc54,_0x4ee0d7,_0x5bae01['y'],_0x50f09d);}else{const _0x255003=_0x55ade9[_0x252ef3(0x1f3)][_0x252ef3(0x716)]['Actor'],_0x2ed63a=this[_0x252ef3(0xcfb)]&&this[_0x252ef3(0xcfb)][_0x252ef3(0x850)]()?0x1:-0x1,_0x93a0de=this[_0x252ef3(0x4fd)]-this['_homeX']+_0x2ed63a*_0x255003[_0x252ef3(0xb9c)],_0xe98caa=this[_0x252ef3(0x39a)]-this[_0x252ef3(0x887)]+_0x2ed63a*_0x255003[_0x252ef3(0x96d)],_0x4567d4=_0x255003[_0x252ef3(0xc40)];this['startMove'](_0x93a0de,_0xe98caa,_0x4567d4);}}else this[_0x252ef3(0xa3c)](_0x58dc54,_0x5bae01['x'],_0x5bae01['y'],_0x50f09d);}},Window_PartyCommand['prototype'][_0x397c95(0x454)]=function(_0x170c0e){const _0x362541=_0x397c95;this[_0x362541(0xaaf)](_0x170c0e)['match'](/\\I\[(\d+)\]/i);const _0x501577=Number(RegExp['$1'])||0x0,_0x510282=this['itemLineRect'](_0x170c0e),_0x11ce63=_0x510282['x']+Math[_0x362541(0xaee)]((_0x510282[_0x362541(0x76b)]-ImageManager[_0x362541(0x8f5)])/0x2),_0x155f8d=_0x510282['y']+(_0x510282[_0x362541(0x9b1)]-ImageManager[_0x362541(0xb8f)])/0x2;this['drawIcon'](_0x501577,_0x11ce63,_0x155f8d);},Window_PartyCommand[_0x397c95(0x6cf)][_0x397c95(0x16a)]=function(){},Window_PartyCommand[_0x397c95(0x6cf)]['activate']=function(){const _0x142b5c=_0x397c95;Window_Command[_0x142b5c(0x6cf)][_0x142b5c(0x67c)][_0x142b5c(0x6a3)](this);const _0x437f85=this[_0x142b5c(0x1b2)]();if(_0x437f85===_0x142b5c(0x8fe)){if(_0x142b5c(0x8f6)!==_0x142b5c(0x8f6)){const _0x401fc1=this[_0x142b5c(0x51d)](),_0xb3ba57=_0x401fc1[0x0]?_0x401fc1[0x0][_0x142b5c(0x222)]:0x0,_0x56d665=_0x53fdd8[_0x142b5c(0x77a)][_0xb3ba57];_0x56d665&&this[_0x142b5c(0x7b2)](_0x56d665[_0x142b5c(0xa98)]);}else this[_0x142b5c(0x4c5)]();}},Window_PartyCommand[_0x397c95(0x6cf)]['battleLayoutStyle']=function(){const _0x52ef16=_0x397c95;if(this[_0x52ef16(0x7a0)])return this['_battleLayoutStyle'];return this[_0x52ef16(0x7a0)]=SceneManager['_scene'][_0x52ef16(0x1b2)](),this[_0x52ef16(0x7a0)];},Window_PartyCommand['prototype'][_0x397c95(0x628)]=function(){const _0x23182e=_0x397c95,_0x59f71c=VisuMZ[_0x23182e(0x1f3)]['Settings']['PartyCmd'],_0x4b10a4=this[_0x23182e(0x168)]();switch(_0x4b10a4){case _0x23182e(0x63f):this['_helpWindow'][_0x23182e(0x734)](_0x59f71c[_0x23182e(0x186)]);break;case _0x23182e(0xbea):this['_helpWindow'][_0x23182e(0x734)](_0x59f71c[_0x23182e(0xcd7)]);break;case _0x23182e(0x3bf):this[_0x23182e(0x2fa)]['setText'](_0x59f71c[_0x23182e(0xa57)]);break;case _0x23182e(0x95b):this[_0x23182e(0x2fa)][_0x23182e(0x734)](_0x59f71c[_0x23182e(0x310)]);break;default:this[_0x23182e(0x2fa)][_0x23182e(0x734)]('');break;}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x3b6)]=Window_ActorCommand[_0x397c95(0x6cf)]['initialize'],Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x918)]=function(_0x4004dd){const _0x2b1dd0=_0x397c95;VisuMZ[_0x2b1dd0(0x1f3)]['Window_ActorCommand_initialize'][_0x2b1dd0(0x6a3)](this,_0x4004dd),this[_0x2b1dd0(0x328)](_0x4004dd);},Window_ActorCommand['prototype'][_0x397c95(0x328)]=function(_0x42fc19){const _0x556ca9=_0x397c95,_0x474512=new Rectangle(0x0,0x0,_0x42fc19[_0x556ca9(0x76b)],_0x42fc19['height']);this[_0x556ca9(0x15b)]=new Window_Base(_0x474512),this['_commandNameWindow'][_0x556ca9(0x2c9)]=0x0,this[_0x556ca9(0x5ab)](this[_0x556ca9(0x15b)]),this[_0x556ca9(0x318)]();},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x501)]=function(){const _0x406363=_0x397c95;Window_Command[_0x406363(0x6cf)][_0x406363(0x501)][_0x406363(0x6a3)](this);if(this[_0x406363(0x15b)])this[_0x406363(0x318)]();},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x318)]=function(){const _0x528cbe=_0x397c95,_0x6cf1b9=this['_commandNameWindow'];_0x6cf1b9['contents'][_0x528cbe(0x15f)]();const _0x1a330b=this[_0x528cbe(0x390)](this[_0x528cbe(0x6e7)]());if(_0x1a330b===_0x528cbe(0x1ff)&&this[_0x528cbe(0x5b7)]()>0x0){if(_0x528cbe(0xa69)===_0x528cbe(0xa69)){const _0x3eb8ec=this[_0x528cbe(0x296)](this[_0x528cbe(0x6e7)]());let _0x7b68df=this[_0x528cbe(0xaaf)](this[_0x528cbe(0x6e7)]());_0x7b68df=_0x7b68df[_0x528cbe(0x2bd)](/\\I\[(\d+)\]/gi,''),_0x6cf1b9[_0x528cbe(0x698)](),this[_0x528cbe(0xb12)](_0x7b68df,_0x3eb8ec),this['commandNameWindowDrawText'](_0x7b68df,_0x3eb8ec),this[_0x528cbe(0x4cc)](_0x7b68df,_0x3eb8ec);}else this[_0x528cbe(0x8d0)]=this['_targetFloatHeight'];}},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0xb12)]=function(_0xf60c47,_0x3367bb){},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x352)]=function(_0x8eb905,_0x3b39a0){const _0x3cb086=_0x397c95,_0x27726f=this[_0x3cb086(0x15b)];_0x27726f[_0x3cb086(0x7af)](_0x8eb905,0x0,_0x3b39a0['y'],_0x27726f['innerWidth'],_0x3cb086(0x971));},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x4cc)]=function(_0x4ca2ae,_0x4ebc29){const _0x2ea951=_0x397c95,_0x3e243d=this['_commandNameWindow'],_0xa04120=$gameSystem['windowPadding'](),_0x5b974e=_0x4ebc29['x']+Math[_0x2ea951(0xaee)](_0x4ebc29[_0x2ea951(0x76b)]/0x2)+_0xa04120;_0x3e243d['x']=_0x3e243d[_0x2ea951(0x76b)]/-0x2+_0x5b974e,_0x3e243d['y']=Math[_0x2ea951(0xaee)](_0x4ebc29[_0x2ea951(0x9b1)]/0x2);},Window_ActorCommand[_0x397c95(0x6cf)]['makeCommandList']=function(){const _0x102805=_0x397c95;if(!this[_0x102805(0x347)])return;const _0x5c7620=this[_0x102805(0x347)]['battleCommands']();for(const _0x1e4c9d of _0x5c7620){this['makeBattleCommand'](_0x1e4c9d[_0x102805(0x27f)]()['trim']());}},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x419)]=function(_0x1fc121){const _0x14dec7=_0x397c95;_0x1fc121==='ATTACK'&&('RUxgH'!==_0x14dec7(0x795)?_0x2eab57['addBuff'](_0x152720,_0xd5b8e4):this[_0x14dec7(0xbb6)]());[_0x14dec7(0x778),_0x14dec7(0x556)][_0x14dec7(0x932)](_0x1fc121)&&(_0x14dec7(0x614)!==_0x14dec7(0x476)?this[_0x14dec7(0x5d8)]():(this[_0x14dec7(0x6a7)]=_0x338f68,this[_0x14dec7(0x445)]=-0x1,this[_0x14dec7(0x791)]=0x0,this['loadBitmap'](),this[_0x14dec7(0xb14)]()));_0x1fc121===_0x14dec7(0xa22)&&(_0x14dec7(0xa60)!==_0x14dec7(0xa60)?(_0x1b6b63*=-0x1,_0x6223aa*=-0x1):this[_0x14dec7(0xb23)]());_0x1fc121===_0x14dec7(0x5aa)&&(_0x14dec7(0x313)==='gBczq'?this[_0x14dec7(0x66a)]():this[_0x14dec7(0x1a1)][_0x14dec7(0x230)]());_0x1fc121===_0x14dec7(0x800)&&this[_0x14dec7(0xa1e)]();_0x1fc121===_0x14dec7(0x65a)&&this[_0x14dec7(0x49b)]();if(_0x1fc121[_0x14dec7(0xb38)](/STYPE: (\d+)/i)){if(_0x14dec7(0x7a9)!==_0x14dec7(0x7b4)){const _0xd04477=Number(RegExp['$1']);this['addSkillTypeCommand'](_0xd04477);}else return _0x1a2a14[_0x14dec7(0x1f3)][_0x14dec7(0xbb1)][_0x14dec7(0x6a3)](this);}else{if(_0x1fc121['match'](/STYPE: (.*)/i)){const _0x58f823=DataManager[_0x14dec7(0xbe6)](RegExp['$1']);this[_0x14dec7(0x631)](_0x58f823);}}_0x1fc121===_0x14dec7(0x537)&&this['addSingleSkillCommands']();if(_0x1fc121['match'](/SKILL: (\d+)/i)){const _0x2c808e=Number(RegExp['$1']);this[_0x14dec7(0x37d)]($dataSkills[_0x2c808e]);}else{if(_0x1fc121[_0x14dec7(0xb38)](/SKILL: (.*)/i)){const _0x3828dd=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x14dec7(0x37d)]($dataSkills[_0x3828dd]);}}_0x1fc121==='PARTY'&&Imported[_0x14dec7(0xcd3)]&&(_0x14dec7(0xb82)!==_0x14dec7(0x7bc)?this['addPartyCommand']():this['addAttackCommand']());['COMBATLOG',_0x14dec7(0x66c)]['includes'](_0x1fc121)&&Imported[_0x14dec7(0x89d)]&&this[_0x14dec7(0xb90)]();_0x1fc121===_0x14dec7(0x578)&&Imported[_0x14dec7(0x37b)]&&('NvWqW'!==_0x14dec7(0x7cc)?this['addWeaponSwapCommand'](!![]):this[_0x14dec7(0xc39)]=this['_defeatedEnemies']||[]);if(_0x1fc121===_0x14dec7(0xa7e)&&Imported[_0x14dec7(0xcc0)]){if(_0x14dec7(0x9d2)===_0x14dec7(0x9d2))this[_0x14dec7(0x2ff)]();else return this['isActiveTpb']();}},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0xbb6)]=function(){const _0x26b88d=_0x397c95,_0x4fa71e=$dataSkills[this['_actor'][_0x26b88d(0x363)]()];if(!_0x4fa71e)return;if(!this['canAddSkillCommand'](_0x4fa71e))return;const _0x284c87=this[_0x26b88d(0x13b)](),_0x1cf4ee=DataManager['battleCommandName'](_0x4fa71e),_0x2864d1=DataManager[_0x26b88d(0x539)](_0x4fa71e),_0x57dc37=_0x284c87==='text'?_0x1cf4ee:'\x5cI[%1]%2'[_0x26b88d(0xadd)](_0x2864d1,_0x1cf4ee);this['addCommand'](_0x57dc37,'attack',this[_0x26b88d(0x347)][_0x26b88d(0x1a6)]());},Window_ActorCommand['prototype'][_0x397c95(0xb23)]=function(){const _0x281e19=_0x397c95,_0x370ff0=$dataSkills[this[_0x281e19(0x347)][_0x281e19(0xb47)]()];if(!_0x370ff0)return;if(!this[_0x281e19(0x324)](_0x370ff0))return;const _0x48a78d=this[_0x281e19(0x13b)](),_0x5a0426=DataManager[_0x281e19(0x79c)](_0x370ff0),_0x85cd95=DataManager[_0x281e19(0x539)](_0x370ff0),_0x3c238a=_0x48a78d===_0x281e19(0x663)?_0x5a0426:_0x281e19(0xb72)[_0x281e19(0xadd)](_0x85cd95,_0x5a0426);this['addCommand'](_0x3c238a,_0x281e19(0x50e),this[_0x281e19(0x347)]['canGuard']());},Window_ActorCommand[_0x397c95(0x6cf)]['addItemCommand']=function(){const _0x17c5f0=_0x397c95,_0xf961ae=this[_0x17c5f0(0x13b)](),_0x24e33b=VisuMZ['BattleCore'][_0x17c5f0(0x716)]['ActorCmd']['CmdIconItem'],_0x2462fd=_0xf961ae===_0x17c5f0(0x663)?TextManager[_0x17c5f0(0x398)]:_0x17c5f0(0xb72)['format'](_0x24e33b,TextManager[_0x17c5f0(0x398)]),_0x3cdb2d=this['isItemCommandEnabled']();this[_0x17c5f0(0x659)](_0x2462fd,_0x17c5f0(0x398),_0x3cdb2d);},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x815)]=function(){const _0x55efca=_0x397c95;return this[_0x55efca(0x347)]&&this['_actor'][_0x55efca(0xb2b)]();},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x5d8)]=function(){const _0x2001ee=_0x397c95,_0x204e72=this[_0x2001ee(0x347)][_0x2001ee(0x19a)]();for(const _0x598969 of _0x204e72){this[_0x2001ee(0x631)](_0x598969);}},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x631)]=function(_0x3cac4c){const _0x1f805c=_0x397c95;let _0x5a34d3=$dataSystem[_0x1f805c(0x19a)][_0x3cac4c];if(!_0x5a34d3)return;let _0x542907=_0x5a34d3;const _0x5f59f1=this[_0x1f805c(0x13b)]();if(_0x5f59f1===_0x1f805c(0x663))_0x542907=_0x542907[_0x1f805c(0x2bd)](/\x1I\[(\d+)\]/gi,''),_0x542907=_0x542907[_0x1f805c(0x2bd)](/\\I\[(\d+)\]/gi,'');else{if(!_0x5a34d3[_0x1f805c(0xb38)](/\\I\[(\d+)\]/i)){const _0x2bfdd3=Imported[_0x1f805c(0x250)]?VisuMZ[_0x1f805c(0xc99)][_0x1f805c(0x716)][_0x1f805c(0x924)]:VisuMZ['BattleCore']['Settings'][_0x1f805c(0xa32)],_0xed48fa=$dataSystem[_0x1f805c(0x3ba)][_0x1f805c(0x932)](_0x3cac4c),_0x3edc3e=_0xed48fa?_0x2bfdd3[_0x1f805c(0x7db)]:_0x2bfdd3[_0x1f805c(0xad4)];_0x542907=_0x1f805c(0xb72)['format'](_0x3edc3e,_0x5a34d3);}}this[_0x1f805c(0x659)](_0x542907,_0x1f805c(0x54d),!![],_0x3cac4c);},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x2d8)]=function(){const _0x3210c6=_0x397c95,_0x17dba3=this[_0x3210c6(0x347)][_0x3210c6(0x19a)](),_0x122e17=this[_0x3210c6(0x347)][_0x3210c6(0x291)]();for(const _0x3d9e44 of _0x122e17){if(!_0x3d9e44)continue;if(Imported[_0x3210c6(0x250)]){if(this[_0x3210c6(0x2e2)](_0x3d9e44))continue;if(this[_0x3210c6(0x178)](_0x3d9e44))continue;}else{if(!_0x17dba3[_0x3210c6(0x932)](_0x3d9e44['stypeId']))continue;}this[_0x3210c6(0x37d)](_0x3d9e44);}},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x2e2)]=function(_0x355cc3){const _0x4626a9=_0x397c95,_0x2eabbc=this['_actor'][_0x4626a9(0x19a)](),_0x15046b=_0x2eabbc[_0x4626a9(0x742)](_0x4053f0=>DataManager[_0x4626a9(0x66b)](_0x355cc3)[_0x4626a9(0x932)](_0x4053f0));return _0x15046b[_0x4626a9(0x187)]<=0x0;},Window_ActorCommand['prototype'][_0x397c95(0x178)]=function(_0x2f7e22){const _0x1f26fa=_0x397c95;if(Imported['VisuMZ_1_SkillsStatesCore']){if(VisuMZ[_0x1f26fa(0xc99)]['version']>=1.24){if(this[_0x1f26fa(0x347)]){if(!VisuMZ[_0x1f26fa(0xc99)][_0x1f26fa(0xbce)](this[_0x1f26fa(0x347)],_0x2f7e22))return!![];if(!VisuMZ['SkillsStatesCore'][_0x1f26fa(0x5fb)](this[_0x1f26fa(0x347)],_0x2f7e22))return!![];if(!VisuMZ[_0x1f26fa(0xc99)][_0x1f26fa(0xac8)](this[_0x1f26fa(0x347)],_0x2f7e22))return!![];}}else{if(!Window_SkillList[_0x1f26fa(0x6cf)][_0x1f26fa(0x55a)][_0x1f26fa(0x6a3)](this,_0x2f7e22))return!![];if(!Window_SkillList['prototype']['checkShowHideSwitchNotetags'][_0x1f26fa(0x6a3)](this,_0x2f7e22))return!![];if(!Window_SkillList[_0x1f26fa(0x6cf)]['checkShowHideSkillNotetags'][_0x1f26fa(0x6a3)](this,_0x2f7e22))return!![];}}return![];},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x37d)]=function(_0x903b86){const _0x697bd5=_0x397c95;if(!_0x903b86)return;if(!this[_0x697bd5(0x324)](_0x903b86))return;const _0x150834=this['commandStyle'](),_0x2559d2=DataManager[_0x697bd5(0x79c)](_0x903b86),_0x1aa34b=DataManager['battleCommandIcon'](_0x903b86),_0x26a1d1=_0x150834===_0x697bd5(0x663)?_0x2559d2:_0x697bd5(0xb72)[_0x697bd5(0xadd)](_0x1aa34b,_0x2559d2),_0x40b6fb=this['_actor'][_0x697bd5(0x3e3)](_0x903b86);this[_0x697bd5(0x659)](_0x26a1d1,_0x697bd5(0x6ad),_0x40b6fb,_0x903b86['id']);},Window_ActorCommand['prototype'][_0x397c95(0x324)]=function(_0x1c8d89){const _0x31cf18=_0x397c95,_0x279b0a=_0x1c8d89[_0x31cf18(0x6cc)];if(_0x279b0a['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x31cf18(0x347)][_0x31cf18(0xa81)](_0x1c8d89['id']))return![];}if(_0x279b0a['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x31cf18(0x347)][_0x31cf18(0x3bc)](_0x1c8d89['id']))return![];}const _0x17f3f3=VisuMZ['BattleCore'][_0x31cf18(0xc17)](_0x1c8d89,_0x31cf18(0xb03));if(VisuMZ[_0x31cf18(0x1f3)]['JS'][_0x17f3f3]){if(!VisuMZ[_0x31cf18(0x1f3)]['JS'][_0x17f3f3][_0x31cf18(0x6a3)](this,this[_0x31cf18(0x347)],_0x1c8d89))return![];}return VisuMZ['BattleCore'][_0x31cf18(0x87b)](_0x1c8d89);},VisuMZ['BattleCore'][_0x397c95(0x87b)]=function(_0x4060af){const _0x36b791=_0x397c95,_0x46a736=_0x4060af[_0x36b791(0x6cc)];if(_0x46a736[_0x36b791(0xb38)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x36b791(0x540)!=='qSyMI'){const _0x45169a=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x35c560 of _0x45169a){if(_0x36b791(0x2d3)!=='WsAIx'){if(!$gameSwitches[_0x36b791(0x515)](_0x35c560))return![];}else{const _0x277457=this[_0x36b791(0x398)]()[_0x36b791(0x220)];return _0x277457[_0x36b791(0xb38)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);}}return!![];}else this[_0x36b791(0x2df)]=(this[_0x36b791(0x2df)]*(_0x5150b6-0x1)+this[_0x36b791(0x530)])/_0x1c6779,this[_0x36b791(0x4ff)]=(this['_growY']*(_0x42458d-0x1)+this[_0x36b791(0x7ed)])/_0x301ba6;}if(_0x46a736[_0x36b791(0xb38)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x50d991=JSON['parse']('['+RegExp['$1'][_0x36b791(0xb38)](/\d+/g)+']');for(const _0x59e123 of _0x50d991){if(!$gameSwitches['value'](_0x59e123))return![];}return!![];}if(_0x46a736[_0x36b791(0xb38)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x36b791(0x80f)==='VhJRT'){const _0x16078c=JSON[_0x36b791(0x8c7)]('['+RegExp['$1'][_0x36b791(0xb38)](/\d+/g)+']');for(const _0x14649e of _0x16078c){if($gameSwitches[_0x36b791(0x515)](_0x14649e))return!![];}return![];}else{if(!this[_0x36b791(0xcfb)][_0x36b791(0x853)]())return;while(this[_0x36b791(0xcfb)][_0x36b791(0x853)]()){this[_0x36b791(0xcfb)][_0x36b791(0x68d)]()&&this[_0x36b791(0xc80)]();}this[_0x36b791(0xcfb)][_0x36b791(0xb6a)](),this[_0x36b791(0xcfb)][_0x36b791(0x823)]();}}if(_0x46a736['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x36b791(0x84e)===_0x36b791(0x84e)){const _0x2e70be=JSON[_0x36b791(0x8c7)]('['+RegExp['$1'][_0x36b791(0xb38)](/\d+/g)+']');for(const _0x414784 of _0x2e70be){if(!$gameSwitches[_0x36b791(0x515)](_0x414784))return!![];}return![];}else _0x42c822['portraitFlipHorz']=!_0x46ebb5[_0x36b791(0x761)];}if(_0x46a736[_0x36b791(0xb38)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x36b791(0xa71)!=='xDvNO'){const _0x4efcb9=JSON[_0x36b791(0x8c7)]('['+RegExp['$1'][_0x36b791(0xb38)](/\d+/g)+']');for(const _0x1054c5 of _0x4efcb9){if(_0x36b791(0x983)===_0x36b791(0x983)){if(!$gameSwitches['value'](_0x1054c5))return!![];}else{const _0x5913f2=this['commandSymbol'](_0x8cece1);return _0x5913f2===_0x36b791(0xa03)?this[_0x36b791(0x987)]():_0x117d4f['BattleCore'][_0x36b791(0x26d)][_0x36b791(0x6a3)](this,_0x254add);}}return![];}else{let _0x4ae11e='';_0x4ae11e+=_0x36b791(0xad2),_0x4ae11e+=_0x36b791(0x83f),_0x4ae11e+=_0x36b791(0xc6a),_0x3f7f29(_0x4ae11e),_0x291fd4[_0x36b791(0x565)]();}}if(_0x46a736[_0x36b791(0xb38)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x36b791(0x760)===_0x36b791(0x760)){const _0x1ba3ff=JSON[_0x36b791(0x8c7)]('['+RegExp['$1'][_0x36b791(0xb38)](/\d+/g)+']');for(const _0x3458d8 of _0x1ba3ff){if($gameSwitches['value'](_0x3458d8))return![];}return!![];}else this[_0x36b791(0x763)][_0x36b791(0x5ab)](this[_0x36b791(0x64f)]);}return!![];},Window_ActorCommand[_0x397c95(0x6cf)]['addEscapeCommand']=function(){const _0x541c23=_0x397c95,_0x5ad171=this[_0x541c23(0x13b)](),_0x219bb6=VisuMZ['BattleCore'][_0x541c23(0x716)][_0x541c23(0x982)][_0x541c23(0xa07)],_0x250647=_0x5ad171==='text'?TextManager[_0x541c23(0x95b)]:'\x5cI[%1]%2'[_0x541c23(0xadd)](_0x219bb6,TextManager[_0x541c23(0x95b)]),_0x947402=this[_0x541c23(0x7c4)]();this[_0x541c23(0x659)](_0x250647,_0x541c23(0x95b),_0x947402);},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x7c4)]=function(){const _0x30d041=_0x397c95;return BattleManager[_0x30d041(0x58c)]();},Window_ActorCommand[_0x397c95(0x6cf)]['addAutoBattleCommand']=function(){const _0x34df6d=_0x397c95,_0x496a76=this[_0x34df6d(0x13b)](),_0x163a91=VisuMZ[_0x34df6d(0x1f3)]['Settings'][_0x34df6d(0x982)][_0x34df6d(0xcc7)],_0x274ec7=_0x496a76==='text'?TextManager['autoBattle']:'\x5cI[%1]%2'[_0x34df6d(0xadd)](_0x163a91,TextManager[_0x34df6d(0xbea)]),_0x18e2d2=this[_0x34df6d(0x25c)]();this[_0x34df6d(0x659)](_0x274ec7,'autoBattle',_0x18e2d2);},Window_ActorCommand[_0x397c95(0x6cf)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0xab7)]=function(){const _0x23e82a=_0x397c95;return VisuMZ[_0x23e82a(0x1f3)][_0x23e82a(0x716)][_0x23e82a(0xa32)][_0x23e82a(0x574)];},Window_ActorCommand['prototype'][_0x397c95(0x3fa)]=function(_0x1657c0){const _0x1fc552=_0x397c95,_0x49f13a=this[_0x1fc552(0x390)](_0x1657c0);if(_0x49f13a===_0x1fc552(0x437))this[_0x1fc552(0xc9b)](_0x1657c0);else _0x49f13a==='icon'?this['drawItemStyleIcon'](_0x1657c0):Window_Command[_0x1fc552(0x6cf)]['drawItem'][_0x1fc552(0x6a3)](this,_0x1657c0);this[_0x1fc552(0xc6f)](_0x1657c0);},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x13b)]=function(){const _0x249b12=_0x397c95;return VisuMZ[_0x249b12(0x1f3)][_0x249b12(0x716)][_0x249b12(0xa32)][_0x249b12(0x976)];},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x390)]=function(_0x5e8896){const _0xd64211=_0x397c95;if(_0x5e8896<0x0)return _0xd64211(0x663);const _0x1a2d3e=this[_0xd64211(0x13b)]();if(_0x1a2d3e!==_0xd64211(0x5f2)){if('WNEQa'==='WNEQa')return _0x1a2d3e;else _0x4319ea['BattleCore'][_0xd64211(0x705)][_0xd64211(0x6a3)](this),this[_0xd64211(0x7aa)]();}else{if(this[_0xd64211(0x5b7)]()>0x0){const _0x5519fb=this['commandName'](_0x5e8896);if(_0x5519fb[_0xd64211(0xb38)](/\\I\[(\d+)\]/i)){const _0x1f316c=this[_0xd64211(0x296)](_0x5e8896),_0x5377ab=this[_0xd64211(0x5cd)](_0x5519fb)[_0xd64211(0x76b)];return _0x5377ab<=_0x1f316c[_0xd64211(0x76b)]?'iconText':_0xd64211(0x1ff);}}}return _0xd64211(0x663);},Window_ActorCommand[_0x397c95(0x6cf)]['drawItemStyleIconText']=function(_0x2c5261){const _0x485d42=_0x397c95,_0x5420fc=this[_0x485d42(0x296)](_0x2c5261),_0x298b3c=this[_0x485d42(0xaaf)](_0x2c5261),_0x50a621=this[_0x485d42(0x5cd)](_0x298b3c)[_0x485d42(0x76b)];this[_0x485d42(0xb0d)](this[_0x485d42(0x216)](_0x2c5261));const _0x25e5f7=this[_0x485d42(0xab7)]();if(_0x25e5f7==='right'){if('mgDyY'===_0x485d42(0x5ec)){if(this[_0x485d42(0x524)]){const _0x213d04=this['_dimmerSprite']['bitmap'],_0x4d7385=this[_0x485d42(0x76b)]-0x8,_0x1a66f1=this[_0x485d42(0x9b1)],_0x2a6856=this['padding'],_0x31fab8=_0x2600af['dimColor1'](),_0x40293b=_0x40cba9[_0x485d42(0xc5c)]();this[_0x485d42(0x524)]['x']=0x4,_0x213d04['resize'](_0x4d7385,_0x1a66f1),_0x213d04['gradientFillRect'](0x0,0x0,_0x4d7385,_0x2a6856,_0x40293b,_0x31fab8,!![]),_0x213d04[_0x485d42(0x6bb)](0x0,_0x2a6856,_0x4d7385,_0x1a66f1-_0x2a6856*0x2,_0x31fab8),_0x213d04[_0x485d42(0x9f7)](0x0,_0x1a66f1-_0x2a6856,_0x4d7385,_0x2a6856,_0x31fab8,_0x40293b,!![]),this['_dimmerSprite'][_0x485d42(0x71f)](0x0,0x0,_0x4d7385,_0x1a66f1);}}else this[_0x485d42(0xa3c)](_0x298b3c,_0x5420fc['x']+_0x5420fc[_0x485d42(0x76b)]-_0x50a621,_0x5420fc['y'],_0x50a621);}else{if(_0x25e5f7==='center'){const _0x2c7c39=_0x5420fc['x']+Math[_0x485d42(0xaee)]((_0x5420fc[_0x485d42(0x76b)]-_0x50a621)/0x2);this['drawTextEx'](_0x298b3c,_0x2c7c39,_0x5420fc['y'],_0x50a621);}else this[_0x485d42(0xa3c)](_0x298b3c,_0x5420fc['x'],_0x5420fc['y'],_0x50a621);}},Window_ActorCommand[_0x397c95(0x6cf)]['drawItemStyleIcon']=function(_0x14a096){const _0x33b2a3=_0x397c95;this[_0x33b2a3(0xaaf)](_0x14a096)[_0x33b2a3(0xb38)](/\\I\[(\d+)\]/i);const _0x32c816=Number(RegExp['$1'])||0x0,_0x4cb85a=this[_0x33b2a3(0x296)](_0x14a096),_0x2b61e8=_0x4cb85a['x']+Math[_0x33b2a3(0xaee)]((_0x4cb85a[_0x33b2a3(0x76b)]-ImageManager[_0x33b2a3(0x8f5)])/0x2),_0x15b069=_0x4cb85a['y']+(_0x4cb85a['height']-ImageManager[_0x33b2a3(0xb8f)])/0x2;this[_0x33b2a3(0xc92)](_0x32c816,_0x2b61e8,_0x15b069);},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0xc6f)]=function(_0x1d6584){const _0x1e6bd7=_0x397c95;if(!(VisuMZ[_0x1e6bd7(0x1f3)][_0x1e6bd7(0x716)][_0x1e6bd7(0xa32)][_0x1e6bd7(0xb5a)]??!![]))return;const _0x38a2e4=this[_0x1e6bd7(0x1dc)](_0x1d6584);if(![_0x1e6bd7(0x474),_0x1e6bd7(0x50e),_0x1e6bd7(0x6ad)][_0x1e6bd7(0x932)](_0x38a2e4))return;const _0xeaf529=this['itemLineRect'](_0x1d6584);let _0x125faf=null;if(_0x38a2e4===_0x1e6bd7(0x474))_0x125faf=$dataSkills[this['_actor'][_0x1e6bd7(0x363)]()];else _0x38a2e4===_0x1e6bd7(0x50e)?_0x125faf=$dataSkills[this['_actor'][_0x1e6bd7(0xb47)]()]:_0x125faf=$dataSkills[this['_list'][_0x1d6584][_0x1e6bd7(0x415)]];this[_0x1e6bd7(0x953)](this['_actor'],_0x125faf,_0xeaf529['x'],_0xeaf529['y'],_0xeaf529['width']);},Window_ActorCommand['prototype'][_0x397c95(0x953)]=function(_0x192fe6,_0x470623,_0x3a8c4f,_0x289962,_0x1f74bb){const _0x157bb6=_0x397c95;if(!_0x470623)return;if(Imported[_0x157bb6(0x250)])_0x157bb6(0x842)===_0x157bb6(0x842)?Window_Command['prototype']['drawSkillCost']['call'](this,_0x192fe6,_0x470623,_0x3a8c4f,_0x289962,_0x1f74bb):this['_linkedSprite']=_0x13d982;else{if(_0x157bb6(0x9e2)!==_0x157bb6(0x9e2)){const _0x2294da=_0x36f061[_0x157bb6(0x1f3)][_0x157bb6(0x716)];if(this['constructor']===_0x48cd40)_0x3bec9a+=_0x2294da[_0x157bb6(0xc24)][_0x157bb6(0x5c1)]||0x0,_0x2247d6+=_0x2294da[_0x157bb6(0xc24)]['OffsetY']||0x0;else this[_0x157bb6(0x32a)]===_0x30a538&&(_0x42eb49+=_0x2294da[_0x157bb6(0x7de)]['OffsetX']||0x0,_0x1f10e1+=_0x2294da[_0x157bb6(0x7de)][_0x157bb6(0xd03)]||0x0);this[_0x157bb6(0xcfb)]&&(_0x48de83=this[_0x157bb6(0xcfb)][_0x157bb6(0x9a8)]??_0x231ae9,_0x3f6f3c=this['_battler'][_0x157bb6(0x1e2)]??_0x3a91dd),_0x7349c7[_0x157bb6(0x1f3)][_0x157bb6(0xca5)][_0x157bb6(0x6a3)](this,_0x3b3e02,_0x891abc),this[_0x157bb6(0x7ce)]=this[_0x157bb6(0x169)],this[_0x157bb6(0xa3f)]=this[_0x157bb6(0x887)],this[_0x157bb6(0x204)]=0x0,this[_0x157bb6(0x6b0)]=0x0,this[_0x157bb6(0xa84)]='Linear';}else Window_SkillList[_0x157bb6(0x6cf)][_0x157bb6(0x953)][_0x157bb6(0x6a3)](this,_0x470623,_0x3a8c4f,_0x289962,_0x1f74bb);}},Window_ActorCommand[_0x397c95(0x6cf)]['hide']=function(){},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x67c)]=function(){const _0x53b10d=_0x397c95;Window_Command[_0x53b10d(0x6cf)][_0x53b10d(0x67c)][_0x53b10d(0x6a3)](this);const _0x144d73=this['battleLayoutStyle']();_0x144d73==='border'&&this[_0x53b10d(0x4c5)]();},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x1b2)]=function(){const _0x128b70=_0x397c95;if(this['_battleLayoutStyle'])return this[_0x128b70(0x7a0)];return this['_battleLayoutStyle']=SceneManager[_0x128b70(0x6fe)]['battleLayoutStyle'](),this['_battleLayoutStyle'];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xb73)]=Window_ActorCommand['prototype']['setup'],Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x74a)]=function(_0x57cf24){const _0x26dbfe=_0x397c95,_0x163b33=this[_0x26dbfe(0x1b2)]();if(_0x57cf24&&['xp',_0x26dbfe(0xab1)]['includes'](_0x163b33)){if(_0x26dbfe(0x751)==='DJsMR')this['resizeWindowXPStyle'](_0x57cf24);else{if(!_0x22c380[_0x26dbfe(0x196)]())return;_0x2f20a4[_0x26dbfe(0x3dd)](this[_0x26dbfe(0x90f)]['map'](_0x3f0d5e=>_0x3f0d5e[_0x26dbfe(0xa29)])[_0x26dbfe(0x755)]('\x0a'));}}else _0x57cf24&&['border']['includes'](_0x163b33)&&(this[_0x26dbfe(0xcf3)](_0x57cf24),this[_0x26dbfe(0x4c5)]());VisuMZ['BattleCore'][_0x26dbfe(0xb73)][_0x26dbfe(0x6a3)](this,_0x57cf24),_0x57cf24&&$gameTroop[_0x26dbfe(0x4c3)]()['length']>0x0&&_0x57cf24[_0x26dbfe(0x7eb)]()&&_0x57cf24[_0x26dbfe(0x7eb)]()[_0x26dbfe(0x620)]();},Window_ActorCommand['prototype'][_0x397c95(0x29f)]=function(_0x3b2e4c){const _0x225c6c=_0x397c95,_0x2da237=Math[_0x225c6c(0x403)](Graphics['boxWidth']/0x3),_0x430a7d=Math['round'](Graphics[_0x225c6c(0xb5d)]/$gameParty[_0x225c6c(0x7ee)]()['length']),_0x51e4cb=Math[_0x225c6c(0x9d3)](_0x2da237,_0x430a7d),_0x32367d=this[_0x225c6c(0x557)](VisuMZ['BattleCore'][_0x225c6c(0x716)]['BattleLayout'][_0x225c6c(0xa0d)]),_0x327406=Math[_0x225c6c(0x403)](_0x430a7d*_0x3b2e4c[_0x225c6c(0x6e7)]())+Math['round']((_0x430a7d-_0x51e4cb)/0x2),_0x5c74c6=Math[_0x225c6c(0x403)](SceneManager[_0x225c6c(0x6fe)][_0x225c6c(0x1e8)]['y']-_0x32367d);this[_0x225c6c(0xae0)](_0x327406,_0x5c74c6,_0x51e4cb,_0x32367d),this[_0x225c6c(0x820)](),this[_0x225c6c(0xbf1)](0x1);},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0xcf3)]=function(_0x375a32){const _0x8a8e8a=_0x397c95,_0x820104=SceneManager['_scene'][_0x8a8e8a(0x6d7)]();this[_0x8a8e8a(0xae0)](_0x820104['x'],_0x820104['y'],_0x820104[_0x8a8e8a(0x76b)],_0x820104[_0x8a8e8a(0x9b1)]),this[_0x8a8e8a(0x820)](),this[_0x8a8e8a(0xbf1)](0x0);},Window_ActorCommand[_0x397c95(0x6cf)]['refreshDimmerBitmap']=function(){const _0x510eba=_0x397c95;if(this[_0x510eba(0x524)]){const _0x2ccc69=this[_0x510eba(0x524)][_0x510eba(0x60e)],_0x1e00d6=this[_0x510eba(0x76b)]-0x8,_0x48dc6b=this['height'],_0x3163cc=this[_0x510eba(0x647)],_0x152c84=ColorManager[_0x510eba(0x948)](),_0x59027d=ColorManager[_0x510eba(0xc5c)]();this[_0x510eba(0x524)]['x']=0x4,_0x2ccc69['resize'](_0x1e00d6,_0x48dc6b),_0x2ccc69['gradientFillRect'](0x0,0x0,_0x1e00d6,_0x3163cc,_0x59027d,_0x152c84,!![]),_0x2ccc69[_0x510eba(0x6bb)](0x0,_0x3163cc,_0x1e00d6,_0x48dc6b-_0x3163cc*0x2,_0x152c84),_0x2ccc69[_0x510eba(0x9f7)](0x0,_0x48dc6b-_0x3163cc,_0x1e00d6,_0x3163cc,_0x152c84,_0x59027d,!![]),this[_0x510eba(0x524)][_0x510eba(0x71f)](0x0,0x0,_0x1e00d6,_0x48dc6b);}},Window_ActorCommand[_0x397c95(0x6cf)]['updateHelp']=function(){const _0x39cd99=_0x397c95;if(!this[_0x39cd99(0x347)])return;const _0x195f15=VisuMZ[_0x39cd99(0x1f3)][_0x39cd99(0x716)][_0x39cd99(0xa32)],_0x3f5d32=this[_0x39cd99(0x168)]();switch(_0x3f5d32){case _0x39cd99(0x474):this[_0x39cd99(0xb57)]($dataSkills[this[_0x39cd99(0x347)][_0x39cd99(0x363)]()]);break;case _0x39cd99(0x50e):this[_0x39cd99(0xb57)]($dataSkills[this[_0x39cd99(0x347)][_0x39cd99(0xb47)]()]);break;case'skill':const _0x46e544=_0x195f15[_0x39cd99(0x6bf)],_0x93d854=_0x46e544[_0x39cd99(0xadd)]($dataSystem[_0x39cd99(0x19a)][this[_0x39cd99(0x432)]()]);this['_helpWindow']['setText'](_0x93d854);break;case _0x39cd99(0x6ad):this['setHelpWindowItem']($dataSkills[this[_0x39cd99(0x432)]()]);break;case _0x39cd99(0x398):this[_0x39cd99(0x2fa)][_0x39cd99(0x734)](_0x195f15[_0x39cd99(0xc29)]);break;case _0x39cd99(0x95b):this[_0x39cd99(0x2fa)]['setText'](_0x195f15[_0x39cd99(0x310)]);break;case _0x39cd99(0xbea):this[_0x39cd99(0x2fa)][_0x39cd99(0x734)](_0x195f15['HelpAutoBattle']);break;default:this[_0x39cd99(0x2fa)][_0x39cd99(0x734)]('');break;}},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0x3df)]=function(){const _0xec5325=_0x397c95;this[_0xec5325(0x6fb)](0x0);if(this[_0xec5325(0x347)]&&ConfigManager['commandRemember']){const _0x1da401=this[_0xec5325(0x347)][_0xec5325(0xc85)]();this[_0xec5325(0x3b3)](_0x1da401);if(_0x1da401==='skill'){if('jnqoO'===_0xec5325(0xcfc)){const _0x48f83=_0xa2eac5[_0xec5325(0x1f3)]['Settings'][_0xec5325(0x595)];if(_0x48f83[_0xec5325(0xb20)]){const _0x296f7c=new _0x3c3304();_0x296f7c[_0xec5325(0x60e)]=_0x199c32[_0xec5325(0x28b)](_0x48f83[_0xec5325(0xb20)]),_0x296f7c['x']=_0x48f83[_0xec5325(0x5fd)]||0x0,_0x296f7c['y']=_0x48f83[_0xec5325(0xc8e)]||0x0,this[_0xec5325(0x8a5)](_0x296f7c),this['_backAttachmentSprite']=_0x296f7c;}if(_0x48f83[_0xec5325(0xcf5)]){const _0x570acf=new _0xca3ece();_0x570acf[_0xec5325(0x60e)]=_0x4d0b2b[_0xec5325(0x28b)](_0x48f83[_0xec5325(0xcf5)]),_0x570acf['x']=_0x48f83['StatusWindowAttachmentFrontOffsetX']||0x0,_0x570acf['y']=_0x48f83[_0xec5325(0x42f)]||0x0,this[_0xec5325(0x5ab)](_0x570acf),this[_0xec5325(0xac7)]=_0x570acf;}}else{const _0x65f2ca=this[_0xec5325(0x347)][_0xec5325(0x4ea)]();if(_0x65f2ca){if(_0xec5325(0x841)!=='lCHIS'){const _0x1daf66=this[_0xec5325(0xbfb)](_0xec5325(0x54d),_0x65f2ca[_0xec5325(0xcc3)]);this[_0xec5325(0xb89)](_0x1daf66||0x0);}else _0x34389a['addState'](_0x16071e);}}}else{if(_0x1da401==='singleSkill'){if(_0xec5325(0x58b)===_0xec5325(0x5be)){const _0x530418=_0x3b5324['width'],_0x2e9a8c=_0x196f54['round']((_0x20b497['boxWidth']-_0x530418)/0x2),_0x475768=this['helpAreaHeight'](),_0x3d6da6=(_0x4aa288['height']-_0x3a9884['boxHeight'])/-0x2;return new _0x199568(_0x2e9a8c,_0x3d6da6,_0x530418,_0x475768);}else{const _0x3f2e1e=this['_actor']['lastBattleSkill']();if(_0x3f2e1e){const _0x1b608e=this[_0xec5325(0xbfb)](_0xec5325(0x6ad),_0x3f2e1e['id']);this[_0xec5325(0xb89)](_0x1b608e||0x0);}}}}}},Window_ActorCommand[_0x397c95(0x6cf)][_0x397c95(0xbfb)]=function(_0x5a8034,_0x4e820d){const _0x3e1aea=_0x397c95;return this[_0x3e1aea(0x77d)][_0x3e1aea(0xb2e)](_0x1b8b41=>_0x1b8b41[_0x3e1aea(0x4d3)]===_0x5a8034&&_0x1b8b41[_0x3e1aea(0x415)]===_0x4e820d);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xd0a)]=Window_BattleStatus['prototype'][_0x397c95(0x918)],Window_BattleStatus['prototype'][_0x397c95(0x918)]=function(_0x17533d){const _0x1c57b4=_0x397c95;VisuMZ['BattleCore'][_0x1c57b4(0xd0a)][_0x1c57b4(0x6a3)](this,_0x17533d),this[_0x1c57b4(0x312)](),this[_0x1c57b4(0xac4)]();},Window_BattleStatus['prototype']['battleLayoutStyle']=function(){const _0x2760d9=_0x397c95;if(this[_0x2760d9(0x7a0)])return this[_0x2760d9(0x7a0)];return this[_0x2760d9(0x7a0)]=SceneManager[_0x2760d9(0x6fe)]['battleLayoutStyle'](),this['_battleLayoutStyle'];},Window_BattleStatus['prototype'][_0x397c95(0x312)]=function(){const _0x17f42=_0x397c95;this['frameVisible']=this[_0x17f42(0x51c)]();const _0x5530d3=VisuMZ['BattleCore'][_0x17f42(0x716)][_0x17f42(0x595)];_0x5530d3['StatusWindowSkinHide']&&(this['opacity']=0x0);},Window_BattleStatus[_0x397c95(0x6cf)]['isFrameVisible']=function(){const _0x56d7a6=_0x397c95,_0x1b5ff4=VisuMZ[_0x56d7a6(0x1f3)][_0x56d7a6(0x716)][_0x56d7a6(0x595)];if(_0x1b5ff4['StatusWindowSkinFilename'])return!![];const _0x449ead=this['battleLayoutStyle']();switch(_0x449ead){case _0x56d7a6(0x7e1):case'border':return!![];break;case _0x56d7a6(0xac1):case'xp':case _0x56d7a6(0xab1):default:return![];break;}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x264)]=function(){const _0x241b60=_0x397c95;if(this[_0x241b60(0x51c)]())return 0x0;else{if('MblWC'==='MblWC')return 0xa;else{if(!this[_0x241b60(0xb78)]())return;if(!this[_0x241b60(0x763)])return;if(this[_0x241b60(0x99f)]===_0xb6bb7b&&this[_0x241b60(0x3f8)]===_0x321aed)return;this['_targetSkewX']=_0x32da2f,this[_0x241b60(0x3f8)]=_0x299ca2,this[_0x241b60(0x4fa)]=_0x3add53,this['_skewWholeDuration']=_0x1980b1,this[_0x241b60(0x4b6)]=_0x3546a3||'Linear',_0xe8ac8c<=0x0&&(this[_0x241b60(0x763)]['skew']['x']=this[_0x241b60(0x99f)],this[_0x241b60(0x763)][_0x241b60(0x81d)]['y']=this['_targetSkewY']);}}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x21e)]=function(){const _0xaae75a=_0x397c95,_0x2b122e=this[_0xaae75a(0x1b2)]();switch(_0x2b122e){case _0xaae75a(0x7e1):return 0x1;break;case'xp':case _0xaae75a(0xab1):return $gameParty[_0xaae75a(0x7ee)]()[_0xaae75a(0x187)];break;case _0xaae75a(0xac1):default:return $gameParty[_0xaae75a(0xb05)]();break;}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x5e5)]=function(){const _0x5b1c84=_0x397c95,_0x28610b=this[_0x5b1c84(0x1b2)]();switch(_0x28610b){case _0x5b1c84(0x7e1):return Window_StatusBase[_0x5b1c84(0x6cf)][_0x5b1c84(0x5e5)]['call'](this);break;case'default':case'xp':case'portrait':default:return this[_0x5b1c84(0x259)];break;}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x143)]=function(){const _0x2ebd06=_0x397c95,_0x256371=this[_0x2ebd06(0x1b2)]();switch(_0x256371){case'list':return Window_StatusBase['prototype']['rowSpacing'][_0x2ebd06(0x6a3)](this);break;case _0x2ebd06(0xac1):case'xp':case _0x2ebd06(0xab1):default:return 0x0;break;}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x412)]=function(){const _0x4bef38=_0x397c95;this['isFrameVisible']()?Window_StatusBase['prototype']['updatePadding']['call'](this):this[_0x4bef38(0x647)]=0x8;},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x83e)]=function(){const _0x89c131=_0x397c95,_0x57752a=VisuMZ[_0x89c131(0x1f3)][_0x89c131(0x716)][_0x89c131(0x595)];if(_0x57752a['StatusWindowSkinFilename']){if(_0x89c131(0x16f)!=='jvjMX'){if(this['constructor']===_0x507593)return;this[_0x89c131(0x6ff)](),this[_0x89c131(0xce2)]();}else this[_0x89c131(0xa7c)]=ImageManager[_0x89c131(0x28b)](_0x57752a[_0x89c131(0xa74)]);}else'pIzcZ'==='pIzcZ'?Window_StatusBase[_0x89c131(0x6cf)][_0x89c131(0x83e)][_0x89c131(0x6a3)](this):this['startMotion']('escape');},Window_BattleStatus[_0x397c95(0x6cf)]['drawItemBackground']=function(_0x396f82){const _0x55344d=_0x397c95,_0x5dc0ce=VisuMZ['BattleCore']['Settings'][_0x55344d(0x595)];if(_0x5dc0ce[_0x55344d(0x1b5)])return;Window_StatusBase[_0x55344d(0x6cf)][_0x55344d(0xbaf)][_0x55344d(0x6a3)](this,_0x396f82);},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0xbfa)]=function(){const _0xe5c1a7=_0x397c95;this[_0xe5c1a7(0x9f6)]=!![];},Window_BattleStatus['prototype'][_0x397c95(0x76c)]=function(){const _0x566445=_0x397c95;Window_StatusBase[_0x566445(0x6cf)]['update']['call'](this),this['updateRefresh'](),this['updateEffectContainers']();if(this['battleLayoutStyle']()==='border')this[_0x566445(0xcf7)]();},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x6e3)]=function(){const _0x470c54=_0x397c95;if($gameTemp[_0x470c54(0x500)]()){if('liWZj'===_0x470c54(0x868)){const _0x45c951=this[_0x470c54(0x296)](_0x5bcbb4),_0x3d880b=this['commandName'](_0x5ee7d1),_0x2f70c1=this['textSizeEx'](_0x3d880b)[_0x470c54(0x76b)];this[_0x470c54(0xb0d)](this[_0x470c54(0x216)](_0x56d81c));const _0x1de4e1=this[_0x470c54(0xab7)]();if(_0x1de4e1===_0x470c54(0x4d5))this[_0x470c54(0xa3c)](_0x3d880b,_0x45c951['x']+_0x45c951[_0x470c54(0x76b)]-_0x2f70c1,_0x45c951['y'],_0x2f70c1);else{if(_0x1de4e1===_0x470c54(0x971)){const _0x4a3363=_0x45c951['x']+_0x1187c2[_0x470c54(0xaee)]((_0x45c951[_0x470c54(0x76b)]-_0x2f70c1)/0x2);this['drawTextEx'](_0x3d880b,_0x4a3363,_0x45c951['y'],_0x2f70c1);}else this[_0x470c54(0xa3c)](_0x3d880b,_0x45c951['x'],_0x45c951['y'],_0x2f70c1);}}else this[_0x470c54(0x478)](),this[_0x470c54(0x9f6)]=![],$gameTemp['clearBattleRefreshRequest']();}else this['_requestRefresh']&&(this[_0x470c54(0x9f6)]=![],this[_0x470c54(0x2ed)](),this[_0x470c54(0x9e8)]());},Window_BattleStatus['prototype'][_0x397c95(0x71a)]=function(){const _0x4dad1e=_0x397c95;Window_StatusBase[_0x4dad1e(0x6cf)][_0x4dad1e(0x71a)][_0x4dad1e(0x6a3)](this);if(!$gameSystem[_0x4dad1e(0x221)]())this[_0x4dad1e(0x2ed)]();},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x16a)]=function(){const _0x3c1c2b=_0x397c95;if(this[_0x3c1c2b(0x32a)]===Window_BattleStatus)return;Window_StatusBase[_0x3c1c2b(0x6cf)]['hide'][_0x3c1c2b(0x6a3)](this);},Window_BattleStatus['prototype'][_0x397c95(0xbf7)]=function(_0x3a505e){const _0x17c958=_0x397c95,_0x4024dd=this[_0x17c958(0x1b2)]();switch(_0x4024dd){case'xp':case'portrait':break;case'default':case _0x17c958(0x7e1):case _0x17c958(0x8fe):default:return Window_StatusBase[_0x17c958(0x6cf)]['drawBackgroundRect'][_0x17c958(0x6a3)](this,_0x3a505e);break;}},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x15d)]=Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x7c6)],Window_BattleStatus[_0x397c95(0x6cf)]['drawItemImage']=function(_0x8eef7b){const _0x4135df=_0x397c95,_0x2c507d=this[_0x4135df(0x1b2)]();switch(_0x2c507d){case _0x4135df(0x7e1):this[_0x4135df(0x6c5)](_0x8eef7b);break;case'xp':this[_0x4135df(0x1cf)](_0x8eef7b);break;case _0x4135df(0xab1):this[_0x4135df(0x6aa)](_0x8eef7b);break;case'default':case _0x4135df(0x8fe):default:VisuMZ[_0x4135df(0x1f3)][_0x4135df(0x15d)][_0x4135df(0x6a3)](this,_0x8eef7b);break;}},Window_BattleStatus[_0x397c95(0x6cf)]['drawItemStatus']=function(_0x3967fa){const _0x456bb6=_0x397c95,_0x2fe300=this['battleLayoutStyle']();if(!$gameSystem[_0x456bb6(0x221)]())this[_0x456bb6(0x610)](_0x3967fa);switch(_0x2fe300){case _0x456bb6(0x7e1):this[_0x456bb6(0x765)](_0x3967fa);break;case'xp':case _0x456bb6(0xab1):case'default':case _0x456bb6(0x8fe):default:this[_0x456bb6(0x2c2)](_0x3967fa);break;}},Window_BattleStatus['prototype'][_0x397c95(0x725)]=function(){const _0x694636=_0x397c95,_0x56b36c=this[_0x694636(0x1b2)]();if(['xp'][_0x694636(0x932)](_0x56b36c)&&!$gameSystem[_0x694636(0x221)]()){if(_0x694636(0xb65)===_0x694636(0xb65)){this[_0x694636(0x67d)](0x0,0x0,0x0,0x0);return;}else _0x27cc6f[_0x694636(0x1f3)][_0x694636(0xba6)][_0x694636(0x6a3)](this,_0x40581d);}Window_StatusBase[_0x694636(0x6cf)][_0x694636(0x725)]['call'](this);},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x610)]=function(_0x2b297c){const _0x227338=_0x397c95,_0x546061=this[_0x227338(0x793)](_0x2b297c)[_0x227338(0x7eb)]();if(!_0x546061)return;const _0x277f91=this[_0x227338(0x1b2)](),_0xe588df=this['itemRect'](_0x2b297c);let _0x51630e=Math['round'](_0xe588df['x']+_0xe588df['width']/0x2)+this[_0x227338(0x647)];[_0x227338(0x7e1)]['includes'](_0x277f91)&&(_0x51630e=_0xe588df[_0x227338(0x76b)]/$gameParty[_0x227338(0x7ee)]()[_0x227338(0x187)],_0x51630e*=_0x2b297c,_0x51630e+=_0xe588df[_0x227338(0x76b)]/$gameParty[_0x227338(0x7ee)]()[_0x227338(0x187)]/0x2);let _0x59b77e=Math['round'](this[_0x227338(0xc18)](_0x2b297c,_0x546061,_0xe588df));_0x546061[_0x227338(0x6ee)](_0x51630e,_0x59b77e),this['addChildAt'](_0x546061,0x1),_0x546061[_0x227338(0x71a)](),this[_0x227338(0x3c5)](),this[_0x227338(0x9e8)]();},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0xc18)]=function(_0xbd58de,_0x40eebe,_0x4af00d){const _0x1c2023=_0x397c95,_0xee25af=VisuMZ[_0x1c2023(0x1f3)][_0x1c2023(0x716)]['BattleLayout'],_0x160d58=this[_0x1c2023(0x1b2)]();if(_0x160d58==='xp'){if('JHENG'!==_0x1c2023(0xa9c)){if(!_0x38ceea[_0x1c2023(0x221)]()&&this[_0x1c2023(0x32a)]===_0x149cdb){const _0x806ac4=_0x3f9756[_0x1c2023(0x6cf)]['battleLayoutStyle']();[_0x1c2023(0xac1),'list',_0x1c2023(0xab1),_0x1c2023(0x8fe)]['includes'](_0x806ac4)&&(this[_0x1c2023(0x2c9)]=0x0);}}else{const _0x9de775=_0xee25af[_0x1c2023(0x36f)];switch(_0x9de775[_0x1c2023(0x9a2)]()[_0x1c2023(0xb34)]()){case _0x1c2023(0x4c0):return _0x4af00d[_0x1c2023(0x9b1)]-_0x40eebe[_0x1c2023(0x6e4)][_0x1c2023(0x9b1)]/0x4;break;case _0x1c2023(0x971):const _0x3afbb9=_0xee25af[_0x1c2023(0x9d7)];return(_0x4af00d[_0x1c2023(0x9b1)]+(_0x40eebe[_0x1c2023(0x9b1)]||_0x3afbb9))/0x2;break;case _0x1c2023(0x6c6):return 0x0;case _0x1c2023(0xa29):default:return this['nameY'](_0x4af00d);break;}}}else{if(_0x160d58===_0x1c2023(0xab1)){}}return _0x40eebe['height'];},Sprite_Name[_0x397c95(0x6cf)]['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x397c95(0x6cf)][_0x397c95(0x579)]=function(){const _0x2cace7=_0x397c95,_0x17789b=this[_0x2cace7(0xa29)](),_0x44884c=this[_0x2cace7(0x3d1)](),_0x2d4c20=this['bitmapHeight']();this[_0x2cace7(0x289)](),this['bitmap']['clear'](),this[_0x2cace7(0x60e)][_0x2cace7(0x2d4)](_0x17789b,0x4,0x0,_0x44884c,_0x2d4c20,_0x2cace7(0x308));},Bitmap['prototype'][_0x397c95(0x2d4)]=function(_0x554607,_0x952a31,_0x52341b,_0x7d1513,_0x31e8e2,_0xa5e527){const _0x28d5d8=_0x397c95,_0x2aeab3=this['context'],_0x215463=_0x2aeab3[_0x28d5d8(0xa3b)];_0x7d1513=_0x7d1513||0xffffffff;let _0x65027b=_0x952a31,_0x4e375a=Math['round'](_0x52341b+0x18/0x2+this[_0x28d5d8(0x677)]*0.35);_0xa5e527===_0x28d5d8(0x971)&&(_0x65027b+=_0x7d1513/0x2);if(_0xa5e527===_0x28d5d8(0x4d5)){if(_0x28d5d8(0x2b4)!==_0x28d5d8(0x436))_0x65027b+=_0x7d1513;else return _0x19c9ed[_0x28d5d8(0x1f3)]['Settings']['Mechanics'][_0x28d5d8(0xb0f)];}_0x2aeab3[_0x28d5d8(0xa0a)](),_0x2aeab3['font']=this[_0x28d5d8(0x271)](),_0x2aeab3['textAlign']=_0xa5e527,_0x2aeab3['textBaseline']=_0x28d5d8(0xc34),_0x2aeab3[_0x28d5d8(0xa3b)]=0x1,this['_drawTextOutline'](_0x554607,_0x65027b,_0x4e375a,_0x7d1513),_0x2aeab3[_0x28d5d8(0xa3b)]=_0x215463,this[_0x28d5d8(0x661)](_0x554607,_0x65027b,_0x4e375a,_0x7d1513),_0x2aeab3['restore'](),this[_0x28d5d8(0x1d9)]['update']();},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x334)]=function(_0x5df9a8){const _0x1091da=_0x397c95;return this[_0x1091da(0x275)](_0x5df9a8)-this[_0x1091da(0x62f)]();},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x6c5)]=function(_0x34a70e){const _0x55df73=_0x397c95;if(!VisuMZ[_0x55df73(0x1f3)]['Settings'][_0x55df73(0x595)][_0x55df73(0xb31)])return;const _0x45db64=this['actor'](_0x34a70e),_0x6c80fb=this[_0x55df73(0x4ec)](_0x34a70e);_0x6c80fb[_0x55df73(0x76b)]=ImageManager[_0x55df73(0xac2)],_0x6c80fb[_0x55df73(0x9b1)]-=0x2,this[_0x55df73(0x546)](_0x45db64,_0x6c80fb['x']+0x1,_0x6c80fb['y']+0x1,_0x6c80fb['width'],_0x6c80fb['height']);},Window_BattleStatus[_0x397c95(0x6cf)]['drawItemStatusListStyle']=function(_0x1aaa09){const _0x4ff6e7=_0x397c95,_0x6e7ad9=VisuMZ[_0x4ff6e7(0x1f3)][_0x4ff6e7(0x716)][_0x4ff6e7(0x595)],_0x3ca989=$dataSystem[_0x4ff6e7(0x146)]?0x4:0x3,_0x294790=_0x3ca989*0x80+(_0x3ca989-0x1)*0x8+0x4,_0x1eba8f=this[_0x4ff6e7(0x793)](_0x1aaa09),_0x2d7451=this[_0x4ff6e7(0x4ec)](_0x1aaa09);let _0x4bd7a9=_0x2d7451['x']+this[_0x4ff6e7(0x647)];_0x6e7ad9[_0x4ff6e7(0xb31)]?'TmIYr'===_0x4ff6e7(0x728)?_0x4bd7a9=_0x2d7451['x']+ImageManager[_0x4ff6e7(0xac2)]+0x8:(this['_colorType']=0x0,this['createMiss']()):_0x4bd7a9+=ImageManager[_0x4ff6e7(0x8f5)];const _0x4b0de6=Math[_0x4ff6e7(0x403)](Math[_0x4ff6e7(0x9d3)](_0x2d7451['x']+_0x2d7451[_0x4ff6e7(0x76b)]-_0x294790,_0x4bd7a9)),_0x13282f=Math[_0x4ff6e7(0x403)](_0x2d7451['y']+(_0x2d7451['height']-Sprite_Name[_0x4ff6e7(0x6cf)][_0x4ff6e7(0x252)]())/0x2),_0x5941e1=Math[_0x4ff6e7(0x403)](_0x4b0de6-ImageManager[_0x4ff6e7(0x8f5)]/0x2-0x4),_0x4dfcca=Math[_0x4ff6e7(0x403)](_0x2d7451['y']+(_0x2d7451[_0x4ff6e7(0x9b1)]-ImageManager['iconHeight'])/0x2+ImageManager['iconHeight']/0x2);let _0x1024d0=_0x4b0de6+0x88;const _0x34683e=_0x13282f;this[_0x4ff6e7(0xb2f)](_0x1eba8f,_0x4b0de6-0x4+(_0x6e7ad9[_0x4ff6e7(0xcce)]||0x0),_0x13282f+(_0x6e7ad9['TpbGaugeOffsetY']||0x0)),this[_0x4ff6e7(0x8a3)](_0x1eba8f,_0x4b0de6+(_0x6e7ad9[_0x4ff6e7(0x878)]||0x0),_0x13282f+(_0x6e7ad9[_0x4ff6e7(0x290)]||0x0)),this[_0x4ff6e7(0x864)](_0x1eba8f,_0x5941e1+(_0x6e7ad9['StateIconOffsetX']||0x0),_0x4dfcca+(_0x6e7ad9[_0x4ff6e7(0x905)]||0x0)),this['placeGauge'](_0x1eba8f,'hp',_0x1024d0+0x88*0x0+(_0x6e7ad9[_0x4ff6e7(0x299)]||0x0),_0x34683e+(_0x6e7ad9[_0x4ff6e7(0x1e3)]||0x0)),this[_0x4ff6e7(0x1bf)](_0x1eba8f,'mp',_0x1024d0+0x88*0x1+(_0x6e7ad9['MpGaugeOffsetX']||0x0),_0x34683e+(_0x6e7ad9[_0x4ff6e7(0x426)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x4ff6e7(0x1bf)](_0x1eba8f,'tp',_0x1024d0+0x88*0x2+(_0x6e7ad9[_0x4ff6e7(0xbfc)]||0x0),_0x34683e+(_0x6e7ad9[_0x4ff6e7(0x1bd)]||0x0));},Window_BattleStatus[_0x397c95(0x6cf)]['drawItemImageXPStyle']=function(_0x52966c){const _0x6432b9=_0x397c95;if(!$gameSystem[_0x6432b9(0x221)]())return;VisuMZ[_0x6432b9(0x1f3)][_0x6432b9(0x15d)][_0x6432b9(0x6a3)](this,_0x52966c);},Window_BattleStatus['prototype']['drawItemStatusXPStyle']=function(_0x1cdcbb){const _0x140b5e=_0x397c95,_0x7c1773=VisuMZ[_0x140b5e(0x1f3)][_0x140b5e(0x716)][_0x140b5e(0x595)],_0x4b0c9e=this[_0x140b5e(0x793)](_0x1cdcbb),_0x1b1c33=this[_0x140b5e(0x4ec)](_0x1cdcbb),_0x5f52c6=Math['round'](_0x1b1c33['x']+(_0x1b1c33['width']-0x80)/0x2),_0x857827=this[_0x140b5e(0x334)](_0x1b1c33);let _0x49d197=_0x5f52c6-ImageManager['iconWidth']/0x2-0x4,_0xb4a358=_0x857827+ImageManager['iconHeight']/0x2;_0x49d197-ImageManager[_0x140b5e(0x8f5)]/0x2<_0x1b1c33['x']&&(_0x49d197=_0x5f52c6+ImageManager[_0x140b5e(0x8f5)]/0x2-0x4,_0xb4a358=_0x857827-ImageManager['iconHeight']/0x2);const _0x5de594=_0x5f52c6,_0x171bf5=this[_0x140b5e(0x275)](_0x1b1c33);this['placeTimeGauge'](_0x4b0c9e,_0x5f52c6+(_0x7c1773['TpbGaugeOffsetX']||0x0),_0x857827+(_0x7c1773['TpbGaugeOffsetY']||0x0)),this[_0x140b5e(0x8a3)](_0x4b0c9e,_0x5f52c6+(_0x7c1773[_0x140b5e(0x878)]||0x0),_0x857827+(_0x7c1773[_0x140b5e(0x290)]||0x0)),this[_0x140b5e(0x864)](_0x4b0c9e,_0x49d197+(_0x7c1773[_0x140b5e(0x69e)]||0x0),_0xb4a358+(_0x7c1773[_0x140b5e(0x905)]||0x0)),this['placeGauge'](_0x4b0c9e,'hp',_0x5de594+(_0x7c1773['HpGaugeOffsetX']||0x0),_0x171bf5+(_0x7c1773[_0x140b5e(0x1e3)]||0x0)),this[_0x140b5e(0x1bf)](_0x4b0c9e,'mp',_0x5de594+(_0x7c1773[_0x140b5e(0x36d)]||0x0),_0x171bf5+this[_0x140b5e(0x62f)]()+(_0x7c1773[_0x140b5e(0x426)]||0x0)),$dataSystem[_0x140b5e(0x146)]&&this['placeGauge'](_0x4b0c9e,'tp',_0x5de594+(_0x7c1773['TpGaugeOffsetX']||0x0),_0x171bf5+this[_0x140b5e(0x62f)]()*0x2+(_0x7c1773['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x21d)]=function(_0x19dfa9){const _0x3d0296=_0x397c95;if(!VisuMZ[_0x3d0296(0x1f3)]['Settings'][_0x3d0296(0x595)][_0x3d0296(0xc6c)])return![];if(_0x19dfa9[_0x3d0296(0x6ef)]())return!![];return Imported[_0x3d0296(0x24f)]&&_0x19dfa9[_0x3d0296(0xa20)]();},Game_Actor[_0x397c95(0x6cf)][_0x397c95(0x79d)]=function(){const _0x49b3e5=_0x397c95;if(this[_0x49b3e5(0x793)]()[_0x49b3e5(0x6cc)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x49b3e5(0xa18)===_0x49b3e5(0xa18))return Number(RegExp['$1']);else this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x49b3e5(0xad6)](),this[_0x49b3e5(0x3e8)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),_0x4e944a[_0x49b3e5(0x1f3)][_0x49b3e5(0xa61)][_0x49b3e5(0x6a3)](this),this[_0x49b3e5(0xc8f)](),this[_0x49b3e5(0x8b7)](),this[_0x49b3e5(0x580)](),this[_0x49b3e5(0x8f0)]();}else{if(this[_0x49b3e5(0x793)]()[_0x49b3e5(0x6cc)][_0x49b3e5(0xb38)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor['prototype'][_0x397c95(0x3f9)]=function(){const _0x18f090=_0x397c95;if(this[_0x18f090(0x793)]()[_0x18f090(0x6cc)][_0x18f090(0xb38)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x18f090(0x6cc)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x397c95(0x6cf)]['drawItemImagePortraitStyle']=function(_0xd0f5ba){const _0x480a89=_0x397c95,_0x349d20=this[_0x480a89(0x793)](_0xd0f5ba);if(this[_0x480a89(0x21d)](_0x349d20)){if(_0x480a89(0x8b5)!==_0x480a89(0x8b5))this[_0x480a89(0x512)]=_0x5351bc[_0x480a89(0x9a2)]()[_0x480a89(0xb34)]();else{const _0x185629='actor%1-portrait'[_0x480a89(0xadd)](_0x349d20['actorId']()),_0x18b05a=this[_0x480a89(0x1e4)](_0x185629,Sprite),_0x1e9bcc=_0x349d20[_0x480a89(0xa3e)]();_0x1e9bcc!==''?_0x18b05a[_0x480a89(0x60e)]=ImageManager[_0x480a89(0xc0a)](_0x1e9bcc):_0x18b05a['bitmap']=ImageManager[_0x480a89(0x641)];const _0x43b77d=this['itemRect'](_0xd0f5ba);_0x18b05a['anchor']['x']=0.5,_0x18b05a[_0x480a89(0x140)]['y']=0x1;let _0x3d3ec1=Math[_0x480a89(0x403)](_0x43b77d['x']+_0x43b77d[_0x480a89(0x76b)]/0x2)+this[_0x480a89(0x647)];_0x3d3ec1+=_0x349d20[_0x480a89(0x79d)]();let _0x2f6e3b=Math[_0x480a89(0x403)](this[_0x480a89(0x9b1)]);_0x2f6e3b+=_0x349d20[_0x480a89(0x3f9)](),_0x18b05a[_0x480a89(0xae0)](_0x3d3ec1,_0x2f6e3b);const _0x2c2938=VisuMZ[_0x480a89(0x1f3)][_0x480a89(0x716)][_0x480a89(0x595)][_0x480a89(0x1d1)];_0x18b05a[_0x480a89(0x2b2)]['x']=_0x2c2938,_0x18b05a[_0x480a89(0x2b2)]['y']=_0x2c2938,_0x18b05a['show']();}}else{const _0x5cd4e2=this[_0x480a89(0x8b8)](_0xd0f5ba);this[_0x480a89(0x546)](_0x349d20,_0x5cd4e2['x'],_0x5cd4e2['y'],_0x5cd4e2[_0x480a89(0x76b)],_0x5cd4e2[_0x480a89(0x9b1)]);}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x1e4)]=function(_0x227d74,_0x399379){const _0x1c10cc=_0x397c95,_0x297d6f=this[_0x1c10cc(0x60d)];if(_0x297d6f[_0x227d74])return _0x297d6f[_0x227d74];else{const _0x160525=new _0x399379();return _0x297d6f[_0x227d74]=_0x160525,this[_0x1c10cc(0x8a5)](_0x160525),this[_0x1c10cc(0x8a5)](this[_0x1c10cc(0xb27)]),_0x160525;}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x6d9)]=function(){const _0x4de115=_0x397c95;this[_0x4de115(0x638)](),this['_createEffectsContainer'](),Window_StatusBase['prototype'][_0x4de115(0x6d9)][_0x4de115(0x6a3)](this),this[_0x4de115(0xadf)]();},Window_BattleStatus['prototype'][_0x397c95(0x638)]=function(){const _0x3e675d=_0x397c95;this[_0x3e675d(0xb27)]=new Sprite(),this['_cursorArea'][_0x3e675d(0x635)]=[new PIXI[(_0x3e675d(0x635))][(_0x3e675d(0xc93))]()],this[_0x3e675d(0xb27)][_0x3e675d(0xbb0)]=new Rectangle(),this[_0x3e675d(0xb27)][_0x3e675d(0xae0)](this[_0x3e675d(0x517)],this['_padding']),this[_0x3e675d(0x5ab)](this[_0x3e675d(0xb27)]);},Window_BattleStatus[_0x397c95(0x6cf)]['_createEffectsContainer']=function(){const _0x77ef91=_0x397c95;this[_0x77ef91(0x6f5)]=new Sprite(),this['addChild'](this['_effectsContainer']);},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x3c5)]=function(){const _0x3f665a=_0x397c95;this[_0x3f665a(0x6f5)]&&this[_0x3f665a(0x5ab)](this['_effectsContainer']);},Window_BattleStatus['prototype'][_0x397c95(0xadf)]=function(){const _0x46d7d9=_0x397c95;this[_0x46d7d9(0x928)]=new Sprite(),this[_0x46d7d9(0x5ab)](this[_0x46d7d9(0x928)]);},Window_BattleStatus[_0x397c95(0x6cf)]['_createCursorSprite']=function(){const _0x356a7d=_0x397c95;this[_0x356a7d(0x7e0)]=new Sprite();for(let _0x32691b=0x0;_0x32691b<0x9;_0x32691b++){this['_cursorSprite']['addChild'](new Sprite());}this[_0x356a7d(0xb27)][_0x356a7d(0x5ab)](this[_0x356a7d(0x7e0)]);},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x28c)]=function(){const _0x5a8d00=_0x397c95;Window_StatusBase[_0x5a8d00(0x6cf)][_0x5a8d00(0x28c)][_0x5a8d00(0x6a3)](this),this[_0x5a8d00(0xa6b)]();},Window_BattleStatus['prototype'][_0x397c95(0xa6b)]=function(){const _0x1e8400=_0x397c95,_0x18bda6=this[_0x1e8400(0x517)];this[_0x1e8400(0xb27)]['move'](_0x18bda6,_0x18bda6),this[_0x1e8400(0xb27)]['x']=_0x18bda6-this[_0x1e8400(0xa64)]['x'],this['_cursorArea']['y']=_0x18bda6-this[_0x1e8400(0xa64)]['y'];if(this[_0x1e8400(0x14f)]>0x0&&this[_0x1e8400(0x259)]>0x0)this[_0x1e8400(0xb27)]['visible']=this[_0x1e8400(0x63a)]();else{if(_0x1e8400(0x4d6)==='rKPNt')this[_0x1e8400(0xb27)][_0x1e8400(0x3d2)]=![];else return this[_0x1e8400(0xcfe)]=this[_0x1e8400(0xcfe)]||{},this[_0x1e8400(0xcfe)][_0x5ccb43]!==_0x1727ca;}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x487)]=function(){const _0x45f3dc=_0x397c95;Window_StatusBase[_0x45f3dc(0x6cf)]['_updateFilterArea']['call'](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x397c95(0x6cf)]['_updateCursorFilterArea']=function(){const _0x52b484=_0x397c95,_0x5e74bf=this['_cursorArea'][_0x52b484(0xc23)][_0x52b484(0xa43)](new Point(0x0,0x0)),_0x10780a=this[_0x52b484(0xb27)][_0x52b484(0xbb0)];_0x10780a['x']=_0x5e74bf['x']+this['origin']['x'],_0x10780a['y']=_0x5e74bf['y']+this[_0x52b484(0xa64)]['y'],_0x10780a['width']=this[_0x52b484(0x14f)],_0x10780a[_0x52b484(0x9b1)]=this[_0x52b484(0x259)];},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0xc51)]=function(_0x103c62){const _0x14922c=_0x397c95;if(this['battleLayoutStyle']()!=='portrait')return;this[_0x14922c(0x6aa)](_0x103c62['index']());},Window_BattleStatus[_0x397c95(0x6cf)]['addDamageSprite']=function(_0x2efdb4,_0x140695){const _0x24fb0d=_0x397c95;if(!this[_0x24fb0d(0x928)])return;if(!_0x2efdb4)return;if(!_0x140695)return;const _0x96640b=this[_0x24fb0d(0x4ec)](_0x140695[_0x24fb0d(0x6e7)]());_0x96640b['x']+=_0x96640b[_0x24fb0d(0x76b)]/0x2+this[_0x24fb0d(0x647)],_0x2efdb4['x']=_0x96640b['x'],_0x2efdb4['y']=_0x96640b['y'],this[_0x24fb0d(0x928)][_0x24fb0d(0x5ab)](_0x2efdb4);},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x2fb)]=function(_0xa6a2a5){const _0x50a586=_0x397c95;if(!this[_0x50a586(0x928)])return;if(!_0xa6a2a5)return;this[_0x50a586(0x928)][_0x50a586(0xa8a)](_0xa6a2a5);},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0xcf7)]=function(){const _0x10dfb6=_0x397c95;if(!this[_0x10dfb6(0x4a2)]())return;if(!this[_0x10dfb6(0x86b)])this[_0x10dfb6(0x327)]();this[_0x10dfb6(0x452)](),this['updateBorderSprite']();},Window_BattleStatus['prototype'][_0x397c95(0x4a2)]=function(){const _0xe0449=_0x397c95;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0xe0449(0x650)]())return![];return VisuMZ[_0xe0449(0x1f3)][_0xe0449(0x716)][_0xe0449(0x595)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x397c95(0x6cf)]['createBorderStylePortraitSprite']=function(){const _0x2f99e6=_0x397c95;this[_0x2f99e6(0x86b)]=new Sprite();const _0x3d52c8=SceneManager[_0x2f99e6(0x6fe)],_0x1c20e9=_0x3d52c8['children'][_0x2f99e6(0xb70)](_0x3d52c8['_windowLayer']);_0x3d52c8[_0x2f99e6(0x946)](this[_0x2f99e6(0x86b)],_0x1c20e9),this[_0x2f99e6(0x86b)][_0x2f99e6(0x140)]['x']=0.5,this['_borderPortraitSprite'][_0x2f99e6(0x140)]['y']=0x1;const _0x4d6931=VisuMZ[_0x2f99e6(0x1f3)][_0x2f99e6(0x716)]['BattleLayout'][_0x2f99e6(0x6cb)];this['_borderPortraitSprite']['scale']['x']=_0x4d6931,this[_0x2f99e6(0x86b)]['scale']['y']=_0x4d6931,this['_borderPortraitSprite']['y']=this['y']+this[_0x2f99e6(0x9b1)],this[_0x2f99e6(0x7f4)]=0x0;},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x1c1)]=function(){const _0x209f60=_0x397c95;return BattleManager[_0x209f60(0xadb)]();},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x452)]=function(){const _0x252a60=_0x397c95;this[_0x252a60(0x86b)][_0x252a60(0x3d2)]=this[_0x252a60(0x1c1)]();const _0x38219e=BattleManager['actor'](),_0x2e0c7c=_0x38219e?_0x38219e[_0x252a60(0xa3e)]()||'':'';if(_0x38219e===this['_borderPortraitSprite'][_0x252a60(0x793)]&&_0x2e0c7c===this['_borderPortraitSprite'][_0x252a60(0xc4c)])return;this[_0x252a60(0x86b)][_0x252a60(0x793)]=_0x38219e||this[_0x252a60(0x86b)][_0x252a60(0x793)],this['_borderPortraitSprite'][_0x252a60(0xc4c)]=_0x2e0c7c;if(!_0x38219e)return;else{if(_0x2e0c7c===''){if(_0x252a60(0x392)===_0x252a60(0x39d)){let _0x5dea23=0x0;if(this['_distortionSprite']&&this[_0x252a60(0x32a)]!==_0x50d848){const _0x7be68a=this[_0x252a60(0x763)][_0x252a60(0x2b2)]['y'];_0x5dea23-=(_0x7be68a-0x1)*this[_0x252a60(0x9b1)];}return _0x5dea23;}else{this[_0x252a60(0x86b)][_0x252a60(0x60e)]=ImageManager[_0x252a60(0x641)],this[_0x252a60(0x86b)][_0x252a60(0xc4c)]='';return;}}else{const _0x17faec=ImageManager['loadPicture'](_0x2e0c7c);this[_0x252a60(0x86b)]['opacity']=0x0,_0x17faec[_0x252a60(0xb7c)](this[_0x252a60(0x1ec)][_0x252a60(0x16e)](this,_0x17faec));}}},Window_BattleStatus[_0x397c95(0x6cf)]['processBorderActor']=function(_0x4623f3){const _0x62136f=_0x397c95;this['_borderPortraitDuration']=0x14,this[_0x62136f(0x86b)][_0x62136f(0x60e)]=_0x4623f3;if(SceneManager['_scene'][_0x62136f(0x80a)]()){if('XFhqA'!==_0x62136f(0xb01)){const _0x45a229=_0x49b990[_0x62136f(0xd06)](_0x2064fc);_0x45a229['addLoadListener'](this[_0x62136f(0x941)][_0x62136f(0x16e)](this,_0x45a229));}else this['_borderPortraitSprite']['x']=0x0,this[_0x62136f(0xc8a)]=Math[_0x62136f(0xcad)](_0x4623f3[_0x62136f(0x76b)]/0x2);}else{if(_0x62136f(0x43c)!==_0x62136f(0x43c)){if([0x6c,0x198]['includes'](_0x39cf1b[_0x62136f(0x665)])){const _0x563705=_0x3b5fcc[_0x62136f(0x554)][0x0];if(_0x563705[_0x62136f(0xb38)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}else this[_0x62136f(0x86b)]['x']=this['width'],this[_0x62136f(0xc8a)]=this[_0x62136f(0x76b)]*0x3/0x4;}this[_0x62136f(0x86b)][_0x62136f(0x2c9)]=0x0,this[_0x62136f(0x86b)]['y']=this['y']+this['height'];const _0x1d47f8=BattleManager[_0x62136f(0x793)]();_0x1d47f8&&(this[_0x62136f(0xc8a)]+=_0x1d47f8['getBattlePortraitOffsetX'](),this[_0x62136f(0x86b)]['y']+=_0x1d47f8[_0x62136f(0x3f9)]());},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x8b2)]=function(){const _0x53f67f=_0x397c95;if(this[_0x53f67f(0x7f4)]>0x0){if(_0x53f67f(0xcc6)===_0x53f67f(0xb99))this[_0x53f67f(0x840)]();else{const _0x3fe8a1=this['_borderPortraitDuration'],_0x1d99ba=this[_0x53f67f(0x86b)];_0x1d99ba['x']=(_0x1d99ba['x']*(_0x3fe8a1-0x1)+this['_borderPortraitTargetX'])/_0x3fe8a1,_0x1d99ba[_0x53f67f(0x2c9)]=(_0x1d99ba[_0x53f67f(0x2c9)]*(_0x3fe8a1-0x1)+0xff)/_0x3fe8a1,this[_0x53f67f(0x7f4)]--;}}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x84b)]=function(){const _0x5d620b=_0x397c95;return;this['_effectsContainer']&&(this[_0x5d620b(0x6f5)]['x']=this['x'],this[_0x5d620b(0x6f5)]['y']=this['y']);if(this['_damageContainer']){if(_0x5d620b(0x5bb)!==_0x5d620b(0x84c))this[_0x5d620b(0x928)]['x']=this['x'],this[_0x5d620b(0x928)]['y']=this['y'];else{this[_0x5d620b(0xb1f)]()[_0x5d620b(0x5ab)](_0x596a5c);if(_0x3eec4c[_0x5d620b(0xcc4)]())_0x19682f[_0x5d620b(0x2b2)]['x']=-0x1;}}},Window_BattleStatus['prototype'][_0x397c95(0xac4)]=function(){const _0x3b099e=_0x397c95,_0x57cfea=VisuMZ[_0x3b099e(0x1f3)][_0x3b099e(0x716)][_0x3b099e(0x595)];if(_0x57cfea[_0x3b099e(0xb20)]){if(_0x3b099e(0x7ad)!==_0x3b099e(0x7ad)){if(!this[_0x3b099e(0x928)])return;if(!_0xac4fc7)return;this[_0x3b099e(0x928)][_0x3b099e(0xa8a)](_0x2807d2);}else{const _0x1684f6=new Sprite();_0x1684f6[_0x3b099e(0x60e)]=ImageManager[_0x3b099e(0x28b)](_0x57cfea['StatusWindowAttachmentBack']),_0x1684f6['x']=_0x57cfea[_0x3b099e(0x5fd)]||0x0,_0x1684f6['y']=_0x57cfea[_0x3b099e(0xc8e)]||0x0,this[_0x3b099e(0x8a5)](_0x1684f6),this[_0x3b099e(0xae9)]=_0x1684f6;}}if(_0x57cfea['StatusWindowAttachmentFront']){const _0x25de86=new Sprite();_0x25de86[_0x3b099e(0x60e)]=ImageManager[_0x3b099e(0x28b)](_0x57cfea[_0x3b099e(0xcf5)]),_0x25de86['x']=_0x57cfea['StatusWindowAttachmentFrontOffsetX']||0x0,_0x25de86['y']=_0x57cfea[_0x3b099e(0x42f)]||0x0,this[_0x3b099e(0x5ab)](_0x25de86),this[_0x3b099e(0xac7)]=_0x25de86;}},Window_BattleStatus[_0x397c95(0x6cf)][_0x397c95(0x9e8)]=function(){const _0x128631=_0x397c95;if(this[_0x128631(0xac7)]){if(_0x128631(0x995)===_0x128631(0x3d9)){if(!this[_0x128631(0x347)][_0x128631(0x3bc)](_0x12b7b6['id']))return![];}else this['addChild'](this[_0x128631(0xac7)]);}if(this[_0x128631(0xae9)]){if(_0x128631(0xcbd)!==_0x128631(0xcbd)){_0x54e942['VisuMZ_0_CoreEngine']&&this[_0x128631(0x6d4)]()&&this[_0x128631(0x5b4)]();const _0x2a8c10=_0x3dee0b['members'](),_0x4e7e82=[];for(const _0x586e7f of _0x2a8c10){_0x4e7e82[_0x128631(0x4da)](new _0x585f21(_0x586e7f));}_0x4e7e82['sort'](this[_0x128631(0x861)][_0x128631(0x16e)](this));for(const _0x3929ca of _0x4e7e82){this[_0x128631(0xc2c)]['addChild'](_0x3929ca);}this[_0x128631(0x6d8)]=_0x4e7e82;}else this[_0x128631(0x8a5)](this[_0x128631(0xae9)]);}},Window_BattleActor[_0x397c95(0x6cf)]['isCurrentItemEnabled']=function(){const _0x433360=_0x397c95;return this[_0x433360(0x860)]();},Window_BattleActor['prototype'][_0x397c95(0x860)]=function(){const _0x4b4c6b=_0x397c95,_0x23bcb5=BattleManager[_0x4b4c6b(0x772)]();if(!_0x23bcb5)return!![];if(!_0x23bcb5[_0x4b4c6b(0x398)]())return!![];const _0x3ffb04=this[_0x4b4c6b(0x793)](this['index']()),_0x14f06f=_0x23bcb5[_0x4b4c6b(0x398)]()[_0x4b4c6b(0x6cc)];if(_0x14f06f[_0x4b4c6b(0xb38)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x3ffb04===BattleManager[_0x4b4c6b(0x793)]())return![];}if(_0x23bcb5[_0x4b4c6b(0x129)]()){if(!_0x3ffb04[_0x4b4c6b(0x88a)]())return![];}if(_0x23bcb5['isForAliveFriend']()){if('JgkJR'==='JgkJR'){if(!_0x3ffb04[_0x4b4c6b(0xa0e)]())return![];}else _0x19528e[_0x4b4c6b(0x444)]();}return!![];},Window_BattleActor[_0x397c95(0x6cf)][_0x397c95(0x879)]=function(_0x11b669){this['_enemyWindowMode']=_0x11b669;},VisuMZ[_0x397c95(0x1f3)]['Window_BattleActor_processTouch']=Window_BattleActor['prototype'][_0x397c95(0x3ca)],Window_BattleActor[_0x397c95(0x6cf)][_0x397c95(0x3ca)]=function(){const _0x9d6022=_0x397c95;Window_BattleStatus[_0x9d6022(0x6cf)][_0x9d6022(0x3ca)][_0x9d6022(0x6a3)](this);if(this[_0x9d6022(0x69a)]){if(_0x9d6022(0xa30)===_0x9d6022(0x803)){let _0x536d8f=_0x373118['createTroopNote'](_0x5544a6['id']);this[_0x9d6022(0x891)](_0x536d8f);}else this['processEnemyModeTouchBattleCore']();}else{if(_0x9d6022(0xb9e)!=='HVtZx')VisuMZ['BattleCore'][_0x9d6022(0x35d)][_0x9d6022(0x6a3)](this);else{if(!_0x1d2cde[_0x9d6022(0x1f3)][_0x9d6022(0x716)][_0x9d6022(0xa1f)]['ShowTpDmg'])return;_0x56cb10[_0x9d6022(0x1f3)][_0x9d6022(0xc96)][_0x9d6022(0x6a3)](this,_0x116eed);}}},Window_BattleActor[_0x397c95(0x6cf)][_0x397c95(0x775)]=function(){const _0x4aa2e5=_0x397c95,_0x3fb4b3=SceneManager[_0x4aa2e5(0x6fe)][_0x4aa2e5(0x346)];if(!_0x3fb4b3)return;this[_0x4aa2e5(0x2d7)]=![];const _0x1a6a50=this[_0x4aa2e5(0xcdb)]();if(_0x1a6a50>=0x0){if(_0x4aa2e5(0x93f)!==_0x4aa2e5(0x93f))_0x463aa9[_0x4aa2e5(0x1f3)][_0x4aa2e5(0xb95)][_0x4aa2e5(0x6a3)](this),this[_0x4aa2e5(0x7aa)]();else{this[_0x4aa2e5(0xb89)](_0x1a6a50);if(TouchInput[_0x4aa2e5(0x627)]()){const _0x158b86=$gameParty[_0x4aa2e5(0x2e0)]()[_0x1a6a50],_0x53e6ee=_0x3fb4b3[_0x4aa2e5(0x634)][_0x4aa2e5(0xb70)](_0x158b86);_0x53e6ee>=0x0&&(_0x4aa2e5(0xa99)!==_0x4aa2e5(0xa99)?(this[_0x4aa2e5(0x169)]=(this[_0x4aa2e5(0x169)]*(_0x531e2b-0x1)+this[_0x4aa2e5(0x7ce)])/_0x31f473,this[_0x4aa2e5(0x887)]=(this['_homeY']*(_0x484dd2-0x1)+this[_0x4aa2e5(0xa3f)])/_0xa77164):(_0x3fb4b3[_0x4aa2e5(0xb89)](_0x53e6ee),_0x3fb4b3['processOk']()));}}}},Window_BattleActor[_0x397c95(0x6cf)]['_makeCursorAlpha']=function(){const _0x451861=_0x397c95;this[_0x451861(0x69a)]&&(_0x451861(0x47c)===_0x451861(0xab4)?this[_0x451861(0x74a)](_0x3b6b05[_0x451861(0x7e1)],0x0):(this[_0x451861(0x445)]++,this[_0x451861(0x7e6)]=!![]));const _0x11b618=Window_BattleStatus[_0x451861(0x6cf)][_0x451861(0x812)][_0x451861(0x6a3)](this);return this[_0x451861(0x69a)]&&(this[_0x451861(0x7e6)]=![]),_0x11b618;},VisuMZ['BattleCore'][_0x397c95(0x94d)]=Window_BattleActor['prototype'][_0x397c95(0x71a)],Window_BattleActor[_0x397c95(0x6cf)][_0x397c95(0x71a)]=function(){const _0x2d4024=_0x397c95;VisuMZ[_0x2d4024(0x1f3)][_0x2d4024(0x94d)][_0x2d4024(0x6a3)](this);const _0x3f1116=BattleManager[_0x2d4024(0x772)]();if(_0x3f1116){const _0x4ef139=$gameParty[_0x2d4024(0x4c3)]();_0x3f1116['canSingleOrMultipleSelect']()&&_0x4ef139['length']>0x1&&this[_0x2d4024(0x7d0)](_0x2d4024(0xab9),this[_0x2d4024(0x690)][_0x2d4024(0x16e)](this));}},VisuMZ['BattleCore'][_0x397c95(0x93b)]=Window_BattleActor[_0x397c95(0x6cf)][_0x397c95(0x16a)],Window_BattleActor['prototype'][_0x397c95(0x16a)]=function(){const _0x48f9b0=_0x397c95;VisuMZ[_0x48f9b0(0x1f3)][_0x48f9b0(0x93b)]['call'](this),delete this['_handlers'][_0x48f9b0(0x799)],delete this[_0x48f9b0(0xabe)][_0x48f9b0(0xab9)];},Window_BattleActor[_0x397c95(0x6cf)]['selectAllActors']=function(){const _0x43b309=_0x397c95,_0x3af046=BattleManager[_0x43b309(0x772)]();if(_0x3af046)_0x3af046['setTargetBattlerKey'](_0x43b309(0x79f));this[_0x43b309(0x173)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x993)]=Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0x918)],Window_BattleEnemy[_0x397c95(0x6cf)]['initialize']=function(_0x1220c8){const _0x4618a9=_0x397c95;this['_lastEnemy']=null,VisuMZ['BattleCore'][_0x4618a9(0x993)]['call'](this,_0x1220c8);if(Imported[_0x4618a9(0x835)]){if(VisuMZ['AggroControlSystem'][_0x4618a9(0x708)]<1.12){if('oRazD'!=='oRazD')this['setBattlerFlip'](![]),this[_0x4618a9(0x9a8)]=_0x5dc586,this[_0x4618a9(0x1e2)]=_0x4dc5bb;else{let _0x45c42f='';_0x45c42f+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x45c42f+=_0x4618a9(0x83f),_0x45c42f+=_0x4618a9(0xc6a),alert(_0x45c42f),SceneManager[_0x4618a9(0x565)]();}}}},Window_BattleEnemy[_0x397c95(0x6cf)]['maxCols']=function(){const _0x125fa1=_0x397c95;return this[_0x125fa1(0x5b7)]();},VisuMZ[_0x397c95(0x1f3)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0x71a)],Window_BattleEnemy[_0x397c95(0x6cf)]['show']=function(){const _0x116f4d=_0x397c95;VisuMZ[_0x116f4d(0x1f3)][_0x116f4d(0x25d)]['call'](this),this['y']=Graphics['height']*0xa,this[_0x116f4d(0x74f)]()&&this[_0x116f4d(0x504)]();},VisuMZ['BattleCore'][_0x397c95(0x208)]=Window_BattleEnemy[_0x397c95(0x6cf)]['hide'],Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0x16a)]=function(){const _0xf03315=_0x397c95;VisuMZ[_0xf03315(0x1f3)]['Window_BattleEnemy_hide'][_0xf03315(0x6a3)](this),$gameParty[_0xf03315(0xb89)](null),delete this['_handlers']['pageup'],delete this[_0xf03315(0xabe)]['pagedown'];},Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0x4c4)]=function(){const _0x5b17c5=_0x397c95;let _0x26c375=$gameTroop[_0x5b17c5(0x4c3)]();const _0x2dec0c=BattleManager[_0x5b17c5(0x772)]();if(_0x2dec0c){_0x2dec0c[_0x5b17c5(0x6bd)]()&&_0x26c375['length']>0x1&&this[_0x5b17c5(0x7d0)](_0x5b17c5(0x799),this[_0x5b17c5(0xcbf)]['bind'](this));if(_0x2dec0c[_0x5b17c5(0x395)]()){if(_0x5b17c5(0x7d3)!==_0x5b17c5(0x210)){const _0x3b9be5=$gameParty[_0x5b17c5(0x4c3)]();_0x26c375=_0x26c375['concat'](_0x3b9be5),_0x2dec0c[_0x5b17c5(0x6bd)]()&&_0x3b9be5[_0x5b17c5(0x187)]>0x1&&this[_0x5b17c5(0x7d0)](_0x5b17c5(0xab9),this[_0x5b17c5(0x690)]['bind'](this));}else!this[_0x5b17c5(0x319)]()&&!this['_logWindow'][_0x5b17c5(0xc5e)]()&&(this[_0x5b17c5(0xae6)]=_0x5b17c5(0x774));}}return _0x26c375;},Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0x2ed)]=function(){const _0x5bdd64=_0x397c95;this['_enemies']=this[_0x5bdd64(0x4c4)](),this['sortEnemies'](),Window_Selectable[_0x5bdd64(0x6cf)][_0x5bdd64(0x2ed)]['call'](this);},Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0x350)]=function(){const _0x553707=_0x397c95;this[_0x553707(0x634)]['sort']((_0x24467d,_0x11c10c)=>{const _0x1e8ae2=_0x553707;if(_0x24467d['isActor']()!==_0x11c10c['isActor']()){if(_0x1e8ae2(0x278)!=='AERkM')this[_0x1e8ae2(0x828)]();else{if(_0x24467d['isEnemy']())return-0x1;if(_0x11c10c[_0x1e8ae2(0x407)]())return 0x1;}}if(_0x24467d[_0x1e8ae2(0x850)]()&&_0x11c10c[_0x1e8ae2(0x850)]())return _0x24467d[_0x1e8ae2(0x6e7)]()-_0x11c10c['index']();return _0x24467d[_0x1e8ae2(0x7eb)]()['_baseX']===_0x11c10c[_0x1e8ae2(0x7eb)]()['_baseX']?_0x24467d['battler']()['_baseY']-_0x11c10c['battler']()[_0x1e8ae2(0x39a)]:_0x24467d[_0x1e8ae2(0x7eb)]()['_baseX']-_0x11c10c[_0x1e8ae2(0x7eb)]()[_0x1e8ae2(0x4fd)];});if(SceneManager['isBattleFlipped']()){if(_0x553707(0xbfe)===_0x553707(0x81b))return[_0x41a5b2['GetActionSequenceSpecialTarget']()];else this['_enemies']['reverse']();}},Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0x5e4)]=function(){const _0x3e4033=_0x397c95,_0xe3bfd0=VisuMZ['BattleCore'][_0x3e4033(0x716)][_0x3e4033(0x7de)];_0xe3bfd0['LastSelected']?_0x3e4033(0xb1a)==='jJkQL'?_0x36620a=this[_0x3e4033(0x4a0)]():this[_0x3e4033(0xba4)]():this[_0x3e4033(0xcb6)]();},Window_BattleEnemy['prototype'][_0x397c95(0xba4)]=function(){const _0x500005=_0x397c95,_0x2cc1ea=BattleManager['inputtingAction']();if(_0x2cc1ea&&_0x2cc1ea[_0x500005(0x395)]()){if(_0x500005(0xc67)!==_0x500005(0xc67))this[_0x500005(0xa80)]=_0x5453c3[_0x500005(0x1f3)][_0x500005(0x716)][_0x500005(0x305)][_0x500005(0x482)][_0x500005(0x6a3)](this);else{if(_0x2cc1ea[_0x500005(0x9ef)]()){if(this[_0x500005(0x2ce)]&&this[_0x500005(0x634)][_0x500005(0x932)](this[_0x500005(0x2ce)])){if(_0x500005(0x764)!==_0x500005(0x764)){const _0x498130=this[_0x500005(0x7eb)]();if(_0x498130)_0x498130[_0x500005(0x6b4)](_0x46cf8d);}else{const _0x417dad=this['_enemies']['indexOf'](this[_0x500005(0x2ce)]);return this[_0x500005(0x6fb)](_0x417dad);}}else return this[_0x500005(0xcb6)]();}}}if(this['_lastEnemy']&&this[_0x500005(0x634)][_0x500005(0x932)](this[_0x500005(0x27a)])){const _0x4add9c=this['_enemies']['indexOf'](this[_0x500005(0x27a)]);this[_0x500005(0x6fb)](_0x4add9c);}else{if('XUvcb'!==_0x500005(0x1e1)){const _0x17f61b=this[_0x500005(0x296)](this[_0x500005(0x6e7)]());let _0x18d601=this['commandName'](this[_0x500005(0x6e7)]());_0x18d601=_0x18d601[_0x500005(0x2bd)](/\\I\[(\d+)\]/gi,''),_0x33bc54[_0x500005(0x698)](),this['commandNameWindowDrawBackground'](_0x18d601,_0x17f61b),this[_0x500005(0x352)](_0x18d601,_0x17f61b),this['commandNameWindowCenter'](_0x18d601,_0x17f61b);}else this[_0x500005(0xcb6)]();}},Window_BattleEnemy['prototype'][_0x397c95(0xcb6)]=function(){const _0x1d91cb=_0x397c95,_0x19e0e3=BattleManager[_0x1d91cb(0x772)]();if(_0x19e0e3&&_0x19e0e3[_0x1d91cb(0x395)]()){const _0x47b00d=$gameParty['aliveMembers']()[0x0];let _0x1b3934=this['_enemies'][_0x1d91cb(0xb70)](_0x47b00d);const _0xf801a7=_0x19e0e3['item']()[_0x1d91cb(0x220)];if(_0xf801a7[_0x1d91cb(0xb38)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){if(_0x1d91cb(0xc68)!==_0x1d91cb(0xbb9)){this[_0x1d91cb(0x6fb)](_0x1b3934);return;}else this[_0x1d91cb(0x7d0)]('pagedown',this[_0x1d91cb(0x690)]['bind'](this));}else{if(_0xf801a7[_0x1d91cb(0xb38)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x1d91cb(0x6fb)](_0x1b3934-0x1);return;}}}const _0x2fe299=VisuMZ['BattleCore'][_0x1d91cb(0x716)][_0x1d91cb(0x7de)];let _0x5cf814=![];if($gameSystem[_0x1d91cb(0x221)]())_0x5cf814=_0x2fe299[_0x1d91cb(0x523)];else{if(_0x1d91cb(0xab5)===_0x1d91cb(0xab5))_0x5cf814=_0x2fe299[_0x1d91cb(0x2d1)];else for(const _0x37e5e8 of _0x5d9021){for(const _0xbfb1cb of _0x323f2f){const _0x492caa=_0x2fddbe[0x0]['format'](_0xbfb1cb[0x0],_0x37e5e8[0x0]),_0x227a88=_0x4f8baf[0x1][_0x1d91cb(0xadd)](_0xbfb1cb[0x1],_0x37e5e8[0x1])[_0x1d91cb(0xb34)](),_0x3cd500=new _0x558267(_0x543a13[_0x1d91cb(0xadd)](_0x227a88),'i');_0x3db393[_0x492caa]=_0x3cd500;}}}this[_0x1d91cb(0x6fb)](_0x5cf814?this[_0x1d91cb(0x5b7)]()-0x1:0x0);},Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0xb91)]=function(){const _0x54c21d=_0x397c95;Window_Selectable[_0x54c21d(0x6cf)]['callOkHandler'][_0x54c21d(0x6a3)](this);if(this[_0x54c21d(0x9ec)]()['isEnemy']())this[_0x54c21d(0x27a)]=this['enemy']();if(this['enemy']()[_0x54c21d(0x850)]())this[_0x54c21d(0x2ce)]=this[_0x54c21d(0x9ec)]();},Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0xb89)]=function(_0x41b1bf){const _0x4e75e9=_0x397c95;Window_Selectable[_0x4e75e9(0x6cf)]['select'][_0x4e75e9(0x6a3)](this,_0x41b1bf),$gameTroop[_0x4e75e9(0xb89)](this[_0x4e75e9(0x9ec)]()),$gameParty[_0x4e75e9(0xb89)](this[_0x4e75e9(0x9ec)]());if(!this['enemy']())return;if(this[_0x4e75e9(0x74f)]()){if(_0x4e75e9(0xc61)===_0x4e75e9(0xc61)){const _0x238905=SceneManager[_0x4e75e9(0x6fe)][_0x4e75e9(0xba1)];this[_0x4e75e9(0x9ec)]()['isActor']()?_0x238905[_0x4e75e9(0xb89)](this[_0x4e75e9(0x9ec)]()['index']()):_0x238905[_0x4e75e9(0xb3d)]();}else return _0x25ba3a['BattleCore'][_0x4e75e9(0x716)][_0x4e75e9(0x7c8)][_0x4e75e9(0x471)]['call'](this);}},Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0x74f)]=function(){const _0x4ab38f=_0x397c95;if(!this['visible'])return![];if($gameSystem['isSideView']())return![];const _0x8c7e9e=SceneManager['_scene'][_0x4ab38f(0x1b2)](),_0x480ed4=['default','list','xp',_0x4ab38f(0xab1),'border'];return _0x480ed4[_0x4ab38f(0x932)](_0x8c7e9e);},Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0x504)]=function(){const _0x2393f3=_0x397c95,_0x45da38=SceneManager[_0x2393f3(0x6fe)][_0x2393f3(0xba1)];_0x45da38[_0x2393f3(0x71a)](),_0x45da38[_0x2393f3(0x879)](!![]),_0x45da38['refresh'](),_0x45da38[_0x2393f3(0xb3d)]();const _0xa1f46d=SceneManager['_scene'][_0x2393f3(0x1b2)](),_0x26b993=['xp','portrait','border'];if(_0x26b993[_0x2393f3(0x932)](_0xa1f46d)){const _0x4062e6=SceneManager[_0x2393f3(0x6fe)][_0x2393f3(0x1e8)];_0x4062e6[_0x2393f3(0x2b2)]['y']=0x0;}},Window_BattleEnemy[_0x397c95(0x6cf)]['closeBattleActorWindow']=function(){const _0x384b20=_0x397c95,_0x185bbb=SceneManager[_0x384b20(0x6fe)]['_actorWindow'];_0x185bbb['hide'](),_0x185bbb['setEnemyWindowMode'](![]),_0x185bbb[_0x384b20(0xb3d)]();const _0x139895=SceneManager[_0x384b20(0x6fe)]['_statusWindow'];_0x139895[_0x384b20(0x2b2)]['y']=0x1;},Window_BattleEnemy[_0x397c95(0x6cf)][_0x397c95(0xcbf)]=function(){const _0x2ad321=_0x397c95,_0x84d970=BattleManager[_0x2ad321(0x772)]();if(_0x84d970)_0x84d970[_0x2ad321(0x64d)]('all\x20enemies');this[_0x2ad321(0x173)]();},Window_BattleEnemy['prototype'][_0x397c95(0x690)]=function(){const _0x36e2c3=_0x397c95,_0x30b5fd=BattleManager[_0x36e2c3(0x772)]();if(_0x30b5fd)_0x30b5fd[_0x36e2c3(0x64d)]('all\x20actors');this['processOk']();},Window_BattleItem['prototype'][_0x397c95(0x932)]=function(_0x212c38){const _0x258b5f=_0x397c95;if(!_0x212c38)return![];return _0x212c38['occasion']===0x0||_0x212c38[_0x258b5f(0xca2)]===0x1;};function Window_AutoBattleCancel(){const _0x558ae3=_0x397c95;this[_0x558ae3(0x918)](...arguments);}Window_AutoBattleCancel[_0x397c95(0x6cf)]=Object[_0x397c95(0x285)](Window_Base[_0x397c95(0x6cf)]),Window_AutoBattleCancel['prototype']['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x397c95(0x6cf)]['initialize']=function(_0x1dd35c){const _0x41af76=_0x397c95;Window_Base[_0x41af76(0x6cf)][_0x41af76(0x918)][_0x41af76(0x6a3)](this,_0x1dd35c),this[_0x41af76(0xbf1)](this['bgType']()),this[_0x41af76(0x2ed)]();},Window_AutoBattleCancel[_0x397c95(0x6cf)][_0x397c95(0xb58)]=function(){const _0x39eb49=_0x397c95;return VisuMZ[_0x39eb49(0x1f3)][_0x39eb49(0x716)]['AutoBattle'][_0x39eb49(0x938)];},Window_AutoBattleCancel[_0x397c95(0x6cf)]['refresh']=function(){const _0x23d12a=_0x397c95;this[_0x23d12a(0x915)]['clear']();const _0x94c28a=VisuMZ['BattleCore'][_0x23d12a(0x716)][_0x23d12a(0x7c8)]['AutoBattleMsg'],_0xabaedc=_0x94c28a[_0x23d12a(0xadd)](this['okButtonText'](),this[_0x23d12a(0x425)]()),_0x4c3232=this[_0x23d12a(0x5cd)](_0xabaedc)[_0x23d12a(0x76b)],_0x296c4d=Math[_0x23d12a(0xaee)]((this[_0x23d12a(0x14f)]-_0x4c3232)/0x2);this[_0x23d12a(0xa3c)](_0xabaedc,_0x296c4d,0x0,_0x4c3232);},Window_AutoBattleCancel[_0x397c95(0x6cf)][_0x397c95(0x61b)]=function(){const _0x26817c=_0x397c95;if(Imported[_0x26817c(0x301)])return TextManager[_0x26817c(0x3ce)]('ok');else{if('fFYjq'===_0x26817c(0x4c1))_0x5efe3f[_0x26817c(0x1f3)][_0x26817c(0xc86)][_0x26817c(0x6a3)](this,_0xce2510),this[_0x26817c(0xaed)](_0x1fc7bd);else return VisuMZ['BattleCore']['Settings'][_0x26817c(0x7c8)][_0x26817c(0x34f)];}},Window_AutoBattleCancel[_0x397c95(0x6cf)]['cancelButtonText']=function(){const _0x533f13=_0x397c95;if(Imported[_0x533f13(0x301)])return TextManager['getInputButtonString']('cancel');else{if(_0x533f13(0x3ff)!==_0x533f13(0x3ff))this[_0x533f13(0xb78)]()&&_0x5ea8ca['BattleCore'][_0x533f13(0x128)][_0x533f13(0x6a3)](this,_0x20e45f,_0x264296,_0x246036);else return VisuMZ[_0x533f13(0x1f3)][_0x533f13(0x716)][_0x533f13(0x7c8)][_0x533f13(0x479)];}},Window_AutoBattleCancel[_0x397c95(0x6cf)][_0x397c95(0x76c)]=function(){const _0x4263ab=_0x397c95;Window_Base[_0x4263ab(0x6cf)]['update'][_0x4263ab(0x6a3)](this),this[_0x4263ab(0x548)](),this[_0x4263ab(0x5eb)]();},Window_AutoBattleCancel[_0x397c95(0x6cf)][_0x397c95(0x548)]=function(){const _0x47e659=_0x397c95;this[_0x47e659(0x3d2)]=BattleManager[_0x47e659(0x8d5)];},Window_AutoBattleCancel[_0x397c95(0x6cf)]['updateCancel']=function(){const _0x3da9d7=_0x397c95;if(!BattleManager['_autoBattle'])return;(Input['isTriggered']('ok')||Input['isTriggered']('cancel')||TouchInput[_0x3da9d7(0x627)]()||TouchInput[_0x3da9d7(0x65d)]())&&(SoundManager[_0x3da9d7(0xca4)](),BattleManager[_0x3da9d7(0x8d5)]=![],Input['clear'](),TouchInput[_0x3da9d7(0x15f)]());};function Window_EnemyName(){const _0x5c07d7=_0x397c95;this[_0x5c07d7(0x918)](...arguments);}Window_EnemyName[_0x397c95(0x6cf)]=Object['create'](Window_StatusBase[_0x397c95(0x6cf)]),Window_EnemyName['prototype'][_0x397c95(0x32a)]=Window_EnemyName,Window_EnemyName['prototype'][_0x397c95(0x918)]=function(_0x227011){const _0x5b5552=_0x397c95;this['_enemyID']=_0x227011,this[_0x5b5552(0xb11)]='';const _0x2d5037=new Rectangle(0x0,0x0,Graphics[_0x5b5552(0xb5d)],this[_0x5b5552(0x288)]()*0x4);Window_StatusBase[_0x5b5552(0x6cf)][_0x5b5552(0x918)]['call'](this,_0x2d5037),this[_0x5b5552(0xbf1)](0x2),this[_0x5b5552(0x9be)]=0x0;},Window_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x412)]=function(){const _0x1143e5=_0x397c95;this[_0x1143e5(0x647)]=0x0;},Window_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x9ec)]=function(){const _0x4c01f1=_0x397c95;return $gameTroop['members']()[this[_0x4c01f1(0x40f)]];},Window_EnemyName[_0x397c95(0x6cf)]['update']=function(){const _0x2cc5cc=_0x397c95;Window_StatusBase['prototype'][_0x2cc5cc(0x76c)]['call'](this),this[_0x2cc5cc(0x9ec)]()&&this[_0x2cc5cc(0x9ec)]()['name']()!==this[_0x2cc5cc(0xb11)]&&(this[_0x2cc5cc(0xb11)]=this[_0x2cc5cc(0x9ec)]()[_0x2cc5cc(0xa29)](),this[_0x2cc5cc(0x2ed)]()),this[_0x2cc5cc(0x211)](),this[_0x2cc5cc(0x209)]();},Window_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x211)]=function(){const _0x2a2dac=_0x397c95;if(!this[_0x2a2dac(0x9ec)]()){if(this[_0x2a2dac(0x9be)]>0x0)this[_0x2a2dac(0x9be)]-=0x10;}else{if(this[_0x2a2dac(0x9ec)]()[_0x2a2dac(0x88a)]()){if(_0x2a2dac(0x190)!==_0x2a2dac(0xabf)){if(this[_0x2a2dac(0x9be)]>0x0)this[_0x2a2dac(0x9be)]-=0x10;}else this[_0x2a2dac(0x2df)]=this[_0x2a2dac(0x530)],this[_0x2a2dac(0x4ff)]=this[_0x2a2dac(0x7ed)];}else{if(SceneManager[_0x2a2dac(0x6fe)]['_enemyWindow']&&SceneManager[_0x2a2dac(0x6fe)][_0x2a2dac(0x346)][_0x2a2dac(0x7e6)]&&SceneManager['_scene'][_0x2a2dac(0x346)][_0x2a2dac(0x634)][_0x2a2dac(0x932)](this[_0x2a2dac(0x9ec)]())){if(this[_0x2a2dac(0x9be)]<0xff)this[_0x2a2dac(0x9be)]+=0x10;}else this[_0x2a2dac(0x9be)]>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName['prototype'][_0x397c95(0x209)]=function(){const _0x506845=_0x397c95;if(!this[_0x506845(0x9ec)]())return;if(SceneManager[_0x506845(0xcc4)]()){if('GGrQD'===_0x506845(0x9ce))this['x']=Graphics[_0x506845(0xb5d)]-this[_0x506845(0x9ec)]()[_0x506845(0x7eb)]()['_baseX'];else{if(this['item']()[_0x506845(0x6cc)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x41afe3=_0x5dfd56(_0x5168c8['$1'])[_0x506845(0x27f)]()['trim']();return _0x41afe3;}return _0x506845(0x4e8);}}else _0x506845(0xc69)!==_0x506845(0x9bc)?this['x']=this[_0x506845(0x9ec)]()[_0x506845(0x7eb)]()[_0x506845(0x4fd)]:this[_0x506845(0x95c)](_0x506845(0xbf0));this['x']-=Math[_0x506845(0x403)](this[_0x506845(0x76b)]/0x2),this['y']=this['enemy']()[_0x506845(0x7eb)]()[_0x506845(0x39a)]-Math[_0x506845(0x403)](this[_0x506845(0x288)]()*1.5);const _0x1b4cf9=VisuMZ[_0x506845(0x1f3)][_0x506845(0x716)][_0x506845(0x7de)];this['x']+=_0x1b4cf9[_0x506845(0x878)]||0x0,this['y']+=_0x1b4cf9[_0x506845(0x290)]||0x0;},Window_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x698)]=function(){const _0x41a4c5=_0x397c95;Window_Base['prototype'][_0x41a4c5(0x698)]['call'](this),this[_0x41a4c5(0x915)][_0x41a4c5(0x677)]=VisuMZ['BattleCore']['Settings']['Enemy']['NameFontSize'];},Window_EnemyName[_0x397c95(0x6cf)][_0x397c95(0x2ed)]=function(){const _0x59c23c=_0x397c95;Window_StatusBase['prototype'][_0x59c23c(0x2ed)][_0x59c23c(0x6a3)](this),this[_0x59c23c(0x915)][_0x59c23c(0x15f)]();if(!this[_0x59c23c(0x9ec)]())return;this[_0x59c23c(0x3c0)]();},Window_EnemyName['prototype'][_0x397c95(0x3c0)]=function(){const _0xee6fbd=_0x397c95;this['_text']=this[_0xee6fbd(0x9ec)]()['name']();const _0x31c654=this[_0xee6fbd(0x5cd)](this[_0xee6fbd(0xb11)])[_0xee6fbd(0x76b)],_0x13c87a=Math[_0xee6fbd(0x403)]((this[_0xee6fbd(0x14f)]-_0x31c654)/0x2);this[_0xee6fbd(0xa3c)](this['_text'],_0x13c87a,0x0,_0x31c654+0x8);},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xb13)]=function(){const _0x562f8a=_0x397c95;return VisuMZ['BattleCore'][_0x562f8a(0x716)][_0x562f8a(0xa1f)]['MaxLines'];},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xc15)]=function(){const _0x8b0f54=_0x397c95;return VisuMZ[_0x8b0f54(0x1f3)][_0x8b0f54(0x716)][_0x8b0f54(0xa1f)]['MessageWait'];},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x30f)]=function(){const _0x3cc72d=_0x397c95;return VisuMZ[_0x3cc72d(0x1f3)][_0x3cc72d(0x716)][_0x3cc72d(0xa1f)][_0x3cc72d(0x41b)];},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xc25)]=function(){return![];},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x973)]=function(_0x3aadac,_0x77e6db){const _0x4fc6db=_0x397c95;this['unshift'](_0x4fc6db(0x1b6)),BattleManager[_0x4fc6db(0x248)](_0x3aadac,_0x77e6db),this['callNextMethod']();},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x1b6)]=function(){const _0x4b92d1=_0x397c95;this[_0x4b92d1(0x7aa)]();},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x4da)]=function(_0x256d84){const _0x50e61a=_0x397c95,_0x6672ea=Array[_0x50e61a(0x6cf)][_0x50e61a(0x468)][_0x50e61a(0x6a3)](arguments,0x1),_0xef48c={'name':_0x256d84,'params':_0x6672ea},_0x593d82=this[_0x50e61a(0x90f)][_0x50e61a(0xb9a)](_0xd93864=>_0xd93864[_0x50e61a(0xa29)])[_0x50e61a(0xb70)]('actionSplicePoint');if(_0x593d82>=0x0)this[_0x50e61a(0x90f)][_0x50e61a(0xab3)](_0x593d82,0x0,_0xef48c);else{if('fMlmQ'==='RpEEr'){_0x423725=_0x8609a3||'',_0x40a5f6=_0x28679b||'';_0x3bde36===''&&_0x4f2bd1===''&&(_0x2507d0=this['_back1Sprite'][_0x50e61a(0x963)](),_0x17749e=this['_back2Sprite'][_0x50e61a(0xce0)]());const _0x5a2829=_0x1bef9f[_0x50e61a(0x28d)](_0x2308db),_0x5a327e=_0x10ac3f['loadBattleback2'](_0x2a4129);_0x5a2829[_0x50e61a(0xb7c)](this[_0x50e61a(0xbef)][_0x50e61a(0x16e)](this,this[_0x50e61a(0x7ba)],this[_0x50e61a(0x944)],_0x5a2829,_0x5a327e));}else this[_0x50e61a(0x90f)][_0x50e61a(0x4da)](_0xef48c);}},Window_BattleLog[_0x397c95(0x6cf)]['unshift']=function(_0x15161b){const _0x2212e2=_0x397c95,_0x404d9e=Array[_0x2212e2(0x6cf)][_0x2212e2(0x468)][_0x2212e2(0x6a3)](arguments,0x1);this[_0x2212e2(0x90f)]['unshift']({'name':_0x15161b,'params':_0x404d9e});},Window_BattleLog[_0x397c95(0x6cf)]['logActionList']=function(){const _0x4d19be=_0x397c95;if(!$gameTemp[_0x4d19be(0x196)]())return;console[_0x4d19be(0x3dd)](this[_0x4d19be(0x90f)][_0x4d19be(0xb9a)](_0x273e61=>_0x273e61['name'])[_0x4d19be(0x755)]('\x0a'));},VisuMZ[_0x397c95(0x1f3)]['Window_BattleLog_refresh']=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x2ed)],Window_BattleLog['prototype'][_0x397c95(0x2ed)]=function(){this['_requestRefresh']=!![];},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x7f9)]=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x76c)],Window_BattleLog['prototype'][_0x397c95(0x76c)]=function(){const _0x2b1b6c=_0x397c95;VisuMZ[_0x2b1b6c(0x1f3)][_0x2b1b6c(0x7f9)][_0x2b1b6c(0x6a3)](this);if(this[_0x2b1b6c(0x9f6)])this[_0x2b1b6c(0x46f)]();},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x46f)]=function(){const _0x162bd5=_0x397c95;this[_0x162bd5(0x9f6)]=![],VisuMZ[_0x162bd5(0x1f3)][_0x162bd5(0x384)][_0x162bd5(0x6a3)](this);},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x298)]=function(_0x181e93){const _0x522933=_0x397c95;let _0x10e52f=VisuMZ['BattleCore'][_0x522933(0x716)][_0x522933(0xa1f)][_0x522933(0x749)]['toLowerCase']()[_0x522933(0xb34)](),_0x587e8c=this['_lines'][_0x181e93];if(_0x587e8c[_0x522933(0xb38)](/<LEFT>/i))_0x10e52f=_0x522933(0x308);else{if(_0x587e8c[_0x522933(0xb38)](/<CENTER>/i))_0x522933(0xa91)!==_0x522933(0x3f5)?_0x10e52f='center':this[_0x522933(0x263)]['bitmap'][_0x522933(0x6bc)]!==this['_battler'][_0x522933(0x802)]()&&(this[_0x522933(0x263)][_0x522933(0x60e)][_0x522933(0x6bc)]=this[_0x522933(0xcfb)][_0x522933(0x802)]());else _0x587e8c[_0x522933(0xb38)](/<RIGHT>/i)&&(_0x10e52f=_0x522933(0x4d5));}_0x587e8c=_0x587e8c[_0x522933(0x2bd)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x587e8c=_0x587e8c[_0x522933(0x2bd)](/\\I\[0\]/gi,'');const _0x572a5c=this['lineRect'](_0x181e93);this[_0x522933(0x915)]['clearRect'](_0x572a5c['x'],_0x572a5c['y'],_0x572a5c[_0x522933(0x76b)],_0x572a5c[_0x522933(0x9b1)]);const _0x40dcac=this[_0x522933(0x5cd)](_0x587e8c)[_0x522933(0x76b)];let _0x510515=_0x572a5c['x'];if(_0x10e52f===_0x522933(0x971))_0x510515+=(_0x572a5c['width']-_0x40dcac)/0x2;else _0x10e52f===_0x522933(0x4d5)&&(_0x510515+=_0x572a5c['width']-_0x40dcac);this[_0x522933(0xa3c)](_0x587e8c,_0x510515,_0x572a5c['y'],_0x40dcac+0x8);},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x3de)]=function(_0x474638){const _0x518a1c=_0x397c95;this[_0x518a1c(0x7b0)][_0x518a1c(0x4da)](_0x474638),this['refresh'](),this[_0x518a1c(0x7aa)]();},Window_BattleLog['prototype'][_0x397c95(0x49e)]=function(){const _0x144334=_0x397c95;let _0x2d0905=![];switch(this['_waitMode']){case _0x144334(0x123):_0x2d0905=this[_0x144334(0x69b)]['isEffecting']();break;case'movement':_0x2d0905=this[_0x144334(0x69b)][_0x144334(0x15c)]();break;case _0x144334(0x934):_0x2d0905=this[_0x144334(0x69b)]['isAnimationPlaying']();break;case _0x144334(0x455):_0x2d0905=this[_0x144334(0x69b)][_0x144334(0xa2b)]();break;case _0x144334(0x302):_0x2d0905=this[_0x144334(0x69b)][_0x144334(0xc01)]();break;case _0x144334(0x2c9):_0x2d0905=this['_spriteset'][_0x144334(0x20f)]();break;}return!_0x2d0905&&('cPrDm'!==_0x144334(0x521)?_0x3c5159=_0x4d5a36[_0x144334(0x756)](_0x3afae9):this[_0x144334(0x13c)]=''),_0x2d0905;},Window_BattleLog[_0x397c95(0x6cf)]['waitForAnimation']=function(){const _0x3b6940=_0x397c95;this[_0x3b6940(0x2b3)](_0x3b6940(0x934));},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xcfa)]=function(){const _0x33374d=_0x397c95;this[_0x33374d(0x2b3)](_0x33374d(0x455));},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x5ee)]=function(){const _0x3964bf=_0x397c95;this[_0x3964bf(0x2b3)](_0x3964bf(0x302));},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xb88)]=function(){const _0x3eec44=_0x397c95;this[_0x3eec44(0x2b3)]('opacity');},Window_BattleLog[_0x397c95(0x6cf)]['startTurn']=function(){const _0x2ecd20=_0x397c95,_0x3ea366=VisuMZ['BattleCore'][_0x2ecd20(0x716)][_0x2ecd20(0xa1f)];if(!_0x3ea366[_0x2ecd20(0x1e9)])return;this[_0x2ecd20(0x4da)](_0x2ecd20(0x3de),_0x3ea366[_0x2ecd20(0x8e2)]['format']($gameTroop[_0x2ecd20(0xacf)]())),this[_0x2ecd20(0x4da)](_0x2ecd20(0xbcd),_0x3ea366[_0x2ecd20(0x7a2)]),this[_0x2ecd20(0x4da)](_0x2ecd20(0x15f));},Window_BattleLog[_0x397c95(0x6cf)]['startAction']=function(_0x559e97,_0xc21a72,_0x2af0e9){const _0x1f2396=_0x397c95;if(this[_0x1f2396(0x5c6)](_0xc21a72))BattleManager[_0x1f2396(0x2ea)]();else{if(_0x1f2396(0xabb)!==_0x1f2396(0xabb))for(const _0x1c8946 of _0x1b53c6){const _0x527118=_0x46a447[0x0][_0x1f2396(0xadd)](_0x1c8946[0x0]),_0x4ca743=_0x4b328a[0x1][_0x1f2396(0xadd)](_0x1c8946[0x1]),_0x24cfe8=new _0x257a02(_0x347e3c[_0x1f2396(0xadd)](_0x4ca743),'i');_0x33ec42[_0x527118]=_0x24cfe8;}else this['usePremadeActionSequence'](_0x559e97,_0xc21a72,_0x2af0e9);}},Window_BattleLog[_0x397c95(0x6cf)]['isCustomActionSequence']=function(_0x592533){const _0x136a4d=_0x397c95;if(!SceneManager[_0x136a4d(0x650)]())return![];if(!_0x592533)return![];if(!_0x592533['item']())return![];if(_0x592533[_0x136a4d(0x398)]()[_0x136a4d(0x6cc)]['match'](/<CUSTOM ACTION SEQUENCE>/i)){if('LOzDa'===_0x136a4d(0xb85))return!![];else this[_0x136a4d(0x638)](),this[_0x136a4d(0x721)](),_0xa75ed2[_0x136a4d(0x6cf)][_0x136a4d(0x6d9)][_0x136a4d(0x6a3)](this),this[_0x136a4d(0xadf)]();}if(DataManager[_0x136a4d(0xb4c)](_0x592533[_0x136a4d(0x398)]()))return!![];return![];},Window_BattleLog['prototype']['usePremadeActionSequence']=function(_0x13e366,_0x23fbf7,_0x44d5d0){const _0xf99a50=_0x397c95,_0x9aa114=_0x23fbf7[_0xf99a50(0x398)]();this[_0xf99a50(0x618)](_0x13e366,_0x23fbf7,_0x44d5d0),this['createEffectActionSet'](_0x13e366,_0x23fbf7,_0x44d5d0),this[_0xf99a50(0xd10)](_0x13e366,_0x23fbf7,_0x44d5d0);},Window_BattleLog['prototype'][_0x397c95(0x3eb)]=function(_0x24f0c7,_0x248c82){const _0x50b937=_0x397c95,_0x4ae533=VisuMZ[_0x50b937(0x1f3)][_0x50b937(0x716)]['BattleLog'];if(_0x4ae533[_0x50b937(0x992)]){if(_0x50b937(0x7d4)!==_0x50b937(0x85c))this[_0x50b937(0x4da)]('addText',_0x50b937(0x417)[_0x50b937(0xadd)](DataManager[_0x50b937(0xc43)](_0x248c82)));else{if(!this[_0x50b937(0xaec)])this[_0x50b937(0xb6a)]();return _0x1bc280[_0x50b937(0x1f3)][_0x50b937(0x716)][_0x50b937(0x7a6)][_0x50b937(0x56d)]?this[_0x50b937(0xaec)][_0x50b937(0x163)]():this[_0x50b937(0xaec)][_0x50b937(0x9f2)]();}}if(DataManager['isSkill'](_0x248c82)){if(_0x50b937(0x549)!=='uCoJs'){if(_0x4ae533[_0x50b937(0x640)])this['displayItemMessage'](_0x248c82[_0x50b937(0x902)],_0x24f0c7,_0x248c82);if(_0x4ae533[_0x50b937(0x48f)])this[_0x50b937(0x5df)](_0x248c82[_0x50b937(0xb10)],_0x24f0c7,_0x248c82);}else{if(!this['_linkedSprite'])return;this[_0x50b937(0x282)]=this[_0x50b937(0x282)]||_0x2936b7[_0x50b937(0x6cf)][_0x50b937(0x288)](),this['x']=_0x18e159[_0x50b937(0x403)](this['_linkedSprite'][_0x50b937(0x4fd)]),this['y']=_0x1e4fa4['round'](this[_0x50b937(0x7f8)]['_baseY']-this[_0x50b937(0x282)]*0.5);const _0x63c9c9=_0xcfb503[_0x50b937(0x1f3)][_0x50b937(0x716)][_0x50b937(0x7de)];this['x']+=_0x3f1485[_0x50b937(0x403)](_0x63c9c9[_0x50b937(0x878)]||0x0),this['y']+=_0x46120c[_0x50b937(0x403)](_0x63c9c9[_0x50b937(0x290)]||0x0);}}else{if(_0x4ae533['ActionItemMsg'])this[_0x50b937(0x5df)](TextManager[_0x50b937(0x94f)],_0x24f0c7,_0x248c82);}},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x618)]=function(_0x450a64,_0x3ea2f9,_0xc69907){const _0x27096f=_0x397c95,_0x81b765=_0x3ea2f9[_0x27096f(0x398)]();this[_0x27096f(0x3eb)](_0x450a64,_0x81b765),this[_0x27096f(0x4da)](_0x27096f(0xbba),_0x450a64,_0xc69907,!![]),this[_0x27096f(0x4da)](_0x27096f(0x8a9),_0x450a64,_0x3ea2f9),this[_0x27096f(0x4da)](_0x27096f(0xb09)),this[_0x27096f(0x4da)](_0x27096f(0xbcc),_0x450a64,_0x3ea2f9),this['push'](_0x27096f(0xcdc));},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x9e4)]=function(_0x938917,_0x46a810,_0x14b55d){const _0x36f0dd=_0x397c95;if(this[_0x36f0dd(0x60c)](_0x46a810))this[_0x36f0dd(0x516)](_0x938917,_0x46a810,_0x14b55d);else{if(this['isMeleeMultiTargetAction'](_0x46a810))this[_0x36f0dd(0x451)](_0x938917,_0x46a810,_0x14b55d);else{if(_0x46a810[_0x36f0dd(0xa89)]()){if(_0x36f0dd(0x5d5)!=='wrYKP')this[_0x36f0dd(0x99a)](_0x938917,_0x46a810,_0x14b55d);else{if(this[_0x36f0dd(0x512)]===_0x36f0dd(0x79f))return![];if(this[_0x36f0dd(0x512)]===_0x36f0dd(0x99e))return![];return this['isBattleCoreTargetScope']()&&!this[_0x36f0dd(0xbd5)]()?this[_0x36f0dd(0x139)]():_0x38ee2d[_0x36f0dd(0x1f3)]['Game_Action_isForRandom'][_0x36f0dd(0x6a3)](this);}}else this[_0x36f0dd(0x33a)](_0x938917,_0x46a810,_0x14b55d);}}},Window_BattleLog['prototype'][_0x397c95(0x135)]=function(_0x4a08bd,_0x5c38ff,_0x36eaa8,_0x2ccbb5){const _0x24870a=_0x397c95;if(_0x5c38ff){if(_0x24870a(0xae3)===_0x24870a(0x856)){if(this[_0x24870a(0x512)]==='all\x20actors')return!![];if(this[_0x24870a(0x512)]==='all\x20enemies')return![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x24870a(0x40b)]():_0x4342c4[_0x24870a(0x1f3)][_0x24870a(0x86e)]['call'](this);}else{const _0x39063d=_0x4a08bd['battler']();this[_0x24870a(0x4da)](_0x24870a(0x821),[_0x4a08bd],_0x36eaa8,_0x2ccbb5),this[_0x24870a(0x4da)](_0x24870a(0x623),_0x4a08bd,_0x39063d['_homeX'],_0x39063d[_0x24870a(0x887)],_0x2ccbb5,![],_0x24870a(0xa76)),this['push']('requestMotion',[_0x4a08bd],'evade'),this[_0x24870a(0x4da)](_0x24870a(0xb09)),this[_0x24870a(0x4da)](_0x24870a(0x93a),[_0x4a08bd],_0x24870a(0x77c));}}},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x60c)]=function(_0x247936){const _0x4283de=_0x397c95;if(!_0x247936[_0x4283de(0x279)]())return![];if(!_0x247936[_0x4283de(0x81c)]())return![];if(!_0x247936[_0x4283de(0x845)]())return![];return VisuMZ['BattleCore'][_0x4283de(0x716)][_0x4283de(0x44c)][_0x4283de(0xa78)];},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x516)]=function(_0x14bd2b,_0x46186e,_0x4c2b91){const _0x3b49b2=_0x397c95,_0x5d77bb=_0x14bd2b[_0x3b49b2(0xcea)]()[_0x3b49b2(0xbaa)]<0x2,_0x1670ec=0x14,_0x3c0b10=0x30;if(_0x5d77bb&&_0x14bd2b[_0x3b49b2(0x850)]()!==_0x4c2b91[0x0][_0x3b49b2(0x850)]()){if(_0x3b49b2(0x46d)===_0x3b49b2(0x544)){if(this['_actions'][_0x3b49b2(0x4f0)](_0x558364=>_0x558364[_0x3b49b2(0x398)]()&&_0x558364['isMagicSkill']()))return!![];}else this[_0x3b49b2(0x4da)](_0x3b49b2(0x821),[_0x14bd2b],_0x3c0b10,_0x1670ec),this[_0x3b49b2(0x4da)](_0x3b49b2(0xa14),_0x14bd2b,_0x4c2b91,_0x3b49b2(0xc3f),_0x1670ec,!![],_0x3b49b2(0xa76),!![]),this['push'](_0x3b49b2(0x93a),[_0x14bd2b],_0x3b49b2(0x77c)),this[_0x3b49b2(0x4da)]('waitForMovement');}let _0x2896bc=_0x46186e['isAttack']()?this[_0x3b49b2(0x396)](_0x14bd2b):0x1;for(let _0x13ea10=0x0;_0x13ea10<_0x2896bc;_0x13ea10++){if('qFDqp'!==_0x3b49b2(0xa38))_0x46186e[_0x3b49b2(0x5d0)]()&&_0x14bd2b[_0x3b49b2(0x850)]()&&(_0x3b49b2(0xb4a)===_0x3b49b2(0xb4a)?this[_0x3b49b2(0x4da)]('setActiveWeaponSet',_0x14bd2b,_0x13ea10):this['visible']=this['visibilityState']()),_0x46186e['item']()[_0x3b49b2(0x72d)]<0x0?this[_0x3b49b2(0x99a)](_0x14bd2b,_0x46186e,_0x4c2b91):this[_0x3b49b2(0x33a)](_0x14bd2b,_0x46186e,_0x4c2b91);else{if(this[_0x3b49b2(0xa4d)]===_0x2fe355)this[_0x3b49b2(0xab0)]();this[_0x3b49b2(0xa4d)]=_0x102185;if(_0x842b74['isSceneBattle']()&&_0x40d0ad[_0x3b49b2(0x7ee)]()[_0x3b49b2(0x932)](this)){const _0x3fac48=_0x577d65[_0x3b49b2(0x6fe)][_0x3b49b2(0x1e8)];_0x3fac48&&_0x3fac48[_0x3b49b2(0xc51)](this);}}}_0x46186e['isAttack']()&&_0x14bd2b[_0x3b49b2(0x850)]()&&this['push'](_0x3b49b2(0x1c5),_0x14bd2b),this[_0x3b49b2(0x4da)](_0x3b49b2(0xbba),_0x14bd2b,_0x4c2b91,![]),this[_0x3b49b2(0x135)](_0x14bd2b,_0x5d77bb,_0x3c0b10,_0x1670ec);},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xbca)]=function(_0x563990){const _0x49d87a=_0x397c95;if(!_0x563990[_0x49d87a(0x279)]())return![];if(!_0x563990[_0x49d87a(0x4bb)]())return![];if(!_0x563990[_0x49d87a(0x845)]())return![];return VisuMZ['BattleCore'][_0x49d87a(0x716)][_0x49d87a(0x44c)][_0x49d87a(0xd00)];},Window_BattleLog['prototype'][_0x397c95(0x451)]=function(_0x317bf7,_0xd314b1,_0x21c1bf){const _0x2e254b=_0x397c95,_0x596bd7=_0x317bf7['getAttackMotion']()[_0x2e254b(0xbaa)]<0x2,_0x4ae4bf=0x14,_0x58e6c6=0x30;if(_0x596bd7){if(_0x2e254b(0x629)==='AUula'){this[_0x2e254b(0x4da)](_0x2e254b(0x821),[_0x317bf7],_0x58e6c6,_0x4ae4bf);const _0x3b475d=_0x21c1bf['length']>0x1?_0x2e254b(0x49c):_0x2e254b(0xc3f);this[_0x2e254b(0x4da)](_0x2e254b(0xa14),_0x317bf7,_0x21c1bf,_0x3b475d,_0x4ae4bf,!![],'Linear',!![]),this['push'](_0x2e254b(0x93a),[_0x317bf7],_0x2e254b(0x77c)),this[_0x2e254b(0x4da)](_0x2e254b(0xb09));}else return _0x1fa44e[_0x2e254b(0x1f3)][_0x2e254b(0x460)][_0x2e254b(0x6a3)](this,_0x6d1d1b),_0x5c395f[_0x2e254b(0x6d0)](_0x59e1ab=>{const _0x142151=_0x2e254b;this[_0x142151(0x68a)][this['_indent']]=_0x59e1ab;}),!![];}let _0x1cf49f=_0xd314b1[_0x2e254b(0x5d0)]()?this[_0x2e254b(0x396)](_0x317bf7):0x1;for(let _0x543454=0x0;_0x543454<_0x1cf49f;_0x543454++){_0xd314b1[_0x2e254b(0x5d0)]()&&_0x317bf7['isActor']()&&(_0x2e254b(0x97e)===_0x2e254b(0x3ef)?(_0x3c756d[_0x2e254b(0x1f3)][_0x2e254b(0x825)][_0x2e254b(0x6a3)](this),this[_0x2e254b(0x753)]()):this[_0x2e254b(0x4da)](_0x2e254b(0xb5e),_0x317bf7,_0x543454)),this[_0x2e254b(0x33a)](_0x317bf7,_0xd314b1,_0x21c1bf);}if(_0xd314b1[_0x2e254b(0x5d0)]()&&_0x317bf7['isActor']()){if(_0x2e254b(0x1ea)==='KwNQW')this[_0x2e254b(0x4da)](_0x2e254b(0x1c5),_0x317bf7);else return _0x3ac1df[_0x2e254b(0x1f3)][_0x2e254b(0x716)][_0x2e254b(0x305)]['CalcActionSpeedJS']['call'](this);}this[_0x2e254b(0x4da)](_0x2e254b(0xbba),_0x317bf7,_0x21c1bf,![]),this[_0x2e254b(0x135)](_0x317bf7,_0x596bd7,_0x58e6c6,_0x4ae4bf);},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x99a)]=function(_0xed44b,_0x5a09cd,_0x3f50ac){const _0x7ffa9c=_0x397c95,_0x2a32b5=_0x5a09cd[_0x7ffa9c(0x398)]();for(const _0x44816a of _0x3f50ac){if(_0x7ffa9c(0x66d)!==_0x7ffa9c(0x191)){if(!_0x44816a)continue;this['push']('performAction',_0xed44b,_0x5a09cd),this[_0x7ffa9c(0x4da)](_0x7ffa9c(0xbcd),Sprite_Battler[_0x7ffa9c(0xb29)]),this[_0x7ffa9c(0x4da)](_0x7ffa9c(0xc7d),_0xed44b,[_0x44816a],_0x2a32b5['animationId']),this[_0x7ffa9c(0x4da)]('waitCount',0x18),this[_0x7ffa9c(0x4da)](_0x7ffa9c(0x973),_0xed44b,_0x44816a);}else{const _0x1fa4dc=_0x4b1ff0[_0x7ffa9c(0x1f3)][_0x7ffa9c(0x716)][_0x7ffa9c(0x595)],_0x36a878=this[_0x7ffa9c(0x793)](_0x4cb8c3),_0x2922ef=this[_0x7ffa9c(0x4ec)](_0x4798dd),_0x541655=_0x47958b[_0x7ffa9c(0x403)](_0x2922ef['x']+(_0x2922ef['width']-0x80)/0x2),_0x51dcdf=this[_0x7ffa9c(0x334)](_0x2922ef);let _0x2371be=_0x541655-_0x5825a6['iconWidth']/0x2-0x4,_0x21720d=_0x51dcdf+_0x519aa5[_0x7ffa9c(0xb8f)]/0x2;_0x2371be-_0x562a5c[_0x7ffa9c(0x8f5)]/0x2<_0x2922ef['x']&&(_0x2371be=_0x541655+_0x413231['iconWidth']/0x2-0x4,_0x21720d=_0x51dcdf-_0x430e72[_0x7ffa9c(0xb8f)]/0x2);const _0x3736ec=_0x541655,_0x15a0b6=this[_0x7ffa9c(0x275)](_0x2922ef);this[_0x7ffa9c(0xb2f)](_0x36a878,_0x541655+(_0x1fa4dc['TpbGaugeOffsetX']||0x0),_0x51dcdf+(_0x1fa4dc[_0x7ffa9c(0x95a)]||0x0)),this[_0x7ffa9c(0x8a3)](_0x36a878,_0x541655+(_0x1fa4dc[_0x7ffa9c(0x878)]||0x0),_0x51dcdf+(_0x1fa4dc[_0x7ffa9c(0x290)]||0x0)),this[_0x7ffa9c(0x864)](_0x36a878,_0x2371be+(_0x1fa4dc[_0x7ffa9c(0x69e)]||0x0),_0x21720d+(_0x1fa4dc[_0x7ffa9c(0x905)]||0x0)),this[_0x7ffa9c(0x1bf)](_0x36a878,'hp',_0x3736ec+(_0x1fa4dc[_0x7ffa9c(0x299)]||0x0),_0x15a0b6+(_0x1fa4dc[_0x7ffa9c(0x1e3)]||0x0)),this['placeGauge'](_0x36a878,'mp',_0x3736ec+(_0x1fa4dc[_0x7ffa9c(0x36d)]||0x0),_0x15a0b6+this[_0x7ffa9c(0x62f)]()+(_0x1fa4dc[_0x7ffa9c(0x426)]||0x0)),_0xb9ec1[_0x7ffa9c(0x146)]&&this[_0x7ffa9c(0x1bf)](_0x36a878,'tp',_0x3736ec+(_0x1fa4dc[_0x7ffa9c(0xbfc)]||0x0),_0x15a0b6+this[_0x7ffa9c(0x62f)]()*0x2+(_0x1fa4dc['TpGaugeOffsetY']||0x0));}}},Window_BattleLog[_0x397c95(0x6cf)]['wholeActionSet']=function(_0x23feed,_0x5603db,_0x90eef3){const _0x438188=_0x397c95,_0x3e4295=_0x5603db['item']();let _0x387949=_0x5603db[_0x438188(0x5d0)]()?0x1+_0x23feed[_0x438188(0x2a4)]():0x1;while(_0x387949--){this['push'](_0x438188(0xbee),_0x23feed,_0x5603db),this['push'](_0x438188(0xbcd),Sprite_Battler[_0x438188(0xb29)]),this[_0x438188(0x4da)](_0x438188(0xc7d),_0x23feed,_0x90eef3[_0x438188(0x818)](),_0x3e4295['animationId']),this[_0x438188(0x4da)](_0x438188(0xcdc));}for(const _0x1797a8 of _0x90eef3){if(!_0x1797a8)continue;this[_0x438188(0x4da)](_0x438188(0x973),_0x23feed,_0x1797a8);}},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xd10)]=function(_0xfb96bd,_0x57afc3,_0x43021b){const _0x58d4ca=_0x397c95,_0x5c7b7a=_0x57afc3[_0x58d4ca(0x398)]();this['push']('applyImmortal',_0xfb96bd,_0x43021b,![]),this['push']('waitForNewLine'),this[_0x58d4ca(0x4da)](_0x58d4ca(0x857)),this[_0x58d4ca(0x4da)](_0x58d4ca(0x15f)),this[_0x58d4ca(0x4da)](_0x58d4ca(0x8cb),_0xfb96bd),this[_0x58d4ca(0x4da)](_0x58d4ca(0xb09));},Window_BattleLog['prototype'][_0x397c95(0x87d)]=function(_0x3d4a67){},VisuMZ['BattleCore'][_0x397c95(0xbeb)]=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x754)],Window_BattleLog['prototype'][_0x397c95(0x754)]=function(_0x182ad4){const _0x57713b=_0x397c95;if(!VisuMZ['BattleCore'][_0x57713b(0x716)][_0x57713b(0xa1f)][_0x57713b(0xbe2)])return;VisuMZ[_0x57713b(0x1f3)]['Window_BattleLog_displayCurrentState'][_0x57713b(0x6a3)](this,_0x182ad4);},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x966)]=function(_0x2a04b5){const _0x156db7=_0x397c95;this['push'](_0x156db7(0x2be),_0x2a04b5);VisuMZ['BattleCore']['Settings'][_0x156db7(0x44c)]['CounterPlayback']&&this[_0x156db7(0x4da)](_0x156db7(0xc7d),_0x2a04b5,[BattleManager[_0x156db7(0x127)]],-0x1);if(!VisuMZ['BattleCore'][_0x156db7(0x716)][_0x156db7(0xa1f)][_0x156db7(0x90c)])return;this['push'](_0x156db7(0x3de),TextManager[_0x156db7(0x382)]['format'](_0x2a04b5['name']()));},Window_BattleLog[_0x397c95(0x6cf)]['displayReflection']=function(_0x578e03){const _0x22c777=_0x397c95;this[_0x22c777(0x4da)](_0x22c777(0xb2a),_0x578e03);if(!VisuMZ[_0x22c777(0x1f3)]['Settings']['BattleLog'][_0x22c777(0x48d)])return;this['push'](_0x22c777(0x3de),TextManager['magicReflection'][_0x22c777(0xadd)](_0x578e03[_0x22c777(0xa29)]()));},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x61d)]=function(_0x6de07,_0x4f67c1){const _0x19ad7=_0x397c95;if(VisuMZ[_0x19ad7(0x1f3)][_0x19ad7(0x716)]['ActionSequence']['ReflectPlayback']){const _0x20e05c=_0x4f67c1[_0x19ad7(0x398)]();this['push'](_0x19ad7(0xc7d),_0x6de07,[_0x6de07],_0x20e05c[_0x19ad7(0x72d)]);}},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x582)]=function(_0x394b44,_0x3622c2){const _0x560d74=_0x397c95;this[_0x560d74(0x4da)](_0x560d74(0xaaa),_0x394b44,_0x3622c2);if(!VisuMZ[_0x560d74(0x1f3)]['Settings'][_0x560d74(0xa1f)]['ShowSubstitute'])return;const _0x480568=_0x394b44[_0x560d74(0xa29)](),_0x1f6bae=TextManager[_0x560d74(0x55e)]['format'](_0x480568,_0x3622c2['name']());this[_0x560d74(0x4da)](_0x560d74(0x3de),_0x1f6bae);},VisuMZ['BattleCore']['Window_BattleLog_displayActionResults']=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x8bb)],Window_BattleLog['prototype'][_0x397c95(0x8bb)]=function(_0x4d6968,_0x3a6edd){const _0x3077a2=_0x397c95;VisuMZ[_0x3077a2(0x1f3)][_0x3077a2(0xc64)][_0x3077a2(0x6a3)](this,_0x4d6968,_0x3a6edd);},VisuMZ[_0x397c95(0x1f3)]['Window_BattleLog_displayFailure']=Window_BattleLog['prototype']['displayFailure'],Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x790)]=function(_0x19875c){const _0x1a638e=_0x397c95;if(!VisuMZ[_0x1a638e(0x1f3)][_0x1a638e(0x716)][_0x1a638e(0xa1f)]['ShowFailure'])return;VisuMZ[_0x1a638e(0x1f3)][_0x1a638e(0x874)]['call'](this,_0x19875c);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x137)]=Window_BattleLog[_0x397c95(0x6cf)]['displayCritical'],Window_BattleLog['prototype']['displayCritical']=function(_0x4a55cb){const _0x15df1a=_0x397c95;if(!VisuMZ[_0x15df1a(0x1f3)]['Settings'][_0x15df1a(0xa1f)][_0x15df1a(0x2cb)])return;VisuMZ[_0x15df1a(0x1f3)][_0x15df1a(0x137)]['call'](this,_0x4a55cb);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x964)]=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x40a)],Window_BattleLog['prototype'][_0x397c95(0x40a)]=function(_0x2e830f){const _0x2c8776=_0x397c95;if(!VisuMZ[_0x2c8776(0x1f3)]['Settings'][_0x2c8776(0xa1f)][_0x2c8776(0x20e)])this['push'](_0x2c8776(0x8c6),_0x2e830f);else{if(_0x2c8776(0x810)!==_0x2c8776(0x810)){const _0x4c2697=_0x3ca858(_0x56d1dd['$1'])[_0x2c8776(0x9af)](/[\r\n]+/)[_0x2c8776(0x723)](''),_0x4540ab=_0x111261[_0x2c8776(0x831)](_0x4c2697);_0x58094e[_0x2c8776(0x222)]=_0x214b3e[_0x2c8776(0x9cb)](_0x4540ab);}else VisuMZ['BattleCore'][_0x2c8776(0x964)][_0x2c8776(0x6a3)](this,_0x2e830f);}},VisuMZ[_0x397c95(0x1f3)]['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x397c95(0x6cf)]['displayEvasion'],Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xa2d)]=function(_0x4c4c4b){const _0x44a6eb=_0x397c95;if(!VisuMZ[_0x44a6eb(0x1f3)][_0x44a6eb(0x716)][_0x44a6eb(0xa1f)][_0x44a6eb(0x20e)]){if(_0x44a6eb(0x8b4)!==_0x44a6eb(0x8b4)){this[_0x44a6eb(0x6de)]=this[_0x44a6eb(0x377)]()?'pagedown':'pageup',this[_0x44a6eb(0x383)]=_0x5c3e6b['getInputButtonString'](this[_0x44a6eb(0x6de)]);const _0x446bfe=_0x271091[_0x44a6eb(0xa92)][_0x44a6eb(0x716)][_0x44a6eb(0x914)][_0x44a6eb(0x8b9)];_0x2197d5=_0x446bfe['format'](this[_0x44a6eb(0x383)],_0x227501);}else _0x4c4c4b[_0x44a6eb(0x3f6)]()[_0x44a6eb(0x699)]?this[_0x44a6eb(0x4da)](_0x44a6eb(0x9fc),_0x4c4c4b):this[_0x44a6eb(0x4da)](_0x44a6eb(0x18a),_0x4c4c4b);}else VisuMZ[_0x44a6eb(0x1f3)]['Window_BattleLog_displayEvasion'][_0x44a6eb(0x6a3)](this,_0x4c4c4b);},Window_BattleLog['prototype']['displayHpDamage']=function(_0x1fd702){const _0x2f31ee=_0x397c95;_0x1fd702[_0x2f31ee(0x3f6)]()[_0x2f31ee(0x913)]&&('NKBZT'!==_0x2f31ee(0x808)?(_0x1fd702[_0x2f31ee(0x303)]=0x0,_0x1fd702[_0x2f31ee(0x3f6)]()[_0x2f31ee(0xc06)]>0x0&&!_0x1fd702[_0x2f31ee(0x3f6)]()['drain']&&(_0x2f31ee(0x862)===_0x2f31ee(0x862)?(_0x1fd702[_0x2f31ee(0x303)]=_0x1fd702[_0x2f31ee(0x3f6)]()[_0x2f31ee(0xc06)],this[_0x2f31ee(0x4da)](_0x2f31ee(0x488),_0x1fd702)):_0x489fbd[_0x2f31ee(0x691)](_0x24ca4f)),_0x1fd702[_0x2f31ee(0x3f6)]()[_0x2f31ee(0xc06)]<0x0&&this['push']('performRecovery',_0x1fd702),VisuMZ[_0x2f31ee(0x1f3)]['Settings'][_0x2f31ee(0xa1f)][_0x2f31ee(0xa44)]&&this['push'](_0x2f31ee(0x3de),this[_0x2f31ee(0x970)](_0x1fd702))):this[_0x2f31ee(0xb6e)][_0x2f31ee(0x3d2)]=![]);},VisuMZ['BattleCore']['Window_BattleLog_displayMpDamage']=Window_BattleLog['prototype'][_0x397c95(0x985)],Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x985)]=function(_0x5cdc7e){const _0x3bb18f=_0x397c95;if(!VisuMZ[_0x3bb18f(0x1f3)][_0x3bb18f(0x716)]['BattleLog'][_0x3bb18f(0xa75)])return;VisuMZ[_0x3bb18f(0x1f3)]['Window_BattleLog_displayMpDamage']['call'](this,_0x5cdc7e);},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xc96)]=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xbe5)],Window_BattleLog[_0x397c95(0x6cf)]['displayTpDamage']=function(_0x5ed861){const _0x4cf9f7=_0x397c95;if(!VisuMZ[_0x4cf9f7(0x1f3)][_0x4cf9f7(0x716)][_0x4cf9f7(0xa1f)][_0x4cf9f7(0x3b0)])return;VisuMZ[_0x4cf9f7(0x1f3)][_0x4cf9f7(0xc96)][_0x4cf9f7(0x6a3)](this,_0x5ed861);},Window_BattleLog['prototype'][_0x397c95(0xac3)]=function(_0x127574){const _0x30f498=_0x397c95;if(_0x127574['result']()[_0x30f498(0x91a)]()){if(_0x30f498(0x955)==='sBxGS'){this[_0x30f498(0x40f)]=_0x360b9a,this[_0x30f498(0xb11)]='';const _0x4572ce=new _0x28c361(0x0,0x0,_0x6ee50f[_0x30f498(0xb5d)],this[_0x30f498(0x288)]()*0x4);_0x5dabc2[_0x30f498(0x6cf)]['initialize'][_0x30f498(0x6a3)](this,_0x4572ce),this[_0x30f498(0xbf1)](0x2),this[_0x30f498(0x9be)]=0x0;}else this['push'](_0x30f498(0x293)),this[_0x30f498(0x7cb)](_0x127574),this[_0x30f498(0xbf4)](_0x127574),this[_0x30f498(0x4da)](_0x30f498(0x988));}},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x472)]=function(_0x4bc090){const _0x2ef455=_0x397c95,_0x56fffa=_0x4bc090[_0x2ef455(0x3f6)](),_0xc0d1c0=_0x56fffa['addedStateObjects']();for(const _0x4aeeb2 of _0xc0d1c0){if(_0x2ef455(0x5dc)!=='DBrin')this[_0x2ef455(0x8d7)]();else{const _0x4ad179=_0x4bc090[_0x2ef455(0x850)]()?_0x4aeeb2[_0x2ef455(0x902)]:_0x4aeeb2[_0x2ef455(0xb10)];_0x4ad179&&VisuMZ[_0x2ef455(0x1f3)][_0x2ef455(0x716)]['BattleLog'][_0x2ef455(0xaa3)]&&(this[_0x2ef455(0x4da)](_0x2ef455(0x2f1)),this['push']('popBaseLine'),this['push'](_0x2ef455(0x293)),this[_0x2ef455(0x4da)](_0x2ef455(0x3de),_0x4ad179[_0x2ef455(0xadd)](_0x4bc090[_0x2ef455(0xa29)]())),this[_0x2ef455(0x4da)](_0x2ef455(0xbf0))),_0x4aeeb2['id']===_0x4bc090[_0x2ef455(0x207)]()&&this[_0x2ef455(0x4da)](_0x2ef455(0x362),_0x4bc090);}}},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x2f1)]=function(){},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x442)]=function(_0x47e668){const _0x45144a=_0x397c95;if(!VisuMZ['BattleCore']['Settings'][_0x45144a(0xa1f)][_0x45144a(0x136)])return;const _0x3f6082=_0x47e668[_0x45144a(0x3f6)](),_0x55bbdb=_0x3f6082[_0x45144a(0x2b6)]();for(const _0xc06d82 of _0x55bbdb){_0xc06d82[_0x45144a(0x577)]&&(this[_0x45144a(0x4da)](_0x45144a(0xb4f)),this[_0x45144a(0x4da)]('popBaseLine'),this[_0x45144a(0x4da)](_0x45144a(0x293)),this['push'](_0x45144a(0x3de),_0xc06d82[_0x45144a(0x577)][_0x45144a(0xadd)](_0x47e668[_0x45144a(0xa29)]())),this[_0x45144a(0x4da)](_0x45144a(0xbf0)));}},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xb4f)]=function(){},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xbf4)]=function(_0x5b0ddd){const _0xebad9d=_0x397c95,_0x16d9a7=VisuMZ['BattleCore'][_0xebad9d(0x716)]['BattleLog'],_0x4d234c=_0x5b0ddd['result']();if(_0x16d9a7[_0xebad9d(0x33e)])this['displayBuffs'](_0x5b0ddd,_0x4d234c[_0xebad9d(0xc56)],TextManager[_0xebad9d(0xbb3)]);if(_0x16d9a7[_0xebad9d(0xa50)])this[_0xebad9d(0xb02)](_0x5b0ddd,_0x4d234c['addedDebuffs'],TextManager[_0xebad9d(0xa15)]);if(_0x16d9a7[_0xebad9d(0x6f4)])this[_0xebad9d(0xb02)](_0x5b0ddd,_0x4d234c[_0xebad9d(0x85b)],TextManager[_0xebad9d(0x405)]);},Window_BattleLog['prototype'][_0x397c95(0xb02)]=function(_0x3ed827,_0x845834,_0x385a53){const _0x104e8a=_0x397c95;for(const _0x31fc21 of _0x845834){const _0x5d4ff9=_0x385a53[_0x104e8a(0xadd)](_0x3ed827[_0x104e8a(0xa29)](),TextManager[_0x104e8a(0x4f7)](_0x31fc21));this['push'](_0x104e8a(0x3e5)),this[_0x104e8a(0x4da)](_0x104e8a(0x293)),this[_0x104e8a(0x4da)](_0x104e8a(0x3de),_0x5d4ff9),this[_0x104e8a(0x4da)]('wait');}},VisuMZ['BattleCore'][_0x397c95(0x705)]=Window_BattleLog[_0x397c95(0x6cf)]['clear'],Window_BattleLog[_0x397c95(0x6cf)]['clear']=function(){const _0x442577=_0x397c95;VisuMZ[_0x442577(0x1f3)][_0x442577(0x705)][_0x442577(0x6a3)](this),this[_0x442577(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0xb95)]=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x293)],Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x293)]=function(){const _0x50bd77=_0x397c95;VisuMZ[_0x50bd77(0x1f3)][_0x50bd77(0xb95)][_0x50bd77(0x6a3)](this),this['callNextMethod']();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x1a7)]=Window_BattleLog['prototype']['popBaseLine'],Window_BattleLog['prototype'][_0x397c95(0x3e5)]=function(){const _0x4c4747=_0x397c95;VisuMZ[_0x4c4747(0x1f3)]['Window_BattleLog_popBaseLine']['call'](this),this[_0x4c4747(0x46f)](),this[_0x4c4747(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x897)]=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x9ca)],Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x9ca)]=function(_0x32915d){const _0x3dc258=_0x397c95;VisuMZ[_0x3dc258(0x1f3)][_0x3dc258(0x897)]['call'](this,_0x32915d),this[_0x3dc258(0x7aa)]();},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x988)]=function(){const _0x4ef186=_0x397c95;let _0x2d6ad2=0x0;this[_0x4ef186(0x7b5)]['length']>0x0&&(_0x2d6ad2=this['_baseLineStack'][this[_0x4ef186(0x7b5)][_0x4ef186(0x187)]-0x1]);if(this[_0x4ef186(0x7b0)][_0x4ef186(0x187)]>_0x2d6ad2){if(_0x4ef186(0x6c4)==='nRiWZ')this[_0x4ef186(0xbf0)]();else{const _0x4f349d=_0x34cfce[_0x4ef186(0xc99)][_0x4ef186(0x716)][_0x4ef186(0x7f2)];_0x4f349d&&_0x4f349d[_0x4ef186(0xa39)]===![]&&this[_0x4ef186(0x7b1)](0x1);}}else this[_0x4ef186(0x7aa)]();},VisuMZ['BattleCore']['Window_BattleLog_performActionStart']=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x8a9)],Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x8a9)]=function(_0x11cbf0,_0xe07964){const _0x2344f6=_0x397c95;VisuMZ['BattleCore'][_0x2344f6(0x4dc)][_0x2344f6(0x6a3)](this,_0x11cbf0,_0xe07964),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performAction']=Window_BattleLog[_0x397c95(0x6cf)]['performAction'],Window_BattleLog['prototype'][_0x397c95(0xbee)]=function(_0x36e707,_0x3c90a0){const _0xf1d637=_0x397c95;VisuMZ[_0xf1d637(0x1f3)]['Window_BattleLog_performAction'][_0xf1d637(0x6a3)](this,_0x36e707,_0x3c90a0),this[_0xf1d637(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x8cb)],Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x8cb)]=function(_0xde07ad){const _0x47e900=_0x397c95;VisuMZ[_0x47e900(0x1f3)][_0x47e900(0x27b)]['call'](this,_0xde07ad);for(const _0x545916 of BattleManager['allBattleMembers']()){if('bghdy'===_0x47e900(0x7c9))this[_0x47e900(0x95c)]('guard');else{if(!_0x545916)continue;if(_0x545916[_0x47e900(0x88a)]())continue;_0x545916['performActionEndMembers']();}}this[_0x47e900(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x967)]=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x488)],Window_BattleLog['prototype'][_0x397c95(0x488)]=function(_0x22af29){const _0x3b457f=_0x397c95;VisuMZ[_0x3b457f(0x1f3)][_0x3b457f(0x967)]['call'](this,_0x22af29),this[_0x3b457f(0x7aa)]();},VisuMZ['BattleCore'][_0x397c95(0xa11)]=Window_BattleLog['prototype']['performMiss'],Window_BattleLog[_0x397c95(0x6cf)]['performMiss']=function(_0x3edfca){const _0xf2adb9=_0x397c95;VisuMZ['BattleCore'][_0xf2adb9(0xa11)][_0xf2adb9(0x6a3)](this,_0x3edfca),this[_0xf2adb9(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x54b)]=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xb42)],Window_BattleLog['prototype'][_0x397c95(0xb42)]=function(_0x295aed){const _0x461fc4=_0x397c95;VisuMZ[_0x461fc4(0x1f3)]['Window_BattleLog_performRecovery'][_0x461fc4(0x6a3)](this,_0x295aed),this[_0x461fc4(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)]['Window_BattleLog_performEvasion']=Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x9fc)],Window_BattleLog['prototype']['performEvasion']=function(_0x546790){const _0x3ab924=_0x397c95;VisuMZ[_0x3ab924(0x1f3)]['Window_BattleLog_performEvasion'][_0x3ab924(0x6a3)](this,_0x546790),this[_0x3ab924(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x6db)]=Window_BattleLog['prototype'][_0x397c95(0x18a)],Window_BattleLog['prototype']['performMagicEvasion']=function(_0x5d9e6d){const _0x29ce15=_0x397c95;VisuMZ[_0x29ce15(0x1f3)][_0x29ce15(0x6db)]['call'](this,_0x5d9e6d),this[_0x29ce15(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x317)]=Window_BattleLog[_0x397c95(0x6cf)]['performCounter'],Window_BattleLog[_0x397c95(0x6cf)]['performCounter']=function(_0x5ba61d){const _0x3f0734=_0x397c95;VisuMZ[_0x3f0734(0x1f3)][_0x3f0734(0x317)][_0x3f0734(0x6a3)](this,_0x5ba61d),this[_0x3f0734(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x782)]=Window_BattleLog['prototype'][_0x397c95(0xb2a)],Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xb2a)]=function(_0x196017){const _0x1f6501=_0x397c95;VisuMZ[_0x1f6501(0x1f3)][_0x1f6501(0x782)][_0x1f6501(0x6a3)](this,_0x196017),this[_0x1f6501(0x7aa)]();},VisuMZ['BattleCore'][_0x397c95(0xc77)]=Window_BattleLog['prototype'][_0x397c95(0xaaa)],Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0xaaa)]=function(_0x1fd056,_0x57cbcc){const _0x13005c=_0x397c95;VisuMZ['BattleCore']['Window_BattleLog_performSubstitute']['call'](this,_0x1fd056,_0x57cbcc),this[_0x13005c(0x7aa)]();},VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x506)]=Window_BattleLog['prototype']['performCollapse'],Window_BattleLog[_0x397c95(0x6cf)]['performCollapse']=function(_0x269688){const _0x5f2335=_0x397c95;VisuMZ['BattleCore'][_0x5f2335(0x506)][_0x5f2335(0x6a3)](this,_0x269688),this[_0x5f2335(0x7aa)]();},Window_BattleLog[_0x397c95(0x6cf)]['performCastAnimation']=function(_0x5df163,_0x4fe180){const _0x4cbd08=_0x397c95;_0x5df163[_0x4cbd08(0xbcc)](_0x4fe180),this[_0x4cbd08(0x7aa)]();},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x41f)]=function(_0x44c7fb,_0x2e1238){const _0x57cb7c=_0x397c95,_0x500aed=_0x44c7fb['attackAnimationId1']();_0x500aed<=0x0?'DzsYy'===_0x57cb7c(0x13a)?SoundManager['playEnemyAttack']():this[_0x57cb7c(0x3d6)]():this[_0x57cb7c(0x45e)](_0x2e1238,_0x500aed);},Window_BattleLog['prototype'][_0x397c95(0xbba)]=function(_0x2d8bfd,_0x4ada75,_0x4c9d42){const _0xf5d8e=_0x397c95,_0x5f7aa1=[_0x2d8bfd][_0xf5d8e(0x900)](_0x4ada75);for(const _0x257dab of _0x5f7aa1){if(_0xf5d8e(0x586)===_0xf5d8e(0x586)){if(!_0x257dab)continue;_0x257dab[_0xf5d8e(0x4f1)](_0x4c9d42);}else{if(_0x123704[_0xf5d8e(0xcfb)]&&_0x5994f2['_battler']){if(_0x32025e[_0xf5d8e(0xcfb)][_0xf5d8e(0x850)]()&&_0x343286[_0xf5d8e(0xcfb)][_0xf5d8e(0x407)]())return 0x1;else{if(_0x58be4a[_0xf5d8e(0xcfb)]['isActor']()&&_0x4be341['_battler'][_0xf5d8e(0x407)]())return-0x1;}}}}this[_0xf5d8e(0x7aa)]();},Window_BattleLog[_0x397c95(0x6cf)]['waitCount']=function(_0x27d853){this['_waitCount']=_0x27d853;},Window_BattleLog[_0x397c95(0x6cf)]['requestMotion']=function(_0x2cf1d3,_0x301846){const _0x17a2fb=_0x397c95;for(const _0x2a8f05 of _0x2cf1d3){if(!_0x2a8f05)continue;_0x2a8f05[_0x17a2fb(0x93a)](_0x301846);}this[_0x17a2fb(0x7aa)]();},Window_BattleLog['prototype']['performMoveToPoint']=function(_0x2b21bb,_0x1fd422,_0x2951b0,_0x934204,_0x19bc1b,_0x10e104){const _0x353ad2=_0x397c95;_0x2b21bb[_0x353ad2(0x27d)](_0x1fd422,_0x2951b0,_0x934204,_0x19bc1b,_0x10e104,-0x1),this[_0x353ad2(0x7aa)]();},Window_BattleLog[_0x397c95(0x6cf)]['performMoveToTargets']=function(_0x47747b,_0x272b71,_0x20350d,_0x24b767,_0x58699e,_0x22e88a,_0x2985cb){const _0x3a3e0f=_0x397c95,_0x4a98a4=Math[_0x3a3e0f(0x9d3)](..._0x272b71[_0x3a3e0f(0xb9a)](_0x4fc3ba=>_0x4fc3ba[_0x3a3e0f(0x7eb)]()['_baseX']-_0x4fc3ba[_0x3a3e0f(0x7eb)]()[_0x3a3e0f(0x559)]()/0x2)),_0x15f430=Math[_0x3a3e0f(0x483)](..._0x272b71[_0x3a3e0f(0xb9a)](_0x7e9cd2=>_0x7e9cd2[_0x3a3e0f(0x7eb)]()[_0x3a3e0f(0x4fd)]+_0x7e9cd2[_0x3a3e0f(0x7eb)]()['mainSpriteWidth']()/0x2)),_0x34af6a=Math['min'](..._0x272b71[_0x3a3e0f(0xb9a)](_0x78e991=>_0x78e991[_0x3a3e0f(0x7eb)]()[_0x3a3e0f(0x39a)]-_0x78e991[_0x3a3e0f(0x7eb)]()[_0x3a3e0f(0xc37)]())),_0x3c231e=Math[_0x3a3e0f(0x483)](..._0x272b71[_0x3a3e0f(0xb9a)](_0x2ed004=>_0x2ed004[_0x3a3e0f(0x7eb)]()[_0x3a3e0f(0x39a)])),_0x26d14f=_0x272b71['filter'](_0x22ba6a=>_0x22ba6a[_0x3a3e0f(0x850)]())[_0x3a3e0f(0x187)],_0x534826=_0x272b71[_0x3a3e0f(0x742)](_0x10333d=>_0x10333d['isEnemy']())['length'];let _0x40fad1=0x0,_0x328b95=0x0;if(_0x20350d[_0x3a3e0f(0xb38)](/front/i))_0x40fad1=_0x26d14f>=_0x534826?_0x4a98a4:_0x15f430;else{if(_0x20350d['match'](/middle/i)){if(_0x3a3e0f(0x33c)!==_0x3a3e0f(0xc35))_0x40fad1=(_0x4a98a4+_0x15f430)/0x2,_0x2985cb=-0x1;else{const _0x50867e=_0x5adef9[_0x3a3e0f(0x1f3)][_0x3a3e0f(0x716)][_0x3a3e0f(0x44c)],_0x27da88=_0x50867e[_0x3a3e0f(0x5a6)],_0x5405ad=_0x50867e[_0x3a3e0f(0x147)],_0x40294b=_0x50867e[_0x3a3e0f(0x4d1)];this['startMove'](_0x27da88,_0x5405ad,_0x40294b);}}else _0x20350d['match'](/back/i)&&(_0x40fad1=_0x26d14f>=_0x534826?_0x15f430:_0x4a98a4);}if(_0x20350d[_0x3a3e0f(0xb38)](/head/i))_0x328b95=_0x34af6a;else{if(_0x20350d[_0x3a3e0f(0xb38)](/center/i)){if(_0x3a3e0f(0x397)!==_0x3a3e0f(0x397))_0x81fbf7=_0x196185;else{_0x328b95=(_0x34af6a+_0x3c231e)/0x2;if(_0x47747b[_0x3a3e0f(0x7eb)]())_0x328b95+=_0x47747b['battler']()['height']/0x2;}}else _0x20350d[_0x3a3e0f(0xb38)](/base/i)&&(_0x328b95=_0x3c231e);}_0x47747b[_0x3a3e0f(0x27d)](_0x40fad1,_0x328b95,_0x24b767,_0x58699e,_0x22e88a,_0x2985cb),this['callNextMethod']();},Window_BattleLog[_0x397c95(0x6cf)][_0x397c95(0x821)]=function(_0x3d3cd2,_0x371011,_0x3498e0){const _0x403993=_0x397c95;for(const _0x205de4 of _0x3d3cd2){if(!_0x205de4)continue;_0x205de4[_0x403993(0x838)](_0x371011,_0x3498e0);}this[_0x403993(0x7aa)]();};function Window_BattleMultiTarget(){const _0x218fd3=_0x397c95;this[_0x218fd3(0x918)](...arguments);}Window_BattleMultiTarget[_0x397c95(0x6cf)]=Object[_0x397c95(0x285)](Window_Command[_0x397c95(0x6cf)]),Window_BattleMultiTarget[_0x397c95(0x6cf)][_0x397c95(0x32a)]=Window_BattleMultiTarget,VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x716)]['MultiTarget']=VisuMZ[_0x397c95(0x1f3)]['Settings'][_0x397c95(0x6ed)]||{},Window_BattleMultiTarget[_0x397c95(0x996)]=VisuMZ['BattleCore'][_0x397c95(0x716)][_0x397c95(0x6ed)][_0x397c95(0x40e)]??0x118,Window_BattleMultiTarget[_0x397c95(0x8eb)]=VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x716)][_0x397c95(0x6ed)]['BgType']??0x2,Window_BattleMultiTarget['SHOW_BUTTON']=VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x716)]['MultiTarget'][_0x397c95(0x1ba)]??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x716)][_0x397c95(0x6ed)]['AllActorsText']??_0x397c95(0x408),Window_BattleMultiTarget[_0x397c95(0xb56)]=VisuMZ[_0x397c95(0x1f3)]['Settings'][_0x397c95(0x6ed)][_0x397c95(0x84a)]??_0x397c95(0x12c),Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x397c95(0x1f3)]['Settings'][_0x397c95(0x6ed)][_0x397c95(0x176)]??0x0,Window_BattleMultiTarget[_0x397c95(0x1bc)]=VisuMZ['BattleCore'][_0x397c95(0x716)][_0x397c95(0x6ed)]['ActorOffsetY']??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_X']=VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x716)][_0x397c95(0x6ed)][_0x397c95(0x621)]??0x0,Window_BattleMultiTarget[_0x397c95(0x911)]=VisuMZ[_0x397c95(0x1f3)][_0x397c95(0x716)]['MultiTarget'][_0x397c95(0x485)]??0x0,Window_BattleMultiTarget['prototype'][_0x397c95(0x918)]=function(_0x40bcd0,_0xb4adc2){const _0x22a0e3=_0x397c95;this[_0x22a0e3(0x2ca)]=_0xb4adc2,Window_Command[_0x22a0e3(0x6cf)][_0x22a0e3(0x918)][_0x22a0e3(0x6a3)](this,_0x40bcd0),this[_0x22a0e3(0xbf1)](Window_BattleMultiTarget[_0x22a0e3(0x8eb)]),this[_0x22a0e3(0x7c1)](),this[_0x22a0e3(0x16a)](),this[_0x22a0e3(0xb3d)]();},Window_BattleMultiTarget[_0x397c95(0x6cf)][_0x397c95(0x377)]=function(){return this['_forActor'];},Window_BattleMultiTarget[_0x397c95(0x6cf)][_0x397c95(0xa51)]=function(){const _0x5804b1=_0x397c95;let _0x197dbb=this[_0x5804b1(0x377)]()?Window_BattleMultiTarget[_0x5804b1(0x33f)]:Window_BattleMultiTarget[_0x5804b1(0xb56)];if(Imported[_0x5804b1(0x301)]&&Window_BattleMultiTarget['SHOW_BUTTON']){this[_0x5804b1(0x6de)]=this[_0x5804b1(0x377)]()?_0x5804b1(0xab9):_0x5804b1(0x799),this[_0x5804b1(0x383)]=TextManager[_0x5804b1(0x3ce)](this[_0x5804b1(0x6de)]);const _0x5eb3b8=VisuMZ[_0x5804b1(0xa92)][_0x5804b1(0x716)][_0x5804b1(0x914)][_0x5804b1(0x8b9)];_0x197dbb=_0x5eb3b8[_0x5804b1(0xadd)](this[_0x5804b1(0x383)],_0x197dbb);}this[_0x5804b1(0x659)](_0x197dbb,_0x5804b1(0x4b9));},Window_BattleMultiTarget[_0x397c95(0x6cf)]['drawItem']=function(_0x2e7556){const _0x250e9b=_0x397c95,_0x1d27db=this[_0x250e9b(0x296)](_0x2e7556);this['resetTextColor'](),this[_0x250e9b(0xb0d)](this[_0x250e9b(0x216)](_0x2e7556));const _0x3fcfda=this['commandName'](_0x2e7556),_0x2885af=this[_0x250e9b(0x5cd)](_0x3fcfda)[_0x250e9b(0x76b)],_0x470540=_0x1d27db['x']+Math[_0x250e9b(0xaee)]((_0x1d27db[_0x250e9b(0x76b)]-_0x2885af)/0x2);this[_0x250e9b(0xa3c)](_0x3fcfda,_0x470540,_0x1d27db['y'],_0x1d27db[_0x250e9b(0x76b)]);},Window_BattleMultiTarget[_0x397c95(0x6cf)][_0x397c95(0x76c)]=function(){const _0xae4f7a=_0x397c95;Window_Command[_0xae4f7a(0x6cf)]['update']['call'](this),this['updateVisibility'](),this['updateKeyboardKeys']();},Window_BattleMultiTarget[_0x397c95(0x6cf)][_0x397c95(0x548)]=function(){const _0x25669d=_0x397c95;this[_0x25669d(0x3d2)]=this[_0x25669d(0x5d9)]();},Window_BattleMultiTarget['prototype'][_0x397c95(0x5d9)]=function(){const _0x5ad8d2=_0x397c95,_0x4ee06=BattleManager[_0x5ad8d2(0x772)](),_0x3d6e25=_0x4ee06&&_0x4ee06['canSingleOrMultipleSelect']();if(!_0x3d6e25)return![];const _0x4d8a4f=SceneManager[_0x5ad8d2(0x6fe)];if(this['forActor']()){if(_0x5ad8d2(0xd11)!==_0x5ad8d2(0xd11))_0x324fa5[_0x5ad8d2(0x9e1)]&&_0xd7e4fb[_0x5ad8d2(0x9e1)]();else{if(_0x4d8a4f[_0x5ad8d2(0xba1)]['active']&&_0x4d8a4f[_0x5ad8d2(0xba1)][_0x5ad8d2(0xabe)][_0x5ad8d2(0xab9)])return!![];if(_0x4d8a4f[_0x5ad8d2(0x346)][_0x5ad8d2(0x7e6)]&&_0x4d8a4f[_0x5ad8d2(0x346)][_0x5ad8d2(0xabe)][_0x5ad8d2(0xab9)])return!![];}}else{if(_0x4d8a4f['_enemyWindow']['active']&&_0x4d8a4f[_0x5ad8d2(0x346)][_0x5ad8d2(0xabe)][_0x5ad8d2(0x799)])return!![];}return![];},Window_BattleMultiTarget['prototype']['updateKeyboardKeys']=function(){const _0x2564f6=_0x397c95;if(!Imported[_0x2564f6(0x301)])return;this['_buttonText']!==TextManager['getInputButtonString'](this[_0x2564f6(0x6de)])&&this['refresh']();},Window_BattleMultiTarget['prototype']['processTouch']=function(){const _0x59c828=_0x397c95;if(this[_0x59c828(0x3d2)]&&TouchInput[_0x59c828(0x627)]()){if(_0x59c828(0xbd6)==='tybfN'){const _0x4659e7=this[_0x59c828(0xcdb)]();if(_0x4659e7>=0x0){if(_0x59c828(0xbe8)===_0x59c828(0x456)){if(this['_cache'][_0x59c828(0x410)]!==_0x1a6d09)return this[_0x59c828(0xcfe)][_0x59c828(0x410)];const _0x122c55=/<DAMAGE CAP:[ ](\d+)>/i,_0x6124a7=this[_0x59c828(0xa9d)]()[_0x59c828(0xb9a)](_0x262d4d=>_0x262d4d&&_0x262d4d[_0x59c828(0x6cc)]['match'](_0x122c55)?_0x84edbb(_0x1a9553['$1']):0x0);let _0xa65989=_0x6124a7[_0x59c828(0x187)]>0x0?_0x39dcb9[_0x59c828(0x483)](..._0x6124a7):0x0;if(_0xa65989<=0x0)_0xa65989=_0x16787d[_0x59c828(0x1f3)][_0x59c828(0x716)][_0x59c828(0x7a6)][_0x59c828(0x6ae)];return this['_cache'][_0x59c828(0x410)]=_0xa65989,this[_0x59c828(0xcfe)][_0x59c828(0x410)];}else{const _0x483aee=this[_0x59c828(0x377)]()?'pagedown':_0x59c828(0x799);Input[_0x59c828(0xa55)](_0x483aee);}}}else{if(!_0x5b5b2b)return;if(!this[_0x59c828(0x1f5)])return;if(_0x43f7ba[_0x59c828(0x850)]()){}else{if(_0x22b953[_0x59c828(0x407)]()){if(this[_0x59c828(0x32a)]===_0x360f75&&!_0x52f9d7[_0x59c828(0x4a3)]())return;}}this['_hpGaugeSprite']['setup'](_0x1cda48,'hp');}}};